#!/usr/bin/env node

let { basename, dirname } = require('path');
let fs = require('fs');
let fastglob = require('fast-glob');
let prettier = require('prettier');
let traverse = require('@babel/traverse').default;
let camelcase = require('camelcase');
let t = require('@babel/types');

function transformContents(name, contents) {
  let halted = false;

  let output = prettier.format(contents, {
    parser(text, { babylon }) {
      let ast = babylon(text);

      traverse(ast, {
        JSXOpeningElement(path) {
          let hasAddedClassName = false;

          traverse(
            path.node,
            {
              JSXAttribute(path) {
                if (
                  path.parent.name.name === 'svg' &&
                  path.node.value.type === 'StringLiteral'
                ) {
                  switch (path.node.name.name) {
                    case 'width':
                      path.replaceWith(
                        t.jsxAttribute(
                          t.jsxIdentifier('width'),
                          t.jsxExpressionContainer(t.Identifier('width'))
                        )
                      );
                      break;
                    case 'height':
                      path.replaceWith(
                        t.jsxAttribute(
                          t.jsxIdentifier('height'),
                          t.jsxExpressionContainer(t.Identifier('height'))
                        )
                      );

                      path.insertAfter(
                        t.JSXSpreadAttribute(
                          t.callExpression(t.identifier('css'), [
                            t.identifier('style')
                          ])
                        )
                      );

                      path.insertAfter(
                        t.JSXSpreadAttribute(t.identifier('props'))
                      );

                      break;
                  }
                } else {
                  if (
                    (path.node.name.name === 'fill' ||
                      path.node.name.name === 'stroke') &&
                    path.node.value.type === 'StringLiteral' &&
                    path.node.value.value === 'black'
                  ) {
                    path.replaceWith(
                      t.jsxAttribute(
                        path.node.name,
                        t.jsxExpressionContainer(t.Identifier('color'))
                      )
                    );

                    if (!hasAddedClassName) {
                      hasAddedClassName = true;

                      path.insertAfter(
                        t.jsxAttribute(
                          t.jsxIdentifier('className'),
                          // There is a bug in either babel-traverse
                          // or prettier. prettier expects there to be
                          // a `raw` field but babel-traverse doesn't
                          // generate it
                          {
                            type: 'StringLiteral',
                            value: 'path',
                            raw: '"path"'
                          }
                        )
                      );
                    }
                  }
                }

                let cameled = camelcase(path.node.name.name);
                if (cameled !== path.node.name.name) {
                  path.replaceWith(
                    t.jsxAttribute(t.jsxIdentifier(cameled), path.node.value)
                  );
                }
              }
            },
            path.scope,
            path
          );
        }
      });

      return ast;
    }
  });

  if (halted) {
    return null;
  }

  output = `
/* eslint no-unused-vars: 0 */
/* This file is auto-generated, do not touch! Please edit the SVG file instead. */
import React from 'react';
import { css } from 'glamor';

function ${name}({ width, height, style, color = "black", ...props }) {
return ${output}
}

export default ${name}
`;

  return prettier.format(output, { parser: 'babel' });
}

function title(str) {
  return str[0].toUpperCase() + str.slice(1);
}

async function run() {
  const files = await fastglob(['*.svg']);

  for (let file of files) {
    let contents = fs.readFileSync(`./${file}`, 'utf8');
    // Strip off the extension
    let filepath = file.replace(/\.[^.]+$/, '');
    let name = camelcase(basename(filepath));

    const webOutput = transformContents(title(name), contents);
    fs.writeFileSync(`./${filepath}.web.js`, webOutput, 'utf8');
  }
}

run();
