{"version":3,"file":"wide.0faEkZXm.chunk.js","sources":["../../../src/icons/v0/LeftArrow2.tsx","../../../src/icons/v1/ArrowDown.tsx","../../../src/icons/v1/ArrowUp.tsx","../../../src/icons/v2/ArrowButtonRight1.tsx","../../../src/icons/v2/ArrowsExpand3.tsx","../../../src/icons/v2/ArrowsShrink3.tsx","../../../src/icons/v2/DownloadThickBottom.tsx","../../../src/icons/v2/Hyperlink2.tsx","../../../src/icons/v2/InformationCircle.tsx","../../../src/components/budget/MonthPicker.tsx","../../../src/components/budget/BudgetPageHeader.tsx","../../../src/components/budget/RenderMonths.tsx","../../../src/components/budget/SidebarCategory.tsx","../../../src/components/budget/ExpenseCategory.tsx","../../../src/components/budget/SidebarGroup.tsx","../../../src/components/budget/ExpenseGroup.tsx","../../../src/components/budget/IncomeCategory.tsx","../../../src/components/budget/IncomeGroup.tsx","../../../src/components/budget/IncomeHeader.tsx","../../../src/components/budget/BudgetCategories.jsx","../../../src/components/budget/BudgetSummaries.tsx","../../../src/components/budget/BudgetTotals.tsx","../../../src/components/budget/BudgetTable.jsx","../../../src/components/budget/DynamicBudgetTable.tsx","../../../src/components/budget/index.tsx","../../../src/components/common/InfoBubble.tsx","../../../src/components/settings/Upcoming.tsx","../../../src/components/schedules/index.tsx","../../../src/components/gocardless/GoCardlessLink.tsx","../../../../loot-core/src/client/transfer.ts","../../../src/hooks/useSplitsExpanded.jsx","../../../src/components/transactions/TransactionMenu.tsx","../../../src/components/transactions/TransactionsTable.jsx","../../../src/components/transactions/TransactionList.jsx","../../../src/components/filters/FilterMenu.tsx","../../../src/components/filters/NameFilter.tsx","../../../src/components/filters/SavedFilterMenuButton.tsx","../../../src/components/filters/FiltersStack.tsx","../../../src/components/transactions/SelectedTransactionsButton.tsx","../../../src/components/accounts/Balance.jsx","../../../src/components/accounts/Reconcile.tsx","../../../src/components/accounts/Header.tsx","../../../src/components/accounts/Account.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgLeftArrow2 = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 91 51\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M30.256 48.614a3.14 3.14 0 0 0-.989-2.153L10.803 29.063h76.915a3.2 3.2 0 0 0 .315 0c1.584-.084 2.95-1.64 2.867-3.266-.082-1.625-1.598-3.028-3.182-2.943H10.803L29.267 5.49c1.284-1.099 1.456-3.057.385-4.373a2.972 2.972 0 0 0-4.48-.187L.971 23.695a3.163 3.163 0 0 0 0 4.56l24.2 22.766a2.98 2.98 0 0 0 2.205.84c1.669-.08 2.958-1.534 2.88-3.247Z\"\n    />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgArrowDown = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      d=\"m9 16.172-6.071-6.071-1.414 1.414L10 20l.707-.707 7.778-7.778-1.414-1.414L11 16.172V0H9z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgArrowUp = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      d=\"M9 3.828 2.929 9.899 1.515 8.485 10 0l.707.707 7.778 7.778-1.414 1.414L11 3.828V20H9V3.828z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgArrowButtonRight1 = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      d=\"M13.584 12a2.643 2.643 0 0 1-.775 1.875l-9.541 9.541a1.768 1.768 0 0 1-2.5-2.5l8.739-8.739a.25.25 0 0 0 0-.354L.768 3.084a1.768 1.768 0 0 1 2.5-2.5l9.541 9.541A2.643 2.643 0 0 1 13.584 12Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"M23.75 12a2.643 2.643 0 0 1-.775 1.875l-9.541 9.541a1.768 1.768 0 0 1-2.5-2.5l8.739-8.739a.25.25 0 0 0 0-.354l-8.739-8.739a1.768 1.768 0 0 1 2.5-2.5l9.541 9.541A2.643 2.643 0 0 1 23.75 12Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgArrowsExpand3 = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M19.611 2.571h-3.754a1.286 1.286 0 1 1 0-2.571h6.857A1.286 1.286 0 0 1 24 1.286v6.857a1.286 1.286 0 0 1-2.571 0V4.39L15.48 10.34a1.286 1.286 0 0 1-1.817-1.817l5.948-5.95ZM1.286 14.571a1.286 1.286 0 0 1 1.285 1.286v3.754l5.949-5.946a1.286 1.286 0 0 1 1.817 1.817L4.39 21.429h3.753a1.285 1.285 0 1 1 0 2.571H1.286A1.286 1.286 0 0 1 0 22.714v-6.857a1.286 1.286 0 0 1 1.286-1.286Z\"\n    />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgArrowsShrink3 = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M14.143 1.714A1.286 1.286 0 0 1 15.429 3v3.753L21.806.377a1.286 1.286 0 0 1 1.817 1.817l-6.376 6.377H21a1.286 1.286 0 1 1 0 2.572h-6.857a1.286 1.286 0 0 1-1.286-1.286V3a1.286 1.286 0 0 1 1.286-1.286ZM9.857 22.286A1.285 1.285 0 0 1 8.571 21v-3.753l-6.377 6.376a1.286 1.286 0 0 1-1.817-1.817l6.376-6.377H3a1.286 1.286 0 0 1 0-2.572h6.857a1.286 1.286 0 0 1 1.286 1.286V21a1.286 1.286 0 0 1-1.286 1.286Z\"\n    />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgDownloadThickBottom = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      d=\"M8.616 1.741A1.455 1.455 0 0 1 10.07.287h3.392a1.455 1.455 0 0 1 1.453 1.454v8.228a.25.25 0 0 0 .25.25h2.9a1.138 1.138 0 0 1 .827 2l-6.1 6.1a1.489 1.489 0 0 1-2.056 0l-6.1-6.1a1.137 1.137 0 0 1 .827-2h2.9a.249.249 0 0 0 .25-.25Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"M0 19.677a4.039 4.039 0 0 0 4.035 4.035h15.93A4.039 4.039 0 0 0 24 19.677V17.8a1.225 1.225 0 0 0-2.449 0v1.874a1.588 1.588 0 0 1-1.586 1.586H4.035a1.588 1.588 0 0 1-1.586-1.586V17.8A1.225 1.225 0 0 0 0 17.8Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgHyperlink2 = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      d=\"M12.406 14.905a1 1 0 0 0-.543 1.307 1 1 0 0 1-.217 1.09l-2.828 2.829a2 2 0 0 1-2.828 0L3.868 18.01a2 2 0 0 1 0-2.829L6.7 12.353a1.013 1.013 0 0 1 1.091-.217 1 1 0 0 0 .763-1.849 3.034 3.034 0 0 0-3.268.652l-2.832 2.828a4.006 4.006 0 0 0 0 5.657l2.122 2.121a4 4 0 0 0 5.656 0l2.829-2.828a3.008 3.008 0 0 0 .651-3.27 1 1 0 0 0-1.306-.542Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"M7.757 16.241a1.011 1.011 0 0 0 1.414 0l7.779-7.778a1 1 0 0 0-1.414-1.414l-7.779 7.778a1 1 0 0 0 0 1.414Z\"\n      fill=\"currentColor\"\n    />\n    <path\n      d=\"m21.546 4.574-2.121-2.121a4.006 4.006 0 0 0-5.657 0l-2.829 2.828a3.006 3.006 0 0 0-.651 3.269 1 1 0 1 0 1.849-.764 1 1 0 0 1 .217-1.086l2.828-2.828a2 2 0 0 1 2.829 0l2.121 2.121a2 2 0 0 1 0 2.829L17.3 11.645a1.015 1.015 0 0 1-1.091.217 1 1 0 0 0-.765 1.849 3.026 3.026 0 0 0 3.27-.651l2.828-2.828a4.007 4.007 0 0 0 .004-5.658Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgInformationCircle = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      d=\"M12 0a12 12 0 1 0 12 12A12.013 12.013 0 0 0 12 0Zm.25 5a1.5 1.5 0 1 1-1.5 1.5 1.5 1.5 0 0 1 1.5-1.5Zm2.25 13.5h-4a1 1 0 0 1 0-2h.75a.25.25 0 0 0 .25-.25v-4.5a.25.25 0 0 0-.25-.25h-.75a1 1 0 0 1 0-2h1a2 2 0 0 1 2 2v4.75a.25.25 0 0 0 .25.25h.75a1 1 0 1 1 0 2Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","// @ts-strict-ignore\nimport { type CSSProperties, useState } from 'react';\n\nimport * as monthUtils from 'loot-core/src/shared/months';\n\nimport { useResizeObserver } from '../../hooks/useResizeObserver';\nimport { styles, theme } from '../../style';\nimport { View } from '../common/View';\n\nimport { type BoundsProps } from './MonthsContext';\n\ntype MonthPickerProps = {\n  startMonth: string;\n  numDisplayed: number;\n  monthBounds: BoundsProps;\n  style: CSSProperties;\n  onSelect: (month: string) => void;\n};\n\nexport const MonthPicker = ({\n  startMonth,\n  numDisplayed,\n  monthBounds,\n  style,\n  onSelect,\n}: MonthPickerProps) => {\n  const [hoverId, setHoverId] = useState(null);\n  const [targetMonthCount, setTargetMonthCount] = useState(12);\n\n  const currentMonth = monthUtils.currentMonth();\n  const firstSelectedMonth = startMonth;\n\n  const lastSelectedMonth = monthUtils.addMonths(\n    firstSelectedMonth,\n    numDisplayed - 1,\n  );\n\n  const range = monthUtils.rangeInclusive(\n    monthUtils.subMonths(\n      firstSelectedMonth,\n      targetMonthCount / 2 - numDisplayed / 2,\n    ),\n    monthUtils.addMonths(\n      lastSelectedMonth,\n      targetMonthCount / 2 - numDisplayed / 2,\n    ),\n  );\n\n  const firstSelectedIndex =\n    Math.floor(range.length / 2) - Math.floor(numDisplayed / 2);\n  const lastSelectedIndex = firstSelectedIndex + numDisplayed - 1;\n\n  const [size, setSize] = useState('small');\n  const containerRef = useResizeObserver(rect => {\n    setSize(rect.width <= 400 ? 'small' : 'big');\n    setTargetMonthCount(\n      Math.min(Math.max(Math.floor(rect.width / 50), 12), 24),\n    );\n  });\n\n  const yearHeadersShown = [];\n\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        ...style,\n      }}\n    >\n      <View\n        innerRef={containerRef}\n        style={{\n          flexDirection: 'row',\n          flex: 1,\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        {range.map((month, idx) => {\n          const monthName = monthUtils.format(month, 'MMM');\n          const selected =\n            idx >= firstSelectedIndex && idx <= lastSelectedIndex;\n\n          const lastHoverId = hoverId + numDisplayed - 1;\n          const hovered =\n            hoverId === null ? false : idx >= hoverId && idx <= lastHoverId;\n\n          const current = currentMonth === month;\n          const year = monthUtils.getYear(month);\n\n          let showYearHeader = false;\n\n          if (!yearHeadersShown.includes(year)) {\n            yearHeadersShown.push(year);\n            showYearHeader = true;\n          }\n\n          const isMonthBudgeted =\n            month >= monthBounds.start && month <= monthBounds.end;\n\n          return (\n            <View\n              key={month}\n              style={{\n                padding: '3px 3px',\n                width: size === 'big' ? '35px' : '20px',\n                textAlign: 'center',\n                userSelect: 'none',\n                cursor: 'default',\n                borderRadius: 2,\n                border: 'none',\n                ...(!isMonthBudgeted && {\n                  textDecoration: 'line-through',\n                  color: theme.pageTextSubdued,\n                }),\n                ...styles.smallText,\n                ...(selected && {\n                  backgroundColor: theme.tableBorderHover,\n                  color: theme.buttonPrimaryText,\n                }),\n                ...((hovered || selected) && {\n                  borderRadius: 0,\n                  cursor: 'pointer',\n                }),\n                ...(hoverId !== null &&\n                  !hovered &&\n                  selected && {\n                    filter: 'brightness(65%)',\n                  }),\n                ...(hovered &&\n                  !selected && {\n                    backgroundColor: theme.buttonBareBackgroundHover,\n                  }),\n                ...(!hovered &&\n                  !selected &&\n                  current && {\n                    backgroundColor: theme.buttonBareBackgroundHover,\n                    filter: 'brightness(120%)',\n                  }),\n                ...(hovered &&\n                  selected &&\n                  current && {\n                    filter: 'brightness(120%)',\n                  }),\n                ...(hovered &&\n                  selected && {\n                    backgroundColor: theme.tableBorderHover,\n                  }),\n                ...((idx === firstSelectedIndex ||\n                  (idx === hoverId && !selected)) && {\n                  borderTopLeftRadius: 2,\n                  borderBottomLeftRadius: 2,\n                }),\n                ...((idx === lastSelectedIndex ||\n                  (idx === lastHoverId && !selected)) && {\n                  borderTopRightRadius: 2,\n                  borderBottomRightRadius: 2,\n                }),\n                ...(current && { fontWeight: 'bold' }),\n              }}\n              onClick={() => onSelect(month)}\n              onMouseEnter={() => setHoverId(idx)}\n              onMouseLeave={() => setHoverId(null)}\n            >\n              {size === 'small' ? monthName[0] : monthName}\n              {showYearHeader && (\n                <View\n                  style={{\n                    position: 'absolute',\n                    top: -14,\n                    left: 0,\n                    fontSize: 10,\n                    fontWeight: 'bold',\n                    color: isMonthBudgeted\n                      ? theme.pageText\n                      : theme.pageTextSubdued,\n                  }}\n                >\n                  {year}\n                </View>\n              )}\n            </View>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n","// @ts-strict-ignore\nimport React, { type ComponentProps, memo } from 'react';\n\nimport { View } from '../common/View';\n\nimport { MonthPicker } from './MonthPicker';\nimport { getScrollbarWidth } from './util';\n\ntype BudgetPageHeaderProps = {\n  startMonth: string;\n  onMonthSelect: (month: string) => void;\n  numMonths: number;\n  monthBounds: ComponentProps<typeof MonthPicker>['monthBounds'];\n};\n\nexport const BudgetPageHeader = memo<BudgetPageHeaderProps>(\n  ({ startMonth, onMonthSelect, numMonths, monthBounds }) => {\n    return (\n      <View style={{ marginLeft: 200 + 5, flexShrink: 0 }}>\n        <View style={{ marginRight: 5 + getScrollbarWidth() }}>\n          <MonthPicker\n            startMonth={startMonth}\n            numDisplayed={numMonths}\n            monthBounds={monthBounds}\n            style={{ paddingTop: 5 }}\n            onSelect={month => onMonthSelect(month)}\n          />\n        </View>\n      </View>\n    );\n  },\n);\n\nBudgetPageHeader.displayName = 'BudgetPageHeader';\n","// @ts-strict-ignore\nimport React, {\n  useContext,\n  type CSSProperties,\n  type ComponentType,\n} from 'react';\n\nimport * as monthUtils from 'loot-core/src/shared/months';\n\nimport { theme } from '../../style';\nimport { View } from '../common/View';\nimport { NamespaceContext } from '../spreadsheet/NamespaceContext';\n\nimport { MonthsContext } from './MonthsContext';\n\ntype RenderMonthsProps = {\n  component?: ComponentType<{ month: string; editing: boolean }>;\n  editingMonth?: string;\n  args?: object;\n  style?: CSSProperties;\n};\n\nexport function RenderMonths({\n  component: Component,\n  editingMonth,\n  args,\n  style,\n}: RenderMonthsProps) {\n  const { months } = useContext(MonthsContext);\n\n  return months.map((month, index) => {\n    const editing = editingMonth === month;\n\n    return (\n      <NamespaceContext.Provider\n        key={index}\n        value={monthUtils.sheetForMonth(month)}\n      >\n        <View\n          style={{\n            flex: 1,\n            borderLeft: '1px solid ' + theme.tableBorder,\n            ...style,\n          }}\n        >\n          <Component month={month} editing={editing} {...args} />\n        </View>\n      </NamespaceContext.Provider>\n    );\n  }) as unknown as JSX.Element;\n}\n","// @ts-strict-ignore\nimport React, { type CSSProperties, type Ref, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  type CategoryGroupEntity,\n  type CategoryEntity,\n} from 'loot-core/src/types/models';\n\nimport { useFeatureFlag } from '../../hooks/useFeatureFlag';\nimport { SvgCheveronDown } from '../../icons/v1';\nimport { theme } from '../../style';\nimport { Button } from '../common/Button2';\nimport { Menu } from '../common/Menu';\nimport { Popover } from '../common/Popover';\nimport { View } from '../common/View';\nimport { NotesButton } from '../NotesButton';\nimport { InputCell } from '../table';\n\ntype SidebarCategoryProps = {\n  innerRef: Ref<HTMLDivElement>;\n  category: CategoryEntity;\n  categoryGroup?: CategoryGroupEntity;\n  dragPreview?: boolean;\n  dragging?: boolean;\n  editing: boolean;\n  style?: CSSProperties;\n  borderColor?: string;\n  isLast?: boolean;\n  onEditName: (id: string) => void;\n  onSave: (category: CategoryEntity) => void;\n  onDelete: (id: string) => Promise<void>;\n  onHideNewCategory?: () => void;\n};\n\nexport function SidebarCategory({\n  innerRef,\n  category,\n  categoryGroup,\n  dragPreview,\n  dragging,\n  editing,\n  style,\n  isLast,\n  onEditName,\n  onSave,\n  onDelete,\n  onHideNewCategory,\n}: SidebarCategoryProps) {\n  const { t } = useTranslation();\n\n  const temporary = category.id === 'new';\n  const [menuOpen, setMenuOpen] = useState(false);\n  const triggerRef = useRef(null);\n  const contextMenusEnabled = useFeatureFlag('contextMenus');\n\n  const displayed = (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        userSelect: 'none',\n        WebkitUserSelect: 'none',\n        opacity: category.hidden || categoryGroup?.hidden ? 0.33 : undefined,\n        backgroundColor: 'transparent',\n        height: 20,\n      }}\n      ref={triggerRef}\n      onContextMenu={e => {\n        if (!contextMenusEnabled) return;\n        e.preventDefault();\n        setMenuOpen(true);\n      }}\n    >\n      <div\n        data-testid=\"category-name\"\n        style={{\n          textOverflow: 'ellipsis',\n          whiteSpace: 'nowrap',\n          overflow: 'hidden',\n          minWidth: 0,\n        }}\n      >\n        {category.name}\n      </div>\n      <View style={{ flexShrink: 0, marginLeft: 5 }}>\n        <Button\n          variant=\"bare\"\n          className=\"hover-visible\"\n          style={{ color: 'currentColor', padding: 3 }}\n          onPress={() => setMenuOpen(true)}\n        >\n          <SvgCheveronDown\n            width={14}\n            height={14}\n            style={{ color: 'currentColor' }}\n          />\n        </Button>\n\n        <Popover\n          triggerRef={triggerRef}\n          placement=\"bottom start\"\n          isOpen={menuOpen}\n          onOpenChange={() => setMenuOpen(false)}\n          style={{ width: 200 }}\n          isNonModal\n        >\n          <Menu\n            onMenuSelect={type => {\n              if (type === 'rename') {\n                onEditName(category.id);\n              } else if (type === 'delete') {\n                onDelete(category.id);\n              } else if (type === 'toggle-visibility') {\n                onSave({ ...category, hidden: !category.hidden });\n              }\n              setMenuOpen(false);\n            }}\n            items={[\n              { name: 'rename', text: 'Rename' },\n              !categoryGroup?.hidden && {\n                name: 'toggle-visibility',\n                text: category.hidden ? 'Show' : 'Hide',\n              },\n              { name: 'delete', text: 'Delete' },\n            ]}\n          />\n        </Popover>\n      </View>\n      <View style={{ flex: 1 }} />\n      <View style={{ flexShrink: 0 }}>\n        <NotesButton\n          id={category.id}\n          style={dragging && { color: 'currentColor' }}\n          defaultColor={theme.pageTextLight}\n        />\n      </View>\n    </View>\n  );\n\n  return (\n    <View\n      innerRef={innerRef}\n      style={{\n        width: 200,\n        overflow: 'hidden',\n        '& .hover-visible': {\n          display: 'none',\n        },\n        ...(!dragging &&\n          !dragPreview && {\n            '&:hover .hover-visible': {\n              display: 'flex',\n            },\n          }),\n        ...(dragging && { color: theme.formInputTextPlaceholderSelected }),\n        // The zIndex here forces the the view on top of a row below\n        // it that may be \"collapsed\" and show a border on top\n        ...(dragPreview && {\n          backgroundColor: theme.tableBackground,\n          zIndex: 10000,\n          borderRadius: 6,\n          overflow: 'hidden',\n        }),\n        ...style,\n      }}\n      onKeyDown={e => {\n        if (e.key === 'Enter') {\n          onEditName(null);\n          e.stopPropagation();\n        }\n      }}\n    >\n      <InputCell\n        value={category.name}\n        formatter={() => displayed}\n        width=\"flex\"\n        exposed={editing || temporary}\n        onUpdate={value => {\n          if (temporary) {\n            if (value === '') {\n              onHideNewCategory();\n            } else if (value !== '') {\n              onSave({ ...category, name: value });\n            }\n          } else {\n            if (value !== category.name) {\n              onSave({ ...category, name: value });\n            }\n          }\n        }}\n        onBlur={() => onEditName(null)}\n        style={{ paddingLeft: 13, ...(isLast && { borderBottomWidth: 0 }) }}\n        inputProps={{\n          placeholder: temporary ? t('New Category Name') : '',\n        }}\n      />\n    </View>\n  );\n}\n","// @ts-strict-ignore\nimport React, { type ComponentProps } from 'react';\n\nimport {\n  type CategoryGroupEntity,\n  type CategoryEntity,\n} from 'loot-core/src/types/models';\n\nimport { theme } from '../../style';\nimport { View } from '../common/View';\nimport {\n  useDraggable,\n  useDroppable,\n  DropHighlight,\n  type DragState,\n  type OnDragChangeCallback,\n  type OnDropCallback,\n} from '../sort';\nimport { Row } from '../table';\n\nimport { RenderMonths } from './RenderMonths';\nimport { SidebarCategory } from './SidebarCategory';\n\ntype ExpenseCategoryProps = {\n  cat: CategoryEntity;\n  categoryGroup?: CategoryGroupEntity;\n  editingCell: { id: string; cell: string } | null;\n  dragState: DragState<CategoryEntity>;\n  MonthComponent: ComponentProps<typeof RenderMonths>['component'];\n  onEditName?: ComponentProps<typeof SidebarCategory>['onEditName'];\n  onEditMonth?: (id: string, month: string) => void;\n  onSave?: ComponentProps<typeof SidebarCategory>['onSave'];\n  onDelete?: ComponentProps<typeof SidebarCategory>['onDelete'];\n  onDragChange: OnDragChangeCallback<CategoryEntity>;\n  onBudgetAction: (month: number, action: string, arg: unknown) => void;\n  onShowActivity: (id: string, month: string) => void;\n  onReorder: OnDropCallback;\n};\n\nexport function ExpenseCategory({\n  cat,\n  categoryGroup,\n  editingCell,\n  dragState,\n  MonthComponent,\n  onEditName,\n  onEditMonth,\n  onSave,\n  onDelete,\n  onBudgetAction,\n  onShowActivity,\n  onDragChange,\n  onReorder,\n}: ExpenseCategoryProps) {\n  let dragging = dragState && dragState.item === cat;\n\n  if (dragState && dragState.item.id === cat.cat_group) {\n    dragging = true;\n  }\n\n  const { dragRef } = useDraggable({\n    type: 'category',\n    onDragChange,\n    item: cat,\n    canDrag: editingCell === null,\n  });\n\n  const { dropRef, dropPos } = useDroppable({\n    types: 'category',\n    id: cat.id,\n    onDrop: onReorder,\n  });\n\n  return (\n    <Row\n      innerRef={dropRef}\n      collapsed={true}\n      style={{\n        backgroundColor: theme.tableBackground,\n        opacity: cat.hidden || categoryGroup?.hidden ? 0.5 : undefined,\n      }}\n    >\n      <DropHighlight pos={dropPos} offset={{ top: 1 }} />\n\n      <View style={{ flex: 1, flexDirection: 'row' }}>\n        <SidebarCategory\n          innerRef={dragRef}\n          category={cat}\n          categoryGroup={categoryGroup}\n          dragPreview={dragging && dragState.preview}\n          dragging={dragging && !dragState.preview}\n          editing={\n            editingCell &&\n            editingCell.cell === 'name' &&\n            editingCell.id === cat.id\n          }\n          onEditName={onEditName}\n          onSave={onSave}\n          onDelete={onDelete}\n        />\n\n        <RenderMonths\n          component={MonthComponent}\n          editingMonth={\n            editingCell && editingCell.id === cat.id && editingCell.cell\n          }\n          args={{\n            category: cat,\n            onEdit: onEditMonth,\n            onBudgetAction,\n            onShowActivity,\n          }}\n        />\n      </View>\n    </Row>\n  );\n}\n","// @ts-strict-ignore\nimport React, { type CSSProperties, useRef, useState } from 'react';\nimport { type ConnectDragSource } from 'react-dnd';\nimport { useTranslation } from 'react-i18next';\n\nimport { useFeatureFlag } from '../../hooks/useFeatureFlag';\nimport { SvgExpandArrow } from '../../icons/v0';\nimport { SvgCheveronDown } from '../../icons/v1';\nimport { theme } from '../../style';\nimport { Button } from '../common/Button2';\nimport { Menu } from '../common/Menu';\nimport { Popover } from '../common/Popover';\nimport { Text } from '../common/Text';\nimport { View } from '../common/View';\nimport { NotesButton } from '../NotesButton';\nimport { InputCell } from '../table';\n\ntype SidebarGroupProps = {\n  group: {\n    id: string;\n    hidden: number;\n    categories: object[];\n    is_income: number;\n    name: string;\n    sort_order: number;\n    tombstone: number;\n  };\n  editing?: boolean;\n  collapsed: boolean;\n  dragPreview?: boolean;\n  innerRef?: ConnectDragSource;\n  style?: CSSProperties;\n  onEdit?: (id: string) => void;\n  onSave?: (group: object) => Promise<void>;\n  onDelete?: (id: string) => Promise<void>;\n  onApplyBudgetTemplatesInGroup?: (categories: object[]) => void;\n  onShowNewCategory?: (groupId: string) => void;\n  onHideNewGroup?: () => void;\n  onToggleCollapse?: (id: string) => void;\n};\n\nexport function SidebarGroup({\n  group,\n  editing,\n  collapsed,\n  dragPreview,\n  innerRef,\n  style,\n  onEdit,\n  onSave,\n  onDelete,\n  onApplyBudgetTemplatesInGroup,\n  onShowNewCategory,\n  onHideNewGroup,\n  onToggleCollapse,\n}: SidebarGroupProps) {\n  const { t } = useTranslation();\n  const isGoalTemplatesEnabled = useFeatureFlag('goalTemplatesEnabled');\n\n  const temporary = group.id === 'new';\n  const [menuOpen, setMenuOpen] = useState(false);\n  const triggerRef = useRef(null);\n  const contextMenusEnabled = useFeatureFlag('contextMenus');\n\n  const displayed = (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        userSelect: 'none',\n        WebkitUserSelect: 'none',\n        height: 20,\n      }}\n      ref={triggerRef}\n      onClick={() => {\n        onToggleCollapse(group.id);\n      }}\n      onContextMenu={e => {\n        if (!contextMenusEnabled) return;\n        e.preventDefault();\n        setMenuOpen(true);\n      }}\n    >\n      {!dragPreview && (\n        <SvgExpandArrow\n          width={8}\n          height={8}\n          style={{\n            marginRight: 5,\n            marginLeft: 5,\n            flexShrink: 0,\n            transition: 'transform .1s',\n            transform: collapsed ? 'rotate(-90deg)' : '',\n          }}\n        />\n      )}\n      <div\n        style={{\n          textOverflow: 'ellipsis',\n          whiteSpace: 'nowrap',\n          overflow: 'hidden',\n          minWidth: 0,\n        }}\n      >\n        {dragPreview && <Text style={{ fontWeight: 500 }}>Group: </Text>}\n        {group.name}\n      </div>\n      {!dragPreview && (\n        <>\n          <View style={{ marginLeft: 5, flexShrink: 0 }}>\n            <Button\n              variant=\"bare\"\n              className=\"hover-visible\"\n              onPress={() => setMenuOpen(true)}\n              style={{ padding: 3 }}\n            >\n              <SvgCheveronDown width={14} height={14} />\n            </Button>\n\n            <Popover\n              triggerRef={triggerRef}\n              placement=\"bottom start\"\n              isOpen={menuOpen}\n              onOpenChange={() => setMenuOpen(false)}\n              style={{ width: 200 }}\n              isNonModal\n            >\n              <Menu\n                onMenuSelect={type => {\n                  if (type === 'rename') {\n                    onEdit(group.id);\n                  } else if (type === 'add-category') {\n                    onShowNewCategory(group.id);\n                  } else if (type === 'delete') {\n                    onDelete(group.id);\n                  } else if (type === 'toggle-visibility') {\n                    onSave({ ...group, hidden: !group.hidden });\n                  } else if (type === 'apply-multiple-category-template') {\n                    onApplyBudgetTemplatesInGroup?.(\n                      group.categories\n                        .filter(c => !c['hidden'])\n                        .map(c => c['id']),\n                    );\n                  }\n                  setMenuOpen(false);\n                }}\n                items={[\n                  { name: 'add-category', text: t('Add category') },\n                  { name: 'rename', text: t('Rename') },\n                  !group.is_income && {\n                    name: 'toggle-visibility',\n                    text: group.hidden ? t('Show') : t('Hide'),\n                  },\n                  onDelete && { name: 'delete', text: t('Delete') },\n                  ...(isGoalTemplatesEnabled\n                    ? [\n                        {\n                          name: 'apply-multiple-category-template',\n                          text: t('Apply budget templates'),\n                        },\n                      ]\n                    : []),\n                ]}\n              />\n            </Popover>\n          </View>\n          <View style={{ flex: 1 }} />\n          <View style={{ flexShrink: 0 }}>\n            <NotesButton\n              id={group.id}\n              style={dragPreview && { color: 'currentColor' }}\n              defaultColor={theme.pageTextLight}\n            />\n          </View>\n        </>\n      )}\n    </View>\n  );\n\n  return (\n    <View\n      innerRef={innerRef}\n      style={{\n        ...style,\n        width: 200,\n        backgroundColor: theme.tableRowHeaderBackground,\n        overflow: 'hidden',\n        '& .hover-visible': {\n          display: 'none',\n        },\n        ...(!dragPreview && {\n          '&:hover .hover-visible': {\n            display: 'flex',\n          },\n        }),\n        ...(dragPreview && {\n          paddingLeft: 10,\n          zIndex: 10000,\n          borderRadius: 6,\n          overflow: 'hidden',\n        }),\n      }}\n      onKeyDown={e => {\n        if (e.key === 'Enter') {\n          onEdit(null);\n          e.stopPropagation();\n        }\n      }}\n    >\n      <InputCell\n        value={group.name}\n        formatter={() => displayed}\n        width=\"flex\"\n        exposed={editing}\n        onUpdate={value => {\n          if (temporary) {\n            if (value === '') {\n              onHideNewGroup();\n            } else if (value !== '') {\n              onSave({ id: group.id, name: value });\n            }\n          } else {\n            onSave({ id: group.id, name: value });\n          }\n        }}\n        onBlur={() => onEdit(null)}\n        style={{ fontWeight: 600 }}\n        inputProps={{\n          style: { marginLeft: 20 },\n          placeholder: temporary ? t('New Group Name') : '',\n        }}\n      />\n    </View>\n  );\n}\n","// @ts-strict-ignore\nimport React, { type ComponentProps } from 'react';\n\nimport { theme } from '../../style';\nimport { View } from '../common/View';\nimport {\n  useDraggable,\n  useDroppable,\n  DropHighlight,\n  type OnDragChangeCallback,\n  type OnDropCallback,\n  type DragState,\n} from '../sort';\nimport { Row, ROW_HEIGHT } from '../table';\n\nimport { RenderMonths } from './RenderMonths';\nimport { SidebarGroup } from './SidebarGroup';\n\ntype ExpenseGroupProps = {\n  group: ComponentProps<typeof SidebarGroup>['group'];\n  collapsed: boolean;\n  editingCell: { id: string; cell: string } | null;\n  dragState: DragState<ComponentProps<typeof SidebarGroup>['group']>;\n  MonthComponent: ComponentProps<typeof RenderMonths>['component'];\n  onEditName?: ComponentProps<typeof SidebarGroup>['onEdit'];\n  onSave?: ComponentProps<typeof SidebarGroup>['onSave'];\n  onDelete?: ComponentProps<typeof SidebarGroup>['onDelete'];\n  onApplyBudgetTemplatesInGroup?: ComponentProps<\n    typeof SidebarGroup\n  >['onApplyBudgetTemplatesInGroup'];\n  onDragChange: OnDragChangeCallback<\n    ComponentProps<typeof SidebarGroup>['group']\n  >;\n  onReorderGroup: OnDropCallback;\n  onReorderCategory: OnDropCallback;\n  onToggleCollapse?: ComponentProps<typeof SidebarGroup>['onToggleCollapse'];\n  onShowNewCategory?: ComponentProps<typeof SidebarGroup>['onShowNewCategory'];\n};\n\nexport function ExpenseGroup({\n  group,\n  collapsed,\n  editingCell,\n  dragState,\n  MonthComponent,\n  onEditName,\n  onSave,\n  onDelete,\n  onApplyBudgetTemplatesInGroup,\n  onDragChange,\n  onReorderGroup,\n  onReorderCategory,\n  onToggleCollapse,\n  onShowNewCategory,\n}: ExpenseGroupProps) {\n  const dragging = dragState && dragState.item === group;\n\n  const { dragRef } = useDraggable({\n    type: 'group',\n    onDragChange,\n    item: group,\n    canDrag: editingCell === null,\n  });\n\n  const { dropRef, dropPos } = useDroppable({\n    types: 'group',\n    id: group.id,\n    onDrop: onReorderGroup,\n  });\n\n  const { dropRef: catDropRef, dropPos: catDropPos } = useDroppable({\n    types: 'category',\n    id: group.id,\n    onDrop: onReorderCategory,\n    onLongHover: () => {\n      if (collapsed) {\n        onToggleCollapse(group.id);\n      }\n    },\n  });\n\n  return (\n    <Row\n      collapsed={true}\n      style={{\n        fontWeight: 600,\n        opacity: group.hidden ? 0.33 : undefined,\n        backgroundColor: theme.tableRowHeaderBackground,\n      }}\n    >\n      {dragState && !dragState.preview && dragState.type === 'group' && (\n        <View\n          innerRef={dropRef}\n          style={{\n            position: 'absolute',\n            left: 0,\n            right: 0,\n            height: collapsed\n              ? ROW_HEIGHT - 1\n              : (1 + group.categories.length) * (ROW_HEIGHT - 1) + 1,\n            zIndex: 10000,\n          }}\n        >\n          <DropHighlight pos={dropPos} offset={{ top: 1 }} />\n        </View>\n      )}\n\n      <DropHighlight pos={catDropPos} offset={{ top: 1 }} />\n\n      <View\n        innerRef={catDropRef}\n        style={{\n          flex: 1,\n          flexDirection: 'row',\n          opacity: dragging && !dragState.preview ? 0.3 : 1,\n        }}\n      >\n        <SidebarGroup\n          innerRef={dragRef}\n          group={group}\n          editing={\n            editingCell &&\n            editingCell.cell === 'name' &&\n            editingCell.id === group.id\n          }\n          dragPreview={dragging && dragState.preview}\n          collapsed={collapsed}\n          onToggleCollapse={onToggleCollapse}\n          onEdit={onEditName}\n          onSave={onSave}\n          onDelete={onDelete}\n          onApplyBudgetTemplatesInGroup={onApplyBudgetTemplatesInGroup}\n          onShowNewCategory={onShowNewCategory}\n        />\n        <RenderMonths component={MonthComponent} args={{ group }} />\n      </View>\n    </Row>\n  );\n}\n","// @ts-strict-ignore\nimport React, { type ComponentProps } from 'react';\n\nimport { type CategoryEntity } from 'loot-core/src/types/models';\n\nimport {\n  useDraggable,\n  useDroppable,\n  DropHighlight,\n  type OnDragChangeCallback,\n  type OnDropCallback,\n} from '../sort';\nimport { Row } from '../table';\n\nimport { RenderMonths } from './RenderMonths';\nimport { SidebarCategory } from './SidebarCategory';\n\ntype IncomeCategoryProps = {\n  cat: CategoryEntity;\n  isLast?: boolean;\n  editingCell: { id: string; cell: string } | null;\n  MonthComponent: ComponentProps<typeof RenderMonths>['component'];\n  onEditName: ComponentProps<typeof SidebarCategory>['onEditName'];\n  onEditMonth?: (id: string, month: string) => void;\n  onSave: ComponentProps<typeof SidebarCategory>['onSave'];\n  onDelete: ComponentProps<typeof SidebarCategory>['onDelete'];\n  onDragChange: OnDragChangeCallback<CategoryEntity>;\n  onBudgetAction: (month: string, action: string, arg: unknown) => void;\n  onReorder: OnDropCallback;\n  onShowActivity: (id: string, month: string) => void;\n};\n\nexport function IncomeCategory({\n  cat,\n  isLast,\n  editingCell,\n  MonthComponent,\n  onEditName,\n  onEditMonth,\n  onSave,\n  onDelete,\n  onDragChange,\n  onBudgetAction,\n  onReorder,\n  onShowActivity,\n}: IncomeCategoryProps) {\n  const { dragRef } = useDraggable({\n    type: 'income-category',\n    onDragChange,\n    item: cat,\n    canDrag: editingCell === null,\n  });\n\n  const { dropRef, dropPos } = useDroppable({\n    types: 'income-category',\n    id: cat.id,\n    onDrop: onReorder,\n  });\n\n  return (\n    <Row\n      innerRef={dropRef}\n      collapsed={true}\n      style={{\n        opacity: cat.hidden ? 0.5 : undefined,\n      }}\n    >\n      <DropHighlight pos={dropPos} offset={{ top: 1 }} />\n\n      <SidebarCategory\n        innerRef={dragRef}\n        category={cat}\n        isLast={isLast}\n        editing={\n          editingCell &&\n          editingCell.cell === 'name' &&\n          editingCell.id === cat.id\n        }\n        onEditName={onEditName}\n        onSave={onSave}\n        onDelete={onDelete}\n      />\n      <RenderMonths\n        component={MonthComponent}\n        editingMonth={\n          editingCell && editingCell.id === cat.id && editingCell.cell\n        }\n        args={{\n          category: cat,\n          onEdit: onEditMonth,\n          isLast,\n          onShowActivity,\n          onBudgetAction,\n        }}\n      />\n    </Row>\n  );\n}\n","// @ts-strict-ignore\nimport React from 'react';\n\nimport { theme } from '../../style';\nimport { Row } from '../table';\n\nimport { RenderMonths } from './RenderMonths';\nimport { SidebarGroup } from './SidebarGroup';\n\ntype IncomeGroupProps = {\n  group: {\n    id: string;\n    hidden: number;\n    categories: object[];\n    is_income: number;\n    name: string;\n    sort_order: number;\n    tombstone: number;\n  };\n  editingCell: { id: string; cell: string } | null;\n  collapsed: boolean;\n  MonthComponent: () => JSX.Element;\n  onEditName: (id: string) => void;\n  onSave: (group: object) => Promise<void>;\n  onToggleCollapse: (id: string) => void;\n  onShowNewCategory: (groupId: string) => void;\n};\n\nexport function IncomeGroup({\n  group,\n  editingCell,\n  collapsed,\n  MonthComponent,\n  onEditName,\n  onSave,\n  onToggleCollapse,\n  onShowNewCategory,\n}: IncomeGroupProps) {\n  return (\n    <Row\n      collapsed={true}\n      style={{\n        fontWeight: 600,\n        backgroundColor: theme.tableRowHeaderBackground,\n      }}\n    >\n      <SidebarGroup\n        group={group}\n        collapsed={collapsed}\n        editing={\n          editingCell &&\n          editingCell.cell === 'name' &&\n          editingCell.id === group.id\n        }\n        onEdit={onEditName}\n        onSave={onSave}\n        onToggleCollapse={onToggleCollapse}\n        onShowNewCategory={onShowNewCategory}\n      />\n      <RenderMonths component={MonthComponent} args={{ group }} />\n    </Row>\n  );\n}\n","import React from 'react';\nimport { Trans } from 'react-i18next';\n\nimport { Button } from '../common/Button2';\nimport { View } from '../common/View';\n\nimport { RenderMonths } from './RenderMonths';\n\ntype IncomeHeaderProps = {\n  MonthComponent?: () => JSX.Element;\n  onShowNewGroup: () => void;\n};\n\nexport function IncomeHeader({\n  MonthComponent,\n  onShowNewGroup,\n}: IncomeHeaderProps) {\n  return (\n    <View style={{ flexDirection: 'row', flex: 1 }}>\n      <View\n        style={{\n          width: 200,\n          alignItems: 'flex-start',\n          justifyContent: 'flex-start',\n        }}\n      >\n        <Button onPress={onShowNewGroup} style={{ fontSize: 12, margin: 10 }}>\n          <Trans>Add Group</Trans>\n        </Button>\n      </View>\n      <RenderMonths\n        component={MonthComponent}\n        style={{ border: 0, justifyContent: 'flex-end' }}\n      />\n    </View>\n  );\n}\n","import React, { memo, useState, useMemo } from 'react';\r\n\r\nimport { useLocalPref } from '../../hooks/useLocalPref';\r\nimport { theme, styles } from '../../style';\r\nimport { View } from '../common/View';\r\nimport { DropHighlightPosContext } from '../sort';\r\nimport { Row } from '../table';\r\n\r\nimport { ExpenseCategory } from './ExpenseCategory';\r\nimport { ExpenseGroup } from './ExpenseGroup';\r\nimport { IncomeCategory } from './IncomeCategory';\r\nimport { IncomeGroup } from './IncomeGroup';\r\nimport { IncomeHeader } from './IncomeHeader';\r\nimport { SidebarCategory } from './SidebarCategory';\r\nimport { SidebarGroup } from './SidebarGroup';\r\nimport { separateGroups } from './util';\r\n\r\nexport const BudgetCategories = memo(\r\n  ({\r\n    categoryGroups,\r\n    editingCell,\r\n    dataComponents,\r\n    onBudgetAction,\r\n    onShowActivity,\r\n    onEditName,\r\n    onEditMonth,\r\n    onSaveCategory,\r\n    onSaveGroup,\r\n    onDeleteCategory,\r\n    onDeleteGroup,\r\n    onApplyBudgetTemplatesInGroup,\r\n    onReorderCategory,\r\n    onReorderGroup,\r\n  }) => {\r\n    const [collapsedGroupIds = [], setCollapsedGroupIdsPref] =\r\n      useLocalPref('budget.collapsed');\r\n    const [showHiddenCategories] = useLocalPref('budget.showHiddenCategories');\r\n    function onCollapse(value) {\r\n      setCollapsedGroupIdsPref(value);\r\n    }\r\n\r\n    const [isAddingGroup, setIsAddingGroup] = useState(false);\r\n    const [newCategoryForGroup, setNewCategoryForGroup] = useState(null);\r\n    const items = useMemo(() => {\r\n      const [expenseGroups, incomeGroup] = separateGroups(categoryGroups);\r\n\r\n      let items = Array.prototype.concat.apply(\r\n        [],\r\n        expenseGroups.map(group => {\r\n          if (group.hidden && !showHiddenCategories) {\r\n            return [];\r\n          }\r\n\r\n          const groupCategories = group.categories.filter(\r\n            cat => showHiddenCategories || !cat.hidden,\r\n          );\r\n\r\n          const items = [{ type: 'expense-group', value: { ...group } }];\r\n\r\n          if (newCategoryForGroup === group.id) {\r\n            items.push({ type: 'new-category' });\r\n          }\r\n\r\n          return [\r\n            ...items,\r\n            ...(collapsedGroupIds.includes(group.id)\r\n              ? []\r\n              : groupCategories\r\n            ).map(cat => ({\r\n              type: 'expense-category',\r\n              value: cat,\r\n              group,\r\n            })),\r\n          ];\r\n        }),\r\n      );\r\n\r\n      if (isAddingGroup) {\r\n        items.push({ type: 'new-group' });\r\n      }\r\n\r\n      if (incomeGroup) {\r\n        items = items.concat(\r\n          [\r\n            { type: 'income-separator' },\r\n            { type: 'income-group', value: incomeGroup },\r\n            newCategoryForGroup === incomeGroup.id && { type: 'new-category' },\r\n            ...(collapsedGroupIds.includes(incomeGroup.id)\r\n              ? []\r\n              : incomeGroup.categories.filter(\r\n                  cat => showHiddenCategories || !cat.hidden,\r\n                )\r\n            ).map(cat => ({\r\n              type: 'income-category',\r\n              value: cat,\r\n            })),\r\n          ].filter(x => x),\r\n        );\r\n      }\r\n\r\n      return items;\r\n    }, [\r\n      categoryGroups,\r\n      collapsedGroupIds,\r\n      newCategoryForGroup,\r\n      isAddingGroup,\r\n      showHiddenCategories,\r\n    ]);\r\n\r\n    const [dragState, setDragState] = useState(null);\r\n    const [savedCollapsed, setSavedCollapsed] = useState(null);\r\n\r\n    // TODO: If we turn this into a reducer, we could probably memoize\r\n    // each item in the list for better perf\r\n    function onDragChange(newDragState) {\r\n      const { state } = newDragState;\r\n\r\n      if (state === 'start-preview') {\r\n        setDragState({\r\n          type: newDragState.type,\r\n          item: newDragState.item,\r\n          preview: true,\r\n        });\r\n      } else if (state === 'start') {\r\n        if (dragState) {\r\n          setDragState({\r\n            ...dragState,\r\n            preview: false,\r\n          });\r\n          setSavedCollapsed(collapsedGroupIds);\r\n        }\r\n      } else if (state === 'hover') {\r\n        setDragState({\r\n          ...dragState,\r\n          hoveredId: newDragState.id,\r\n          hoveredPos: newDragState.pos,\r\n        });\r\n      } else if (state === 'end') {\r\n        setDragState(null);\r\n        onCollapse(savedCollapsed || []);\r\n      }\r\n    }\r\n\r\n    function onToggleCollapse(id) {\r\n      if (collapsedGroupIds.includes(id)) {\r\n        onCollapse(collapsedGroupIds.filter(id_ => id_ !== id));\r\n      } else {\r\n        onCollapse([...collapsedGroupIds, id]);\r\n      }\r\n    }\r\n\r\n    function onShowNewGroup() {\r\n      setIsAddingGroup(true);\r\n    }\r\n\r\n    function onHideNewGroup() {\r\n      setIsAddingGroup(false);\r\n    }\r\n\r\n    function _onSaveGroup(group) {\r\n      onSaveGroup?.(group);\r\n      if (group.id === 'new') {\r\n        onHideNewGroup();\r\n      }\r\n    }\r\n\r\n    function onShowNewCategory(groupId) {\r\n      onCollapse(collapsedGroupIds.filter(c => c !== groupId));\r\n      setNewCategoryForGroup(groupId);\r\n    }\r\n\r\n    function onHideNewCategory() {\r\n      setNewCategoryForGroup(null);\r\n    }\r\n\r\n    function _onSaveCategory(category) {\r\n      onSaveCategory?.(category);\r\n      if (category.id === 'new') {\r\n        onHideNewCategory();\r\n      }\r\n    }\r\n\r\n    return (\r\n      <View\r\n        style={{\r\n          marginBottom: 10,\r\n          backgroundColor: theme.tableBackground,\r\n          overflow: 'hidden',\r\n          boxShadow: styles.cardShadow,\r\n          borderRadius: '0 0 4px 4px',\r\n          flex: 1,\r\n        }}\r\n      >\r\n        {items.map((item, idx) => {\r\n          let content;\r\n          switch (item.type) {\r\n            case 'new-group':\r\n              content = (\r\n                <Row\r\n                  style={{ backgroundColor: theme.tableRowHeaderBackground }}\r\n                >\r\n                  <SidebarGroup\r\n                    group={{ id: 'new', name: '' }}\r\n                    editing={true}\r\n                    onSave={_onSaveGroup}\r\n                    onHideNewGroup={onHideNewGroup}\r\n                    onEdit={onEditName}\r\n                  />\r\n                </Row>\r\n              );\r\n              break;\r\n            case 'new-category':\r\n              content = (\r\n                <Row>\r\n                  <SidebarCategory\r\n                    category={{\r\n                      name: '',\r\n                      cat_group: newCategoryForGroup,\r\n                      is_income:\r\n                        newCategoryForGroup ===\r\n                        categoryGroups.find(g => g.is_income).id,\r\n                      id: 'new',\r\n                    }}\r\n                    editing={true}\r\n                    onSave={_onSaveCategory}\r\n                    onHideNewCategory={onHideNewCategory}\r\n                    onEditName={onEditName}\r\n                  />\r\n                </Row>\r\n              );\r\n              break;\r\n\r\n            case 'expense-group':\r\n              content = (\r\n                <ExpenseGroup\r\n                  group={item.value}\r\n                  editingCell={editingCell}\r\n                  collapsed={collapsedGroupIds.includes(item.value.id)}\r\n                  MonthComponent={dataComponents.ExpenseGroupComponent}\r\n                  dragState={dragState}\r\n                  onEditName={onEditName}\r\n                  onSave={_onSaveGroup}\r\n                  onDelete={onDeleteGroup}\r\n                  onDragChange={onDragChange}\r\n                  onReorderGroup={onReorderGroup}\r\n                  onReorderCategory={onReorderCategory}\r\n                  onToggleCollapse={onToggleCollapse}\r\n                  onShowNewCategory={onShowNewCategory}\r\n                  onApplyBudgetTemplatesInGroup={onApplyBudgetTemplatesInGroup}\r\n                />\r\n              );\r\n              break;\r\n            case 'expense-category':\r\n              content = (\r\n                <ExpenseCategory\r\n                  cat={item.value}\r\n                  categoryGroup={item.group}\r\n                  editingCell={editingCell}\r\n                  MonthComponent={dataComponents.ExpenseCategoryComponent}\r\n                  dragState={dragState}\r\n                  onEditName={onEditName}\r\n                  onEditMonth={onEditMonth}\r\n                  onSave={_onSaveCategory}\r\n                  onDelete={onDeleteCategory}\r\n                  onDragChange={onDragChange}\r\n                  onReorder={onReorderCategory}\r\n                  onBudgetAction={onBudgetAction}\r\n                  onShowActivity={onShowActivity}\r\n                />\r\n              );\r\n              break;\r\n            case 'income-separator':\r\n              content = (\r\n                <View\r\n                  style={{\r\n                    height: styles.incomeHeaderHeight,\r\n                    backgroundColor: theme.tableBackground,\r\n                  }}\r\n                >\r\n                  <IncomeHeader\r\n                    MonthComponent={dataComponents.IncomeHeaderComponent}\r\n                    onShowNewGroup={onShowNewGroup}\r\n                  />\r\n                </View>\r\n              );\r\n              break;\r\n            case 'income-group':\r\n              content = (\r\n                <IncomeGroup\r\n                  group={item.value}\r\n                  editingCell={editingCell}\r\n                  MonthComponent={dataComponents.IncomeGroupComponent}\r\n                  collapsed={collapsedGroupIds.includes(item.value.id)}\r\n                  onEditName={onEditName}\r\n                  onSave={_onSaveGroup}\r\n                  onToggleCollapse={onToggleCollapse}\r\n                  onShowNewCategory={onShowNewCategory}\r\n                />\r\n              );\r\n              break;\r\n            case 'income-category':\r\n              content = (\r\n                <IncomeCategory\r\n                  cat={item.value}\r\n                  editingCell={editingCell}\r\n                  isLast={idx === items.length - 1}\r\n                  MonthComponent={dataComponents.IncomeCategoryComponent}\r\n                  onEditName={onEditName}\r\n                  onEditMonth={onEditMonth}\r\n                  onSave={_onSaveCategory}\r\n                  onDelete={onDeleteCategory}\r\n                  onDragChange={onDragChange}\r\n                  onReorder={onReorderCategory}\r\n                  onBudgetAction={onBudgetAction}\r\n                  onShowActivity={onShowActivity}\r\n                />\r\n              );\r\n              break;\r\n            default:\r\n              throw new Error('Unknown item type: ' + item.type);\r\n          }\r\n\r\n          const pos =\r\n            idx === 0 ? 'first' : idx === items.length - 1 ? 'last' : null;\r\n\r\n          return (\r\n            <DropHighlightPosContext.Provider\r\n              key={\r\n                item.value\r\n                  ? item.value.id\r\n                  : item.type === 'income-separator'\r\n                    ? 'separator'\r\n                    : idx\r\n              }\r\n              value={pos}\r\n            >\r\n              <View\r\n                style={\r\n                  !dragState && {\r\n                    ':hover': { backgroundColor: theme.tableBackground },\r\n                  }\r\n                }\r\n              >\r\n                {content}\r\n              </View>\r\n            </DropHighlightPosContext.Provider>\r\n          );\r\n        })}\r\n      </View>\r\n    );\r\n  },\r\n);\r\n\r\nBudgetCategories.displayName = 'BudgetCategories';\r\n","import React, {\n  useContext,\n  useState,\n  useRef,\n  useCallback,\n  useLayoutEffect,\n} from 'react';\nimport { useSpring, animated } from 'react-spring';\n\nimport { css } from '@emotion/css';\n\nimport { addMonths, subMonths } from 'loot-core/src/shared/months';\n\nimport { useResizeObserver } from '../../hooks/useResizeObserver';\nimport { View } from '../common/View';\n\nimport { type BudgetSummary as EnvelopeBudgetSummary } from './envelope/budgetsummary/BudgetSummary';\nimport { MonthsContext } from './MonthsContext';\nimport { type BudgetSummary as TrackingBudgetSummary } from './tracking/budgetsummary/BudgetSummary';\n\ntype BudgetSummariesProps = {\n  SummaryComponent: typeof TrackingBudgetSummary | typeof EnvelopeBudgetSummary;\n};\n\nexport function BudgetSummaries({ SummaryComponent }: BudgetSummariesProps) {\n  const { months } = useContext(MonthsContext);\n\n  const [widthState, setWidthState] = useState(0);\n  const [styles, spring] = useSpring(() => ({\n    x: 0,\n    config: { mass: 3, tension: 600, friction: 80 },\n  }));\n\n  const containerRef = useResizeObserver(\n    useCallback(rect => {\n      setWidthState(rect.width);\n    }, []),\n  );\n\n  const prevMonth0 = useRef(months[0]);\n  const allMonths = [...months];\n  allMonths.unshift(subMonths(months[0], 1));\n  allMonths.push(addMonths(months[months.length - 1], 1));\n  const monthWidth = widthState / months.length;\n\n  useLayoutEffect(() => {\n    const prevMonth = prevMonth0.current;\n    const reversed = prevMonth > months[0];\n    const offsetX = monthWidth;\n    let from = reversed ? -offsetX * 2 : 0;\n\n    if (prevMonth !== allMonths[0] && prevMonth !== allMonths[2]) {\n      from = -offsetX;\n    }\n\n    const to = -offsetX;\n    spring.start({ from: { x: from }, x: to });\n  }, [months[0]]);\n\n  useLayoutEffect(() => {\n    prevMonth0.current = months[0];\n  }, [months[0]]);\n\n  useLayoutEffect(() => {\n    spring.start({ from: { x: -monthWidth }, to: { x: -monthWidth } });\n  }, [monthWidth]);\n\n  return (\n    <div\n      className={css([\n        { flex: 1, overflow: 'hidden' },\n        months.length === 1 && {\n          marginLeft: -4,\n          marginRight: -4,\n        },\n      ])}\n      ref={containerRef}\n    >\n      <animated.div\n        className=\"view\"\n        style={{\n          flexDirection: 'row',\n          width: widthState,\n          willChange: 'transform',\n          transform: styles.x.to(x => `translateX(${x}px)`),\n        }}\n      >\n        {allMonths.map(month => {\n          return (\n            <View\n              key={month}\n              style={{\n                flex: `0 0 ${monthWidth}px`,\n                paddingLeft: 4,\n                paddingRight: 4,\n              }}\n            >\n              <SummaryComponent month={month} />\n            </View>\n          );\n        })}\n      </animated.div>\n    </div>\n  );\n}\n","import React, { type ComponentProps, memo, useRef, useState } from 'react';\nimport { useTranslation, Trans } from 'react-i18next';\n\nimport { SvgDotsHorizontalTriple } from '../../icons/v1';\nimport { theme, styles } from '../../style';\nimport { Button } from '../common/Button2';\nimport { Menu } from '../common/Menu';\nimport { Popover } from '../common/Popover';\nimport { View } from '../common/View';\n\nimport { RenderMonths } from './RenderMonths';\nimport { getScrollbarWidth } from './util';\n\ntype BudgetTotalsProps = {\n  MonthComponent: ComponentProps<typeof RenderMonths>['component'];\n  toggleHiddenCategories: () => void;\n  expandAllCategories: () => void;\n  collapseAllCategories: () => void;\n};\n\nexport const BudgetTotals = memo(function BudgetTotals({\n  MonthComponent,\n  toggleHiddenCategories,\n  expandAllCategories,\n  collapseAllCategories,\n}: BudgetTotalsProps) {\n  const { t } = useTranslation();\n  const [menuOpen, setMenuOpen] = useState(false);\n  const triggerRef = useRef(null);\n\n  return (\n    <View\n      data-testid=\"budget-totals\"\n      style={{\n        backgroundColor: theme.tableBackground,\n        flexDirection: 'row',\n        flexShrink: 0,\n        boxShadow: styles.cardShadow,\n        marginLeft: 5,\n        marginRight: 5 + getScrollbarWidth(),\n        borderRadius: '4px 4px 0 0',\n        borderBottom: '1px solid ' + theme.tableBorder,\n      }}\n    >\n      <View\n        style={{\n          width: 200,\n          color: theme.pageTextLight,\n          justifyContent: 'center',\n          paddingLeft: 15,\n          paddingRight: 5,\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          userSelect: 'none',\n          WebkitUserSelect: 'none',\n        }}\n      >\n        <View style={{ flexGrow: '1' }}>\n          <Trans>Category</Trans>\n        </View>\n        <Button\n          ref={triggerRef}\n          variant=\"bare\"\n          aria-label={t('Menu')}\n          onPress={() => setMenuOpen(true)}\n          style={{ color: 'currentColor', padding: 3 }}\n        >\n          <SvgDotsHorizontalTriple\n            width={15}\n            height={15}\n            style={{ color: theme.pageTextLight }}\n          />\n        </Button>\n\n        <Popover\n          triggerRef={triggerRef}\n          isOpen={menuOpen}\n          onOpenChange={() => setMenuOpen(false)}\n          style={{ width: 200 }}\n        >\n          <Menu\n            onMenuSelect={type => {\n              if (type === 'toggle-visibility') {\n                toggleHiddenCategories();\n              } else if (type === 'expandAllCategories') {\n                expandAllCategories();\n              } else if (type === 'collapseAllCategories') {\n                collapseAllCategories();\n              }\n              setMenuOpen(false);\n            }}\n            items={[\n              {\n                name: 'toggle-visibility',\n                text: t('Toggle hidden categories'),\n              },\n              {\n                name: 'expandAllCategories',\n                text: t('Expand all'),\n              },\n              {\n                name: 'collapseAllCategories',\n                text: t('Collapse all'),\n              },\n            ]}\n          />\n        </Popover>\n      </View>\n      <RenderMonths component={MonthComponent} />\n    </View>\n  );\n});\n","import React, { useState } from 'react';\r\n\r\nimport { useCategories } from '../../hooks/useCategories';\r\nimport { useLocalPref } from '../../hooks/useLocalPref';\r\nimport { theme, styles } from '../../style';\r\nimport { View } from '../common/View';\r\n\r\nimport { BudgetCategories } from './BudgetCategories';\r\nimport { BudgetSummaries } from './BudgetSummaries';\r\nimport { BudgetTotals } from './BudgetTotals';\r\nimport { MonthsProvider } from './MonthsContext';\r\nimport {\r\n  findSortDown,\r\n  findSortUp,\r\n  getScrollbarWidth,\r\n  separateGroups,\r\n} from './util';\r\n\r\nexport function BudgetTable(props) {\r\n  const {\r\n    type,\r\n    prewarmStartMonth,\r\n    startMonth,\r\n    numMonths,\r\n    monthBounds,\r\n    dataComponents,\r\n    onSaveCategory,\r\n    onDeleteCategory,\r\n    onSaveGroup,\r\n    onDeleteGroup,\r\n    onApplyBudgetTemplatesInGroup,\r\n    onReorderCategory,\r\n    onReorderGroup,\r\n    onShowActivity,\r\n    onBudgetAction,\r\n  } = props;\r\n\r\n  const { grouped: categoryGroups } = useCategories();\r\n  const [collapsedGroupIds = [], setCollapsedGroupIdsPref] =\r\n    useLocalPref('budget.collapsed');\r\n  const [showHiddenCategories, setShowHiddenCategoriesPef] = useLocalPref(\r\n    'budget.showHiddenCategories',\r\n  );\r\n  const [editing, setEditing] = useState(null);\r\n\r\n  const onEditMonth = (id, month) => {\r\n    setEditing(id ? { id, cell: month } : null);\r\n  };\r\n\r\n  const onEditName = id => {\r\n    setEditing(id ? { id, cell: 'name' } : null);\r\n  };\r\n\r\n  const _onReorderCategory = (id, dropPos, targetId) => {\r\n    const isGroup = !!categoryGroups.find(g => g.id === targetId);\r\n\r\n    if (isGroup) {\r\n      const { targetId: groupId } = findSortUp(\r\n        categoryGroups,\r\n        dropPos,\r\n        targetId,\r\n      );\r\n      const group = categoryGroups.find(g => g.id === groupId);\r\n\r\n      if (group) {\r\n        const { categories } = group;\r\n        onReorderCategory({\r\n          id,\r\n          groupId: group.id,\r\n          targetId:\r\n            categories.length === 0 || dropPos === 'top'\r\n              ? null\r\n              : categories[0].id,\r\n        });\r\n      }\r\n    } else {\r\n      let targetGroup;\r\n\r\n      for (const group of categoryGroups) {\r\n        if (group.categories.find(cat => cat.id === targetId)) {\r\n          targetGroup = group;\r\n          break;\r\n        }\r\n      }\r\n\r\n      onReorderCategory({\r\n        id,\r\n        groupId: targetGroup.id,\r\n        ...findSortDown(targetGroup.categories, dropPos, targetId),\r\n      });\r\n    }\r\n  };\r\n\r\n  const _onReorderGroup = (id, dropPos, targetId) => {\r\n    const [expenseGroups] = separateGroups(categoryGroups); // exclude Income group from sortable groups to fix off-by-one error\r\n    onReorderGroup({\r\n      id,\r\n      ...findSortDown(expenseGroups, dropPos, targetId),\r\n    });\r\n  };\r\n\r\n  const moveVertically = dir => {\r\n    const flattened = categoryGroups.reduce((all, group) => {\r\n      if (collapsedGroupIds.includes(group.id)) {\r\n        return all.concat({ id: group.id, isGroup: true });\r\n      }\r\n      return all.concat([{ id: group.id, isGroup: true }, ...group.categories]);\r\n    }, []);\r\n\r\n    if (editing) {\r\n      const idx = flattened.findIndex(item => item.id === editing.id);\r\n      let nextIdx = idx + dir;\r\n\r\n      while (nextIdx >= 0 && nextIdx < flattened.length) {\r\n        const next = flattened[nextIdx];\r\n\r\n        if (next.isGroup) {\r\n          nextIdx += dir;\r\n          continue;\r\n        } else if (type === 'report' || !next.is_income) {\r\n          onEditMonth(next.id, editing.cell);\r\n          return;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const onKeyDown = e => {\r\n    if (!editing) {\r\n      return null;\r\n    }\r\n\r\n    if (e.key === 'Enter' || e.key === 'Tab') {\r\n      e.preventDefault();\r\n      moveVertically(e.shiftKey ? -1 : 1);\r\n    }\r\n  };\r\n\r\n  const onCollapse = collapsedIds => {\r\n    setCollapsedGroupIdsPref(collapsedIds);\r\n  };\r\n\r\n  const onToggleHiddenCategories = () => {\r\n    setShowHiddenCategoriesPef(!showHiddenCategories);\r\n  };\r\n\r\n  const toggleHiddenCategories = () => {\r\n    onToggleHiddenCategories();\r\n  };\r\n\r\n  const expandAllCategories = () => {\r\n    onCollapse([]);\r\n  };\r\n\r\n  const collapseAllCategories = () => {\r\n    onCollapse(categoryGroups.map(g => g.id));\r\n  };\r\n\r\n  return (\r\n    <View\r\n      data-testid=\"budget-table\"\r\n      style={{\r\n        flex: 1,\r\n        ...(styles.lightScrollbar && {\r\n          '& ::-webkit-scrollbar': {\r\n            backgroundColor: 'transparent',\r\n          },\r\n          '& ::-webkit-scrollbar-thumb:vertical': {\r\n            backgroundColor: theme.tableHeaderBackground,\r\n          },\r\n        }),\r\n      }}\r\n    >\r\n      <View\r\n        style={{\r\n          flexDirection: 'row',\r\n          overflow: 'hidden',\r\n          flexShrink: 0,\r\n          // This is necessary to align with the table because the\r\n          // table has this padding to allow the shadow to show\r\n          paddingLeft: 5,\r\n          paddingRight: 5 + getScrollbarWidth(),\r\n        }}\r\n      >\r\n        <View style={{ width: 200 }} />\r\n        <MonthsProvider\r\n          startMonth={prewarmStartMonth}\r\n          numMonths={numMonths}\r\n          monthBounds={monthBounds}\r\n          type={type}\r\n        >\r\n          <BudgetSummaries SummaryComponent={dataComponents.SummaryComponent} />\r\n        </MonthsProvider>\r\n      </View>\r\n\r\n      <MonthsProvider\r\n        startMonth={startMonth}\r\n        numMonths={numMonths}\r\n        monthBounds={monthBounds}\r\n        type={type}\r\n      >\r\n        <BudgetTotals\r\n          MonthComponent={dataComponents.BudgetTotalsComponent}\r\n          toggleHiddenCategories={toggleHiddenCategories}\r\n          expandAllCategories={expandAllCategories}\r\n          collapseAllCategories={collapseAllCategories}\r\n        />\r\n        <View\r\n          style={{\r\n            overflowY: 'scroll',\r\n            overflowAnchor: 'none',\r\n            flex: 1,\r\n            paddingLeft: 5,\r\n            paddingRight: 5,\r\n          }}\r\n        >\r\n          <View\r\n            style={{\r\n              flexShrink: 0,\r\n            }}\r\n            onKeyDown={onKeyDown}\r\n          >\r\n            <BudgetCategories\r\n              categoryGroups={categoryGroups}\r\n              editingCell={editing}\r\n              dataComponents={dataComponents}\r\n              onEditMonth={onEditMonth}\r\n              onEditName={onEditName}\r\n              onSaveCategory={onSaveCategory}\r\n              onSaveGroup={onSaveGroup}\r\n              onDeleteCategory={onDeleteCategory}\r\n              onDeleteGroup={onDeleteGroup}\r\n              onReorderCategory={_onReorderCategory}\r\n              onReorderGroup={_onReorderGroup}\r\n              onBudgetAction={onBudgetAction}\r\n              onShowActivity={onShowActivity}\r\n              onApplyBudgetTemplatesInGroup={onApplyBudgetTemplatesInGroup}\r\n            />\r\n          </View>\r\n        </View>\r\n      </MonthsProvider>\r\n    </View>\r\n  );\r\n}\r\n\r\nBudgetTable.displayName = 'BudgetTable';\r\n","// @ts-strict-ignore\nimport React, { useEffect, type ComponentProps } from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport * as monthUtils from 'loot-core/src/shared/months';\n\nimport { View } from '../common/View';\n\nimport { useBudgetMonthCount } from './BudgetMonthCountContext';\nimport { BudgetPageHeader } from './BudgetPageHeader';\nimport { BudgetTable } from './BudgetTable';\n\nfunction getNumPossibleMonths(width: number) {\n  const estimatedTableWidth = width - 200;\n\n  if (estimatedTableWidth < 500) {\n    return 1;\n  } else if (estimatedTableWidth < 750) {\n    return 2;\n  } else if (estimatedTableWidth < 1000) {\n    return 3;\n  } else if (estimatedTableWidth < 1250) {\n    return 4;\n  } else if (estimatedTableWidth < 1500) {\n    return 5;\n  }\n\n  return 6;\n}\n\ntype DynamicBudgetTableInnerProps = {\n  width: number;\n  height: number;\n} & DynamicBudgetTableProps;\n\nconst DynamicBudgetTableInner = ({\n  type,\n  width,\n  height,\n  prewarmStartMonth,\n  startMonth,\n  maxMonths = 3,\n  monthBounds,\n  onMonthSelect,\n  ...props\n}: DynamicBudgetTableInnerProps) => {\n  const { setDisplayMax } = useBudgetMonthCount();\n\n  const numPossible = getNumPossibleMonths(width);\n  const numMonths = Math.min(numPossible, maxMonths);\n  const maxWidth = 200 + 500 * numMonths;\n\n  useEffect(() => {\n    setDisplayMax(numPossible);\n  }, [numPossible]);\n\n  function getValidMonth(month) {\n    const start = monthBounds.start;\n    const end = monthUtils.subMonths(monthBounds.end, numMonths - 1);\n\n    if (month < start) {\n      return start;\n    } else if (month > end) {\n      return end;\n    }\n    return month;\n  }\n\n  function _onMonthSelect(month) {\n    onMonthSelect(getValidMonth(month), numMonths);\n  }\n\n  useHotkeys(\n    'left',\n    () => {\n      _onMonthSelect(monthUtils.prevMonth(startMonth));\n    },\n    {\n      preventDefault: true,\n      scopes: ['app'],\n    },\n    [_onMonthSelect, startMonth],\n  );\n  useHotkeys(\n    'right',\n    () => {\n      _onMonthSelect(monthUtils.nextMonth(startMonth));\n    },\n    {\n      preventDefault: true,\n      scopes: ['app'],\n    },\n    [_onMonthSelect, startMonth],\n  );\n  useHotkeys(\n    '0',\n    () => {\n      _onMonthSelect(\n        monthUtils.subMonths(\n          monthUtils.currentMonth(),\n          type === 'rollover'\n            ? Math.floor((numMonths - 1) / 2)\n            : numMonths === 2\n              ? 1\n              : Math.max(numMonths - 2, 0),\n        ),\n      );\n    },\n    {\n      preventDefault: true,\n      scopes: ['app'],\n    },\n    [_onMonthSelect, startMonth, numMonths],\n  );\n\n  return (\n    <View\n      style={{\n        width,\n        height,\n        alignItems: 'center',\n        opacity: width <= 0 || height <= 0 ? 0 : 1,\n      }}\n    >\n      <View style={{ width: '100%', maxWidth }}>\n        <BudgetPageHeader\n          startMonth={prewarmStartMonth}\n          numMonths={numMonths}\n          monthBounds={monthBounds}\n          onMonthSelect={_onMonthSelect}\n        />\n        <BudgetTable\n          prewarmStartMonth={prewarmStartMonth}\n          startMonth={startMonth}\n          numMonths={numMonths}\n          monthBounds={monthBounds}\n          {...props}\n        />\n      </View>\n    </View>\n  );\n};\n\nDynamicBudgetTableInner.displayName = 'DynamicBudgetTableInner';\n\ntype DynamicBudgetTableProps = ComponentProps<typeof BudgetTable>;\n\nexport const DynamicBudgetTable = (props: DynamicBudgetTableProps) => {\n  return (\n    <AutoSizer>\n      {({ width, height }) => (\n        <DynamicBudgetTableInner width={width} height={height} {...props} />\n      )}\n    </AutoSizer>\n  );\n};\n\nDynamicBudgetTable.displayName = 'DynamicBudgetTable';\n","// @ts-strict-ignore\nimport React, { memo, useMemo, useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  addNotification,\n  applyBudgetAction,\n  createCategory,\n  createGroup,\n  deleteCategory,\n  deleteGroup,\n  getCategories,\n  moveCategory,\n  moveCategoryGroup,\n  pushModal,\n  updateCategory,\n  updateGroup,\n} from 'loot-core/src/client/actions';\nimport { useSpreadsheet } from 'loot-core/src/client/SpreadsheetProvider';\nimport { send, listen } from 'loot-core/src/platform/client/fetch';\nimport * as monthUtils from 'loot-core/src/shared/months';\n\nimport { useCategories } from '../../hooks/useCategories';\nimport { useGlobalPref } from '../../hooks/useGlobalPref';\nimport { useLocalPref } from '../../hooks/useLocalPref';\nimport { useNavigate } from '../../hooks/useNavigate';\nimport { useSyncedPref } from '../../hooks/useSyncedPref';\nimport { styles } from '../../style';\nimport { View } from '../common/View';\nimport { NamespaceContext } from '../spreadsheet/NamespaceContext';\n\nimport { DynamicBudgetTable } from './DynamicBudgetTable';\nimport * as envelopeBudget from './envelope/EnvelopeBudgetComponents';\nimport { EnvelopeBudgetProvider } from './envelope/EnvelopeBudgetContext';\nimport * as trackingBudget from './tracking/TrackingBudgetComponents';\nimport { TrackingBudgetProvider } from './tracking/TrackingBudgetContext';\nimport { prewarmAllMonths, prewarmMonth } from './util';\n\ntype TrackingReportComponents = {\n  SummaryComponent: typeof trackingBudget.BudgetSummary;\n  ExpenseCategoryComponent: typeof trackingBudget.ExpenseCategoryMonth;\n  ExpenseGroupComponent: typeof trackingBudget.ExpenseGroupMonth;\n  IncomeCategoryComponent: typeof trackingBudget.IncomeCategoryMonth;\n  IncomeGroupComponent: typeof trackingBudget.IncomeGroupMonth;\n  BudgetTotalsComponent: typeof trackingBudget.BudgetTotalsMonth;\n  IncomeHeaderComponent: typeof trackingBudget.IncomeHeaderMonth;\n};\n\ntype EnvelopeBudgetComponents = {\n  SummaryComponent: typeof EnvelopeBudgetSummary;\n  ExpenseCategoryComponent: typeof envelopeBudget.ExpenseCategoryMonth;\n  ExpenseGroupComponent: typeof envelopeBudget.ExpenseGroupMonth;\n  IncomeCategoryComponent: typeof envelopeBudget.IncomeCategoryMonth;\n  IncomeGroupComponent: typeof envelopeBudget.IncomeGroupMonth;\n  BudgetTotalsComponent: typeof envelopeBudget.BudgetTotalsMonth;\n  IncomeHeaderComponent: typeof envelopeBudget.IncomeHeaderMonth;\n};\n\ntype BudgetInnerProps = {\n  accountId?: string;\n  trackingComponents: TrackingReportComponents;\n  envelopeComponents: EnvelopeBudgetComponents;\n};\n\nfunction BudgetInner(props: BudgetInnerProps) {\n  const { t } = useTranslation();\n  const currentMonth = monthUtils.currentMonth();\n  const spreadsheet = useSpreadsheet();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [summaryCollapsed, setSummaryCollapsedPref] = useLocalPref(\n    'budget.summaryCollapsed',\n  );\n  const [startMonthPref, setStartMonthPref] = useLocalPref('budget.startMonth');\n  const startMonth = startMonthPref || currentMonth;\n  const [bounds, setBounds] = useState({\n    start: startMonth,\n    end: startMonth,\n  });\n  const [budgetType = 'rollover'] = useSyncedPref('budgetType');\n  const [maxMonthsPref] = useGlobalPref('maxMonths');\n  const maxMonths = maxMonthsPref || 1;\n  const [initialized, setInitialized] = useState(false);\n  const { grouped: categoryGroups } = useCategories();\n\n  function loadCategories() {\n    dispatch(getCategories());\n  }\n\n  useEffect(() => {\n    async function run() {\n      loadCategories();\n\n      const { start, end } = await send('get-budget-bounds');\n      setBounds({ start, end });\n\n      await prewarmAllMonths(\n        budgetType,\n        spreadsheet,\n        { start, end },\n        startMonth,\n      );\n\n      setInitialized(true);\n    }\n\n    run();\n\n    const unlistens = [\n      listen('sync-event', ({ type, tables }) => {\n        if (\n          type === 'success' &&\n          (tables.includes('categories') ||\n            tables.includes('category_mapping') ||\n            tables.includes('category_groups'))\n        ) {\n          loadCategories();\n        }\n      }),\n\n      listen('undo-event', ({ tables }) => {\n        if (tables.includes('categories')) {\n          loadCategories();\n        }\n      }),\n    ];\n\n    return () => {\n      unlistens.forEach(unlisten => unlisten());\n    };\n  }, []);\n\n  useEffect(() => {\n    send('get-budget-bounds').then(({ start, end }) => {\n      if (bounds.start !== start || bounds.end !== end) {\n        setBounds({ start, end });\n      }\n    });\n  }, [props.accountId]);\n\n  const onMonthSelect = async (month, numDisplayed) => {\n    setStartMonthPref(month);\n\n    const warmingMonth = month;\n\n    // We could be smarter about this, but this is a good start. We\n    // optimize for the case where users press the left/right button\n    // to move between months. This loads the month data all at once\n    // and \"prewarms\" the spreadsheet cache. This uses a simple\n    // heuristic that will fail if the user clicks an arbitrary month,\n    // but it will just load in some unnecessary data.\n    if (month < startMonth) {\n      // pre-warm prev month\n      await prewarmMonth(\n        budgetType,\n        spreadsheet,\n        monthUtils.subMonths(month, 1),\n      );\n    } else if (month > startMonth) {\n      // pre-warm next month\n      await prewarmMonth(\n        budgetType,\n        spreadsheet,\n        monthUtils.addMonths(month, numDisplayed),\n      );\n    }\n\n    if (warmingMonth === month) {\n      setStartMonthPref(month);\n    }\n  };\n\n  const categoryNameAlreadyExistsNotification = name => {\n    dispatch(\n      addNotification({\n        type: 'error',\n        message: t(\n          'Category ‘{{name}}‘ already exists in group (May be Hidden)',\n          { name },\n        ),\n      }),\n    );\n  };\n\n  const onSaveCategory = async category => {\n    const cats = await send('get-categories');\n    const exists =\n      cats.grouped\n        .filter(g => g.id === category.cat_group)[0]\n        .categories.filter(\n          c => c.name.toUpperCase() === category.name.toUpperCase(),\n        )\n        .filter(c => (category.id === 'new' ? true : c.id !== category.id))\n        .length > 0;\n\n    if (exists) {\n      categoryNameAlreadyExistsNotification(category.name);\n      return;\n    }\n\n    if (category.id === 'new') {\n      dispatch(\n        createCategory(\n          category.name,\n          category.cat_group,\n          category.is_income,\n          category.hidden,\n        ),\n      );\n    } else {\n      dispatch(updateCategory(category));\n    }\n  };\n\n  const onDeleteCategory = async id => {\n    const mustTransfer = await send('must-category-transfer', { id });\n\n    if (mustTransfer) {\n      dispatch(\n        pushModal('confirm-category-delete', {\n          category: id,\n          onDelete: transferCategory => {\n            if (id !== transferCategory) {\n              dispatch(deleteCategory(id, transferCategory));\n            }\n          },\n        }),\n      );\n    } else {\n      dispatch(deleteCategory(id));\n    }\n  };\n\n  const onSaveGroup = group => {\n    if (group.id === 'new') {\n      dispatch(createGroup(group.name));\n    } else {\n      dispatch(updateGroup(group));\n    }\n  };\n\n  const onDeleteGroup = async id => {\n    const group = categoryGroups.find(g => g.id === id);\n\n    let mustTransfer = false;\n    for (const category of group.categories) {\n      if (await send('must-category-transfer', { id: category.id })) {\n        mustTransfer = true;\n        break;\n      }\n    }\n\n    if (mustTransfer) {\n      dispatch(\n        pushModal('confirm-category-delete', {\n          group: id,\n          onDelete: transferCategory => {\n            dispatch(deleteGroup(id, transferCategory));\n          },\n        }),\n      );\n    } else {\n      dispatch(deleteGroup(id));\n    }\n  };\n\n  const onApplyBudgetTemplatesInGroup = async categories => {\n    dispatch(\n      applyBudgetAction(startMonth, 'apply-multiple-templates', {\n        month: startMonth,\n        categories,\n      }),\n    );\n  };\n\n  const onBudgetAction = (month, type, args) => {\n    dispatch(applyBudgetAction(month, type, args));\n  };\n\n  const onShowActivity = (categoryId, month) => {\n    const filterConditions = [\n      { field: 'category', op: 'is', value: categoryId, type: 'id' },\n      {\n        field: 'date',\n        op: 'is',\n        value: month,\n        options: { month: true },\n        type: 'date',\n      },\n    ];\n    navigate('/accounts', {\n      state: {\n        goBack: true,\n        filterConditions,\n        categoryId,\n      },\n    });\n  };\n\n  const onReorderCategory = async sortInfo => {\n    const cats = await send('get-categories');\n    const moveCandidate = cats.list.filter(c => c.id === sortInfo.id)[0];\n    const exists =\n      cats.grouped\n        .filter(g => g.id === sortInfo.groupId)[0]\n        .categories.filter(\n          c => c.name.toUpperCase() === moveCandidate.name.toUpperCase(),\n        )\n        .filter(c => c.id !== moveCandidate.id).length > 0;\n\n    if (exists) {\n      categoryNameAlreadyExistsNotification(moveCandidate.name);\n      return;\n    }\n\n    dispatch(moveCategory(sortInfo.id, sortInfo.groupId, sortInfo.targetId));\n  };\n\n  const onReorderGroup = async sortInfo => {\n    dispatch(moveCategoryGroup(sortInfo.id, sortInfo.targetId));\n  };\n\n  const onToggleCollapse = () => {\n    setSummaryCollapsedPref(!summaryCollapsed);\n  };\n\n  const { trackingComponents, envelopeComponents } = props;\n\n  if (!initialized || !categoryGroups) {\n    return null;\n  }\n\n  let table;\n  if (budgetType === 'report') {\n    table = (\n      <TrackingBudgetProvider\n        summaryCollapsed={summaryCollapsed}\n        onBudgetAction={onBudgetAction}\n        onToggleSummaryCollapse={onToggleCollapse}\n      >\n        <DynamicBudgetTable\n          type={budgetType}\n          prewarmStartMonth={startMonth}\n          startMonth={startMonth}\n          monthBounds={bounds}\n          maxMonths={maxMonths}\n          dataComponents={trackingComponents}\n          onMonthSelect={onMonthSelect}\n          onDeleteCategory={onDeleteCategory}\n          onDeleteGroup={onDeleteGroup}\n          onSaveCategory={onSaveCategory}\n          onSaveGroup={onSaveGroup}\n          onBudgetAction={onBudgetAction}\n          onShowActivity={onShowActivity}\n          onReorderCategory={onReorderCategory}\n          onReorderGroup={onReorderGroup}\n        />\n      </TrackingBudgetProvider>\n    );\n  } else {\n    table = (\n      <EnvelopeBudgetProvider\n        summaryCollapsed={summaryCollapsed}\n        onBudgetAction={onBudgetAction}\n        onToggleSummaryCollapse={onToggleCollapse}\n      >\n        <DynamicBudgetTable\n          type={budgetType}\n          prewarmStartMonth={startMonth}\n          startMonth={startMonth}\n          monthBounds={bounds}\n          maxMonths={maxMonths}\n          dataComponents={envelopeComponents}\n          onMonthSelect={onMonthSelect}\n          onDeleteCategory={onDeleteCategory}\n          onDeleteGroup={onDeleteGroup}\n          onApplyBudgetTemplatesInGroup={onApplyBudgetTemplatesInGroup}\n          onSaveCategory={onSaveCategory}\n          onSaveGroup={onSaveGroup}\n          onBudgetAction={onBudgetAction}\n          onShowActivity={onShowActivity}\n          onReorderCategory={onReorderCategory}\n          onReorderGroup={onReorderGroup}\n        />\n      </EnvelopeBudgetProvider>\n    );\n  }\n\n  return (\n    <NamespaceContext.Provider value={monthUtils.sheetForMonth(startMonth)}>\n      <View style={{ flex: 1 }}>{table}</View>\n    </NamespaceContext.Provider>\n  );\n}\n\nconst EnvelopeBudgetSummary = memo<{ month: string }>(props => {\n  return <envelopeBudget.BudgetSummary {...props} />;\n});\n\nEnvelopeBudgetSummary.displayName = 'EnvelopeBudgetSummary';\n\nexport function Budget() {\n  const trackingComponents = useMemo<TrackingReportComponents>(\n    () => ({\n      SummaryComponent: trackingBudget.BudgetSummary,\n      ExpenseCategoryComponent: trackingBudget.ExpenseCategoryMonth,\n      ExpenseGroupComponent: trackingBudget.ExpenseGroupMonth,\n      IncomeCategoryComponent: trackingBudget.IncomeCategoryMonth,\n      IncomeGroupComponent: trackingBudget.IncomeGroupMonth,\n      BudgetTotalsComponent: trackingBudget.BudgetTotalsMonth,\n      IncomeHeaderComponent: trackingBudget.IncomeHeaderMonth,\n    }),\n    [trackingBudget],\n  );\n\n  const envelopeComponents = useMemo<EnvelopeBudgetComponents>(\n    () => ({\n      SummaryComponent: EnvelopeBudgetSummary,\n      ExpenseCategoryComponent: envelopeBudget.ExpenseCategoryMonth,\n      ExpenseGroupComponent: envelopeBudget.ExpenseGroupMonth,\n      IncomeCategoryComponent: envelopeBudget.IncomeCategoryMonth,\n      IncomeGroupComponent: envelopeBudget.IncomeGroupMonth,\n      BudgetTotalsComponent: envelopeBudget.BudgetTotalsMonth,\n      IncomeHeaderComponent: envelopeBudget.IncomeHeaderMonth,\n    }),\n    [envelopeBudget],\n  );\n\n  // In a previous iteration, the wrapper needs `overflow: hidden` for\n  // some reason. Without it at certain dimensions the width/height\n  // that autosizer gives us is slightly wrong, causing scrollbars to\n  // appear. We might not need it anymore?\n  return (\n    <View\n      style={{\n        ...styles.page,\n        paddingLeft: 8,\n        paddingRight: 8,\n        overflow: 'hidden',\n      }}\n    >\n      <BudgetInner\n        trackingComponents={trackingComponents}\n        envelopeComponents={envelopeComponents}\n      />\n    </View>\n  );\n}\n","import React, { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { SvgInformationCircle } from '../../icons/v2';\nimport { theme } from '../../style';\n\nimport { Text } from './Text';\nimport { View } from './View';\n\ntype InfoBubbleProps = {\n  label: string;\n  textWidth?: number;\n};\n\nexport function InfoBubble({ label, textWidth }: InfoBubbleProps) {\n  const location = useLocation();\n  const [visible, setVisible] = useState(location.hash === '#info');\n\n  const width = textWidth || getStringWidth(label);\n\n  return visible ? (\n    <View style={{ userSelect: 'none' }}>\n      <SvgInformationCircle\n        style={{ height: '15px', cursor: 'pointer' }}\n        onClick={() => setVisible(false)}\n        onMouseLeave={() => setVisible(false)}\n      />\n      <View\n        style={{\n          position: 'absolute',\n          left: '20px',\n          top: '-7px',\n          color: theme.buttonNormalText,\n          backgroundColor: theme.buttonNormalBackground,\n          padding: 5,\n          borderRadius: 4,\n          border: '1px solid ' + theme.buttonNormalBorder,\n          zIndex: 300,\n          boxShadow: theme.buttonPrimaryShadow,\n        }}\n      >\n        <Text\n          style={{\n            width,\n          }}\n        >\n          {label}\n        </Text>\n      </View>\n    </View>\n  ) : (\n    <View style={{ userSelect: 'none' }}>\n      <SvgInformationCircle\n        style={{ height: '15px', cursor: 'pointer' }}\n        onClick={() => setVisible(true)}\n        onMouseOver={() => setTimeout(() => setVisible(true), 500)}\n      />\n    </View>\n  );\n}\n\nfunction getStringWidth(text: string): number {\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d')!;\n  context.font = getComputedStyle(document.body).font;\n\n  return Math.ceil(context.measureText(text).width);\n}\n","import React, { useState } from 'react';\nimport { Trans } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\n\nimport { type SyncedPrefs } from 'loot-core/types/prefs';\n\nimport { useFeatureFlag } from '../../hooks/useFeatureFlag';\nimport { useSyncedPref } from '../../hooks/useSyncedPref';\nimport { Button } from '../common/Button2';\nimport { InfoBubble } from '../common/InfoBubble';\nimport { Select } from '../common/Select';\nimport { Text } from '../common/Text';\nimport { View } from '../common/View';\n\nimport { Setting } from './UI';\n\nconst options: {\n  value: SyncedPrefs['upcomingScheduledTransactionLength'];\n  label: string;\n}[] = [\n  { value: '1', label: '1 Day' },\n  { value: '7', label: '1 Week' },\n  { value: '14', label: '2 Weeks' },\n  { value: '30', label: '1 Month' },\n];\n\nexport function UpcomingLengthSettings() {\n  const [_upcomingLength, setUpcomingLength] = useSyncedPref(\n    'upcomingScheduledTransactionLength',\n  );\n  const upcomingLength = _upcomingLength || '7';\n\n  const enabled = useFeatureFlag('upcomingLengthAdjustment');\n\n  const location = useLocation();\n  const [expanded, setExpanded] = useState(location.hash === '#upcomingLength');\n\n  if (!enabled) return null;\n\n  return expanded ? (\n    <Setting\n      primaryAction={\n        <View style={{ flexDirection: 'row', gap: '1em' }}>\n          <View style={{ flexDirection: 'row', alignItems: 'center', gap: 20 }}>\n            <View title=\"Upcoming Length\">\n              <Select\n                options={options.map(x => [x.value || '7', x.label])}\n                value={upcomingLength}\n                onChange={newValue => setUpcomingLength(newValue)}\n              />\n            </View>\n            <InfoBubble label=\"Only the first instance of a recurring transaction will be shown.\" />\n          </View>\n        </View>\n      }\n    >\n      <View style={{ flexDirection: 'row', gap: 20 }}>\n        <Text>\n          <strong>Upcoming Length</strong> does not affect how budget data is\n          stored, and can be changed at any time.\n        </Text>\n        <Button\n          onPress={() => setExpanded(false)}\n          aria-label=\"Close upcoming length settings\"\n        >\n          Close\n        </Button>\n      </View>\n    </Setting>\n  ) : (\n    <View>\n      <Button\n        aria-label=\"Edit upcoming length settings\"\n        variant=\"primary\"\n        onPress={() => setExpanded(true)}\n      >\n        <Trans>\n          Edit Upcoming Length (\n          {options.find(x => x.value === upcomingLength)?.label ?? '1 Week'})\n        </Trans>\n      </Button>\n    </View>\n  );\n}\n","import React, { useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport { useSchedules } from 'loot-core/src/client/data-hooks/schedules';\nimport { send } from 'loot-core/src/platform/client/fetch';\nimport { type ScheduleEntity } from 'loot-core/src/types/models';\n\nimport { useActions } from '../../hooks/useActions';\nimport { theme } from '../../style';\nimport { Button } from '../common/Button2';\nimport { Search } from '../common/Search';\nimport { View } from '../common/View';\nimport { Page } from '../Page';\nimport { UpcomingLengthSettings } from '../settings/Upcoming';\n\nimport { type ScheduleItemAction, SchedulesTable } from './SchedulesTable';\n\nexport function Schedules() {\n  const { t } = useTranslation();\n\n  const { pushModal } = useActions();\n  const [filter, setFilter] = useState('');\n\n  const scheduleData = useSchedules();\n\n  if (scheduleData == null) {\n    return null;\n  }\n\n  const { schedules, statuses } = scheduleData;\n\n  function onEdit(id: ScheduleEntity['id']) {\n    pushModal('schedule-edit', { id });\n  }\n\n  function onAdd() {\n    pushModal('schedule-edit');\n  }\n\n  function onDiscover() {\n    pushModal('schedules-discover');\n  }\n\n  async function onAction(name: ScheduleItemAction, id: ScheduleEntity['id']) {\n    switch (name) {\n      case 'post-transaction':\n        await send('schedule/post-transaction', { id });\n        break;\n      case 'skip':\n        await send('schedule/skip-next-date', { id });\n        break;\n      case 'complete':\n        await send('schedule/update', {\n          schedule: { id, completed: true },\n        });\n        break;\n      case 'restart':\n        await send('schedule/update', {\n          schedule: { id, completed: false },\n          resetNextDate: true,\n        });\n        break;\n      case 'delete':\n        await send('schedule/delete', { id });\n        break;\n      default:\n    }\n  }\n\n  return (\n    <Page header={t('Schedules')}>\n      <View\n        style={{\n          flexDirection: 'row',\n          alignItems: 'center',\n          padding: '0 0 15px',\n        }}\n      >\n        <View\n          style={{\n            flexDirection: 'row',\n            alignItems: 'center',\n            padding: '15px 0 0',\n          }}\n        >\n          <UpcomingLengthSettings />\n        </View>\n        <View\n          style={{\n            flex: 1,\n            flexDirection: 'row',\n            justifyContent: 'flex-end',\n          }}\n        >\n          <Search\n            placeholder={t('Filter schedules…')}\n            value={filter}\n            onChange={setFilter}\n          />\n        </View>\n      </View>\n\n      <SchedulesTable\n        schedules={schedules}\n        filter={filter}\n        statuses={statuses}\n        allowCompleted={true}\n        onSelect={onEdit}\n        onAction={onAction}\n        style={{ backgroundColor: theme.tableBackground }}\n      />\n\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n          margin: '20px 0',\n          flexShrink: 0,\n        }}\n      >\n        <Button onPress={onDiscover}>\n          <Trans>Find schedules</Trans>\n        </Button>\n        <Button variant=\"primary\" onPress={onAdd}>\n          <Trans>Add new schedule</Trans>\n        </Button>\n      </View>\n    </Page>\n  );\n}\n","import React from 'react';\nimport { Trans } from 'react-i18next';\n\nimport { Modal, ModalHeader } from '../common/Modal';\nimport { Paragraph } from '../common/Paragraph';\nimport { View } from '../common/View';\n\nexport function GoCardlessLink() {\n  window.close();\n  return (\n    <Modal name=\"gocardless-link\" isDismissable={false}>\n      <ModalHeader title=\"Account sync\" />\n      <View style={{ maxWidth: 500 }}>\n        <Paragraph>\n          <Trans>Please wait...</Trans>\n        </Paragraph>\n        <Paragraph>\n          <Trans>\n            The window should close automatically. If nothing happened you can\n            close this window or tab.\n          </Trans>\n        </Paragraph>\n      </View>\n    </Modal>\n  );\n}\n","import type { TransactionEntity } from '../types/models';\n\nexport function validForTransfer(\n  fromTransaction: TransactionEntity,\n  toTransaction: TransactionEntity,\n) {\n  if (\n    // no subtransactions\n    // not already a transfer\n    [fromTransaction, toTransaction].every(tran => {\n      return tran.transfer_id == null && tran.is_child === false;\n    }) &&\n    fromTransaction.account !== toTransaction.account && // belong to different accounts\n    fromTransaction.amount + toTransaction.amount === 0 // amount must zero each other out\n  ) {\n    return true;\n  }\n  return false;\n}\n","import React, {\r\n  createContext,\r\n  useMemo,\r\n  useEffect,\r\n  useContext,\r\n  useReducer,\r\n} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst SplitsExpandedContext = createContext(null);\r\n\r\nexport function useSplitsExpanded() {\r\n  const data = useContext(SplitsExpandedContext);\r\n\r\n  return useMemo(\r\n    () => ({\r\n      ...data,\r\n      expanded: id =>\r\n        data.state.mode === 'collapse'\r\n          ? !data.state.ids.has(id)\r\n          : data.state.ids.has(id),\r\n    }),\r\n    [data],\r\n  );\r\n}\r\n\r\nexport function SplitsExpandedProvider({ children, initialMode = 'expand' }) {\r\n  const cachedState = useSelector(state => state.app.lastSplitState);\r\n  const reduxDispatch = useDispatch();\r\n\r\n  const [state, dispatch] = useReducer(\r\n    (state, action) => {\r\n      switch (action.type) {\r\n        case 'toggle-split': {\r\n          const ids = new Set([...state.ids]);\r\n          const { id } = action;\r\n          if (ids.has(id)) {\r\n            ids.delete(id);\r\n          } else {\r\n            ids.add(id);\r\n          }\r\n          return { ...state, ids };\r\n        }\r\n        case 'open-split': {\r\n          const ids = new Set([...state.ids]);\r\n          const { id } = action;\r\n          if (state.mode === 'collapse') {\r\n            ids.delete(id);\r\n          } else {\r\n            ids.add(id);\r\n          }\r\n          return { ...state, ids };\r\n        }\r\n        case 'close-splits': {\r\n          const ids = new Set([...state.ids]);\r\n          action.ids.forEach(id => {\r\n            if (state.mode === 'collapse') {\r\n              ids.add(id);\r\n            } else {\r\n              ids.delete(id);\r\n            }\r\n          });\r\n          return { ...state, ids };\r\n        }\r\n        case 'set-mode': {\r\n          return {\r\n            ...state,\r\n            mode: action.mode,\r\n            ids: new Set(),\r\n            transitionId: null,\r\n          };\r\n        }\r\n        case 'switch-mode':\r\n          if (state.transitionId != null) {\r\n            // You can only transition once at a time\r\n            return state;\r\n          }\r\n\r\n          return {\r\n            ...state,\r\n            mode: state.mode === 'expand' ? 'collapse' : 'expand',\r\n            transitionId: action.id,\r\n            ids: new Set(),\r\n          };\r\n        case 'finish-switch-mode':\r\n          return { ...state, transitionId: null };\r\n        default:\r\n          throw new Error('Unknown action type: ' + action.type);\r\n      }\r\n    },\r\n    cachedState.current || { ids: new Set(), mode: initialMode },\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (state.transitionId != null) {\r\n      // This timeout allows animations to finish\r\n      setTimeout(() => {\r\n        dispatch({ type: 'finish-switch-mode' });\r\n      }, 250);\r\n    }\r\n  }, [state.transitionId]);\r\n\r\n  useEffect(() => {\r\n    // In a finished state, cache the state\r\n    if (state.transitionId == null) {\r\n      reduxDispatch({ type: 'SET_LAST_SPLIT_STATE', splitState: state });\r\n    }\r\n  }, [reduxDispatch, state]);\r\n\r\n  const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\r\n\r\n  return (\r\n    <SplitsExpandedContext.Provider value={value}>\r\n      {children}\r\n    </SplitsExpandedContext.Provider>\r\n  );\r\n}\r\n","import React, { type ComponentPropsWithoutRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\n\nimport { pushModal } from 'loot-core/client/actions';\nimport { isPreviewId } from 'loot-core/shared/transactions';\nimport { type TransactionEntity } from 'loot-core/types/models';\n\nimport { Menu } from '../common/Menu';\n\ntype BalanceMenuProps = Omit<\n  ComponentPropsWithoutRef<typeof Menu>,\n  'onMenuSelect' | 'items'\n> & {\n  transaction: TransactionEntity;\n  onDuplicate: (id: string) => void;\n  onDelete: (id: string) => void;\n  onLinkSchedule: (id: string) => void;\n  onUnlinkSchedule: (id: string) => void;\n  onCreateRule: (id: string) => void;\n  onScheduleAction: (action: string, id: string) => void;\n  onMakeAsNonSplitTransactions: (id: string) => void;\n  closeMenu: () => void;\n};\n\nexport function TransactionMenu({\n  transaction,\n  onDuplicate,\n  onDelete,\n  onLinkSchedule,\n  onUnlinkSchedule,\n  onCreateRule,\n  onScheduleAction,\n  onMakeAsNonSplitTransactions,\n  closeMenu,\n  ...props\n}: BalanceMenuProps) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const isPreview = isPreviewId(transaction.id);\n  const linked = !!transaction.schedule;\n  const canUnsplitTransactions =\n    !transaction.reconciled && (transaction.is_parent || transaction.is_child);\n\n  function onViewSchedule() {\n    const firstId = transaction.id;\n    let scheduleId;\n    if (isPreviewId(firstId)) {\n      const parts = firstId.split('/');\n      scheduleId = parts[1];\n    } else {\n      scheduleId = transaction.schedule;\n    }\n\n    if (scheduleId) {\n      dispatch(pushModal('schedule-edit', { id: scheduleId }));\n    }\n  }\n\n  return (\n    <Menu\n      {...props}\n      onMenuSelect={name => {\n        switch (name) {\n          case 'duplicate':\n            onDuplicate(transaction.id);\n            break;\n          case 'delete':\n            onDelete(transaction.id);\n            break;\n          case 'unsplit-transactions':\n            onMakeAsNonSplitTransactions(transaction.id);\n            break;\n          case 'post-transaction':\n          case 'skip':\n            onScheduleAction(name, transaction.id);\n            break;\n          case 'view-schedule':\n            onViewSchedule();\n            break;\n          case 'link-schedule':\n            onLinkSchedule(transaction.id);\n            break;\n          case 'unlink-schedule':\n            onUnlinkSchedule(transaction.id);\n            break;\n          case 'create-rule':\n            onCreateRule(transaction.id);\n            break;\n          default:\n            throw new Error(`Unrecognized menu option: ${name}`);\n        }\n        closeMenu();\n      }}\n      items={\n        isPreview\n          ? [\n              { name: 'view-schedule', text: t('View schedule') },\n              { name: 'post-transaction', text: t('Post transaction') },\n              { name: 'skip', text: t('Skip scheduled date') },\n            ]\n          : [\n              {\n                name: 'duplicate',\n                text: t('Duplicate'),\n              },\n              { name: 'delete', text: t('Delete') },\n              ...(linked\n                ? [\n                    {\n                      name: 'view-schedule',\n                      text: t('View schedule'),\n                    },\n                    { name: 'unlink-schedule', text: t('Unlink schedule') },\n                  ]\n                : [\n                    {\n                      name: 'link-schedule',\n                      text: t('Link schedule'),\n                    },\n                    {\n                      name: 'create-rule',\n                      text: t('Create rule'),\n                    },\n                  ]),\n              ...(canUnsplitTransactions\n                ? [\n                    {\n                      name: 'unsplit-transactions',\n                      text: t('Unsplit transaction'),\n                    },\n                  ]\n                : []),\n            ]\n      }\n    />\n  );\n}\n","import React, {\r\n  createElement,\r\n  createRef,\r\n  forwardRef,\r\n  memo,\r\n  useState,\r\n  useRef,\r\n  useMemo,\r\n  useCallback,\r\n  useLayoutEffect,\r\n  useEffect,\r\n} from 'react';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { css } from '@emotion/css';\r\nimport {\r\n  format as formatDate,\r\n  parseISO,\r\n  isValid as isDateValid,\r\n} from 'date-fns';\r\n\r\nimport { pushModal } from 'loot-core/client/actions';\r\nimport { useCachedSchedules } from 'loot-core/src/client/data-hooks/schedules';\r\nimport {\r\n  getAccountsById,\r\n  getPayeesById,\r\n  getCategoriesById,\r\n} from 'loot-core/src/client/reducers/queries';\r\nimport { evalArithmetic } from 'loot-core/src/shared/arithmetic';\r\nimport { currentDay } from 'loot-core/src/shared/months';\r\nimport * as monthUtils from 'loot-core/src/shared/months';\r\nimport { getScheduledAmount } from 'loot-core/src/shared/schedules';\r\nimport {\r\n  splitTransaction,\r\n  updateTransaction,\r\n  deleteTransaction,\r\n  addSplitTransaction,\r\n  groupTransaction,\r\n  ungroupTransactions,\r\n  isTemporaryId,\r\n  isPreviewId,\r\n} from 'loot-core/src/shared/transactions';\r\nimport {\r\n  integerToCurrency,\r\n  amountToInteger,\r\n  titleFirst,\r\n} from 'loot-core/src/shared/util';\r\n\r\nimport { useFeatureFlag } from '../../hooks/useFeatureFlag';\r\nimport { useMergedRefs } from '../../hooks/useMergedRefs';\r\nimport { usePrevious } from '../../hooks/usePrevious';\r\nimport { useSelectedDispatch, useSelectedItems } from '../../hooks/useSelected';\r\nimport { useSplitsExpanded } from '../../hooks/useSplitsExpanded';\r\nimport { SvgLeftArrow2, SvgRightArrow2, SvgSplit } from '../../icons/v0';\r\nimport { SvgArrowDown, SvgArrowUp, SvgCheveronDown } from '../../icons/v1';\r\nimport {\r\n  SvgArrowsSynchronize,\r\n  SvgCalendar,\r\n  SvgHyperlink2,\r\n} from '../../icons/v2';\r\nimport { styles, theme } from '../../style';\r\nimport { AccountAutocomplete } from '../autocomplete/AccountAutocomplete';\r\nimport { CategoryAutocomplete } from '../autocomplete/CategoryAutocomplete';\r\nimport { PayeeAutocomplete } from '../autocomplete/PayeeAutocomplete';\r\nimport { Button } from '../common/Button2';\r\nimport { Popover } from '../common/Popover';\r\nimport { Text } from '../common/Text';\r\nimport { Tooltip } from '../common/Tooltip';\r\nimport { View } from '../common/View';\r\nimport { getStatusProps } from '../schedules/StatusBadge';\r\nimport { DateSelect } from '../select/DateSelect';\r\nimport { NamespaceContext } from '../spreadsheet/NamespaceContext';\r\nimport {\r\n  Cell,\r\n  Field,\r\n  Row,\r\n  InputCell,\r\n  SelectCell,\r\n  DeleteCell,\r\n  CustomCell,\r\n  CellButton,\r\n  useTableNavigator,\r\n  Table,\r\n  UnexposedCellContent,\r\n} from '../table';\r\n\r\nimport { TransactionMenu } from './TransactionMenu';\r\n\r\nfunction getDisplayValue(obj, name) {\r\n  return obj ? obj[name] : '';\r\n}\r\n\r\nfunction serializeTransaction(transaction, showZeroInDeposit) {\r\n  let { amount, date } = transaction;\r\n\r\n  if (isPreviewId(transaction.id)) {\r\n    amount = (transaction._inverse ? -1 : 1) * getScheduledAmount(amount);\r\n  }\r\n\r\n  let debit = amount < 0 ? -amount : null;\r\n  let credit = amount > 0 ? amount : null;\r\n\r\n  if (amount === 0) {\r\n    if (showZeroInDeposit) {\r\n      credit = 0;\r\n    } else {\r\n      debit = 0;\r\n    }\r\n  }\r\n\r\n  // Validate the date format\r\n  if (!isDateValid(parseISO(date))) {\r\n    // Be a little forgiving if the date isn't valid. This at least\r\n    // stops the UI from crashing, but this is a serious problem with\r\n    // the data. This allows the user to go through and see empty\r\n    // dates and manually fix them.\r\n    date = null;\r\n  }\r\n\r\n  return {\r\n    ...transaction,\r\n    date,\r\n    debit: debit != null ? integerToCurrency(debit) : '',\r\n    credit: credit != null ? integerToCurrency(credit) : '',\r\n  };\r\n}\r\n\r\nfunction deserializeTransaction(transaction, originalTransaction) {\r\n  const { debit, credit, date: originalDate, ...realTransaction } = transaction;\r\n\r\n  let amount;\r\n  if (debit !== '') {\r\n    const parsed = evalArithmetic(debit, null);\r\n    amount = parsed != null ? -parsed : null;\r\n  } else {\r\n    amount = evalArithmetic(credit, null);\r\n  }\r\n\r\n  amount =\r\n    amount != null ? amountToInteger(amount) : originalTransaction.amount;\r\n\r\n  let date = originalDate;\r\n  if (date == null) {\r\n    date = originalTransaction.date || currentDay();\r\n  }\r\n\r\n  return { ...realTransaction, date, amount };\r\n}\r\n\r\nfunction isLastChild(transactions, index) {\r\n  const trans = transactions[index];\r\n  return (\r\n    trans &&\r\n    trans.is_child &&\r\n    (transactions[index + 1] == null ||\r\n      transactions[index + 1].parent_id !== trans.parent_id)\r\n  );\r\n}\r\n\r\nfunction selectAscDesc(field, ascDesc, clicked, defaultAscDesc = 'asc') {\r\n  return field === clicked\r\n    ? ascDesc === 'asc'\r\n      ? 'desc'\r\n      : 'asc'\r\n    : defaultAscDesc;\r\n}\r\n\r\nconst TransactionHeader = memo(\r\n  ({\r\n    hasSelected,\r\n    showAccount,\r\n    showCategory,\r\n    showBalance,\r\n    showCleared,\r\n    scrollWidth,\r\n    onSort,\r\n    ascDesc,\r\n    field,\r\n  }) => {\r\n    const dispatchSelected = useSelectedDispatch();\r\n\r\n    useHotkeys(\r\n      'ctrl+a, cmd+a, meta+a',\r\n      e => dispatchSelected({ type: 'select-all', event: e }),\r\n      {\r\n        preventDefault: true,\r\n        scopes: ['app'],\r\n      },\r\n      [dispatchSelected],\r\n    );\r\n\r\n    return (\r\n      <Row\r\n        style={{\r\n          fontWeight: 300,\r\n          zIndex: 200,\r\n          color: theme.tableHeaderText,\r\n          backgroundColor: theme.tableBackground,\r\n          paddingRight: `${5 + (scrollWidth ?? 0)}px`,\r\n          borderTopWidth: 1,\r\n          borderBottomWidth: 1,\r\n          borderColor: theme.tableBorder,\r\n        }}\r\n      >\r\n        <SelectCell\r\n          exposed={true}\r\n          focused={false}\r\n          selected={hasSelected}\r\n          width={20}\r\n          style={{\r\n            borderTopWidth: 0,\r\n            borderBottomWidth: 0,\r\n          }}\r\n          onSelect={e =>\r\n            dispatchSelected({ type: 'select-all', isRangeSelect: e.shiftKey })\r\n          }\r\n        />\r\n        <HeaderCell\r\n          value=\"Date\"\r\n          width={110}\r\n          alignItems=\"flex\"\r\n          marginLeft={-5}\r\n          id=\"date\"\r\n          icon={field === 'date' ? ascDesc : 'clickable'}\r\n          onClick={() =>\r\n            onSort('date', selectAscDesc(field, ascDesc, 'date', 'desc'))\r\n          }\r\n        />\r\n        {showAccount && (\r\n          <HeaderCell\r\n            value=\"Account\"\r\n            width=\"flex\"\r\n            alignItems=\"flex\"\r\n            marginLeft={-5}\r\n            id=\"account\"\r\n            icon={field === 'account' ? ascDesc : 'clickable'}\r\n            onClick={() =>\r\n              onSort('account', selectAscDesc(field, ascDesc, 'account', 'asc'))\r\n            }\r\n          />\r\n        )}\r\n        <HeaderCell\r\n          value=\"Payee\"\r\n          width=\"flex\"\r\n          alignItems=\"flex\"\r\n          marginLeft={-5}\r\n          id=\"payee\"\r\n          icon={field === 'payee' ? ascDesc : 'clickable'}\r\n          onClick={() =>\r\n            onSort('payee', selectAscDesc(field, ascDesc, 'payee', 'asc'))\r\n          }\r\n        />\r\n        <HeaderCell\r\n          value=\"Notes\"\r\n          width=\"flex\"\r\n          alignItems=\"flex\"\r\n          marginLeft={-5}\r\n          id=\"notes\"\r\n          icon={field === 'notes' ? ascDesc : 'clickable'}\r\n          onClick={() =>\r\n            onSort('notes', selectAscDesc(field, ascDesc, 'notes', 'asc'))\r\n          }\r\n        />\r\n        {showCategory && (\r\n          <HeaderCell\r\n            value=\"Category\"\r\n            width=\"flex\"\r\n            alignItems=\"flex\"\r\n            marginLeft={-5}\r\n            id=\"category\"\r\n            icon={field === 'category' ? ascDesc : 'clickable'}\r\n            onClick={() =>\r\n              onSort(\r\n                'category',\r\n                selectAscDesc(field, ascDesc, 'category', 'asc'),\r\n              )\r\n            }\r\n          />\r\n        )}\r\n        <HeaderCell\r\n          value=\"Payment\"\r\n          width={100}\r\n          alignItems=\"flex-end\"\r\n          marginRight={-5}\r\n          id=\"payment\"\r\n          icon={field === 'payment' ? ascDesc : 'clickable'}\r\n          onClick={() =>\r\n            onSort('payment', selectAscDesc(field, ascDesc, 'payment', 'asc'))\r\n          }\r\n        />\r\n        <HeaderCell\r\n          value=\"Deposit\"\r\n          width={100}\r\n          alignItems=\"flex-end\"\r\n          marginRight={-5}\r\n          id=\"deposit\"\r\n          icon={field === 'deposit' ? ascDesc : 'clickable'}\r\n          onClick={() =>\r\n            onSort('deposit', selectAscDesc(field, ascDesc, 'deposit', 'desc'))\r\n          }\r\n        />\r\n        {showBalance && (\r\n          <HeaderCell\r\n            value=\"Balance\"\r\n            width={103}\r\n            alignItems=\"flex-end\"\r\n            marginRight={-5}\r\n            id=\"balance\"\r\n          />\r\n        )}\r\n        {showCleared && (\r\n          <HeaderCell\r\n            value=\"✓\"\r\n            width={38}\r\n            alignItems=\"center\"\r\n            id=\"cleared\"\r\n            icon={field === 'cleared' ? ascDesc : 'clickable'}\r\n            onClick={() => {\r\n              onSort(\r\n                'cleared',\r\n                selectAscDesc(field, ascDesc, 'cleared', 'asc'),\r\n              );\r\n            }}\r\n          />\r\n        )}\r\n      </Row>\r\n    );\r\n  },\r\n);\r\n\r\nTransactionHeader.displayName = 'TransactionHeader';\r\n\r\nfunction getPayeePretty(transaction, payee, transferAcct, numHiddenPayees = 0) {\r\n  const formatPayeeName = payeeName =>\r\n    numHiddenPayees > 0 ? `${payeeName} (+${numHiddenPayees} more)` : payeeName;\r\n\r\n  const { payee: payeeId } = transaction;\r\n\r\n  if (transferAcct) {\r\n    return (\r\n      <View\r\n        style={{\r\n          flexDirection: 'row',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n          }}\r\n        >\r\n          {formatPayeeName(transferAcct.name)}\r\n        </div>\r\n      </View>\r\n    );\r\n  } else if (payee) {\r\n    return formatPayeeName(payee.name);\r\n  } else if (payeeId && payeeId.startsWith('new:')) {\r\n    return formatPayeeName(payeeId.slice('new:'.length));\r\n  }\r\n\r\n  return '';\r\n}\r\n\r\nfunction StatusCell({\r\n  id,\r\n  focused,\r\n  selected,\r\n  status,\r\n  isChild,\r\n  isPreview,\r\n  onEdit,\r\n  onUpdate,\r\n}) {\r\n  const isClearedField =\r\n    status === 'cleared' || status === 'reconciled' || status == null;\r\n  const statusProps = getStatusProps(status);\r\n\r\n  const statusColor =\r\n    status === 'cleared'\r\n      ? theme.noticeTextLight\r\n      : status === 'reconciled'\r\n        ? theme.noticeTextLight\r\n        : status === 'missed'\r\n          ? theme.errorText\r\n          : status === 'due'\r\n            ? theme.warningText\r\n            : selected\r\n              ? theme.pageTextLinkLight\r\n              : theme.pageTextSubdued;\r\n\r\n  function onSelect() {\r\n    if (isClearedField) {\r\n      onUpdate('cleared', !(status === 'cleared'));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Cell\r\n      name=\"cleared\"\r\n      width={38}\r\n      alignItems=\"center\"\r\n      focused={focused}\r\n      style={{ padding: 1 }}\r\n      plain\r\n    >\r\n      <CellButton\r\n        style={{\r\n          padding: 3,\r\n          backgroundColor: 'transparent',\r\n          border: '1px solid transparent',\r\n          borderRadius: 50,\r\n          ':focus': {\r\n            ...(isPreview\r\n              ? {\r\n                  boxShadow: 'none',\r\n                }\r\n              : {\r\n                  border: '1px solid ' + theme.formInputBorderSelected,\r\n                  boxShadow: '0 1px 2px ' + theme.formInputBorderSelected,\r\n                }),\r\n          },\r\n          cursor: isClearedField ? 'pointer' : 'default',\r\n          ...(isChild && { visibility: 'hidden' }),\r\n        }}\r\n        disabled={isPreview || isChild}\r\n        onEdit={() => onEdit(id, 'cleared')}\r\n        onSelect={onSelect}\r\n      >\r\n        {createElement(statusProps.Icon, {\r\n          style: {\r\n            width: 13,\r\n            height: 13,\r\n            color: statusColor,\r\n            marginTop: status === 'due' ? -1 : 0,\r\n          },\r\n        })}\r\n      </CellButton>\r\n    </Cell>\r\n  );\r\n}\r\n\r\nfunction HeaderCell({\r\n  value,\r\n  id,\r\n  width,\r\n  alignItems,\r\n  marginLeft,\r\n  marginRight,\r\n  icon,\r\n  onClick,\r\n}) {\r\n  const style = {\r\n    whiteSpace: 'nowrap',\r\n    overflow: 'hidden',\r\n    textOverflow: 'ellipsis',\r\n    color: theme.tableHeaderText,\r\n    fontWeight: 300,\r\n    marginLeft,\r\n    marginRight,\r\n  };\r\n\r\n  return (\r\n    <CustomCell\r\n      width={width}\r\n      name={id}\r\n      alignItems={alignItems}\r\n      value={value}\r\n      style={{\r\n        borderTopWidth: 0,\r\n        borderBottomWidth: 0,\r\n      }}\r\n      unexposedContent={({ value: cellValue }) =>\r\n        onClick ? (\r\n          <Button variant=\"bare\" onPress={onClick} style={style}>\r\n            <UnexposedCellContent value={cellValue} />\r\n            {icon === 'asc' && (\r\n              <SvgArrowDown width={10} height={10} style={{ marginLeft: 5 }} />\r\n            )}\r\n            {icon === 'desc' && (\r\n              <SvgArrowUp width={10} height={10} style={{ marginLeft: 5 }} />\r\n            )}\r\n          </Button>\r\n        ) : (\r\n          <Text style={style}>{cellValue}</Text>\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nconst useParentPayee = (\r\n  payees,\r\n  subtransactions,\r\n  transferAccountsByTransaction,\r\n) =>\r\n  useMemo(() => {\r\n    if (!subtransactions) {\r\n      return null;\r\n    }\r\n\r\n    const { counts, mostCommonPayeeTransaction } =\r\n      subtransactions?.reduce(\r\n        ({ counts, ...result }, sub) => {\r\n          if (sub.payee) {\r\n            counts[sub.payee] = (counts[sub.payee] || 0) + 1;\r\n            if (counts[sub.payee] > result.maxCount) {\r\n              return {\r\n                counts,\r\n                maxCount: counts[sub.payee],\r\n                mostCommonPayeeTransaction: sub,\r\n              };\r\n            }\r\n          }\r\n          return { counts, ...result };\r\n        },\r\n        { counts: {}, maxCount: 0, mostCommonPayeeTransaction: null },\r\n      ) || {};\r\n\r\n    if (!mostCommonPayeeTransaction) {\r\n      return 'Split (no payee)';\r\n    }\r\n\r\n    const mostCommonPayee =\r\n      getPayeesById(payees)[mostCommonPayeeTransaction.payee];\r\n    const numDistinctPayees = Object.keys(counts).length;\r\n    return getPayeePretty(\r\n      mostCommonPayeeTransaction,\r\n      mostCommonPayee,\r\n      transferAccountsByTransaction[mostCommonPayeeTransaction.id],\r\n      numDistinctPayees - 1,\r\n    );\r\n  }, [subtransactions, payees, transferAccountsByTransaction]);\r\n\r\nfunction PayeeCell({\r\n  id,\r\n  payee,\r\n  focused,\r\n  payees,\r\n  accounts,\r\n  transferAccountsByTransaction,\r\n  valueStyle,\r\n  transaction,\r\n  subtransactions,\r\n  importedPayee,\r\n  isPreview,\r\n  onEdit,\r\n  onUpdate,\r\n  onCreatePayee,\r\n  onManagePayees,\r\n  onNavigateToTransferAccount,\r\n  onNavigateToSchedule,\r\n}) {\r\n  const isCreatingPayee = useRef(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const parentPayee = useParentPayee(\r\n    payees,\r\n    subtransactions,\r\n    transferAccountsByTransaction,\r\n  );\r\n\r\n  const transferAccount = transferAccountsByTransaction[transaction.id];\r\n\r\n  return transaction.is_parent ? (\r\n    <Cell\r\n      name=\"payee\"\r\n      width=\"flex\"\r\n      focused={focused}\r\n      style={{ padding: 0 }}\r\n      plain\r\n    >\r\n      <CellButton\r\n        bare\r\n        style={{\r\n          alignSelf: 'flex-start',\r\n          borderRadius: 4,\r\n          border: '1px solid transparent', // so it doesn't shift on hover\r\n          ':hover': isPreview\r\n            ? {}\r\n            : {\r\n                border: '1px solid ' + theme.buttonNormalBorder,\r\n              },\r\n        }}\r\n        disabled={isPreview}\r\n        onSelect={() =>\r\n          dispatch(\r\n            pushModal('payee-autocomplete', {\r\n              onSelect: payeeId => {\r\n                onUpdate('payee', payeeId);\r\n              },\r\n            }),\r\n          )\r\n        }\r\n      >\r\n        <View\r\n          style={{\r\n            flexDirection: 'row',\r\n            alignItems: 'center',\r\n            alignSelf: 'stretch',\r\n            borderRadius: 4,\r\n            flex: 1,\r\n            padding: 4,\r\n            color: theme.pageTextSubdued,\r\n          }}\r\n        >\r\n          <PayeeIcons\r\n            transaction={transaction}\r\n            transferAccount={transferAccount}\r\n            onNavigateToTransferAccount={onNavigateToTransferAccount}\r\n            onNavigateToSchedule={onNavigateToSchedule}\r\n          />\r\n          <SvgSplit\r\n            style={{\r\n              color: 'inherit',\r\n              width: 14,\r\n              height: 14,\r\n              marginRight: 5,\r\n            }}\r\n          />\r\n          <Text\r\n            style={{\r\n              fontStyle: 'italic',\r\n              fontWeight: 300,\r\n              userSelect: 'none',\r\n              borderBottom: importedPayee\r\n                ? `1px dashed ${theme.pageTextSubdued}`\r\n                : 'none',\r\n            }}\r\n          >\r\n            {importedPayee ? (\r\n              <Tooltip\r\n                content={\r\n                  <View style={{ padding: 10 }}>\r\n                    <Text style={{ fontWeight: 'bold' }}>Imported Payee</Text>\r\n                    <Text style={{ fontWeight: 'normal' }}>\r\n                      {importedPayee}\r\n                    </Text>\r\n                  </View>\r\n                }\r\n                style={{ ...styles.tooltip, borderRadius: '0px 5px 5px 0px' }}\r\n                placement=\"bottom\"\r\n                triggerProps={{ delay: 750 }}\r\n              >\r\n                {parentPayee}\r\n              </Tooltip>\r\n            ) : (\r\n              parentPayee\r\n            )}\r\n          </Text>\r\n        </View>\r\n      </CellButton>\r\n    </Cell>\r\n  ) : (\r\n    <CustomCell\r\n      width=\"flex\"\r\n      name=\"payee\"\r\n      textAlign=\"flex\"\r\n      value={payee?.id}\r\n      valueStyle={valueStyle}\r\n      exposed={focused}\r\n      onExpose={name => !isPreview && onEdit(id, name)}\r\n      onUpdate={async value => {\r\n        onUpdate('payee', value);\r\n\r\n        if (value && value.startsWith('new:') && !isCreatingPayee.current) {\r\n          isCreatingPayee.current = true;\r\n          const id = await onCreatePayee(value.slice('new:'.length));\r\n          onUpdate('payee', id);\r\n          isCreatingPayee.current = false;\r\n        }\r\n      }}\r\n      formatter={() => getPayeePretty(transaction, payee, transferAccount)}\r\n      unexposedContent={props => {\r\n        const payeeName = (\r\n          <UnexposedCellContent\r\n            {...props}\r\n            style={\r\n              importedPayee\r\n                ? { borderBottom: `1px dashed ${theme.pageTextSubdued}` }\r\n                : {}\r\n            }\r\n          />\r\n        );\r\n\r\n        return (\r\n          <>\r\n            <PayeeIcons\r\n              transaction={transaction}\r\n              transferAccount={transferAccount}\r\n              onNavigateToTransferAccount={onNavigateToTransferAccount}\r\n              onNavigateToSchedule={onNavigateToSchedule}\r\n            />\r\n            {importedPayee ? (\r\n              <Tooltip\r\n                content={\r\n                  <View style={{ padding: 10 }}>\r\n                    <Text style={{ fontWeight: 'bold' }}>Imported Payee</Text>\r\n                    <Text style={{ fontWeight: 'normal' }}>\r\n                      {importedPayee}\r\n                    </Text>\r\n                  </View>\r\n                }\r\n                style={{ ...styles.tooltip, borderRadius: '0px 5px 5px 0px' }}\r\n                placement=\"bottom\"\r\n                triggerProps={{ delay: 750 }}\r\n              >\r\n                {payeeName}\r\n              </Tooltip>\r\n            ) : (\r\n              payeeName\r\n            )}\r\n          </>\r\n        );\r\n      }}\r\n    >\r\n      {({\r\n        onBlur,\r\n        onKeyDown,\r\n        onUpdate,\r\n        onSave,\r\n        shouldSaveFromKey,\r\n        inputStyle,\r\n      }) => (\r\n        <PayeeAutocomplete\r\n          payees={payees}\r\n          accounts={accounts}\r\n          value={payee?.id}\r\n          shouldSaveFromKey={shouldSaveFromKey}\r\n          inputProps={{\r\n            onBlur,\r\n            onKeyDown,\r\n            style: inputStyle,\r\n          }}\r\n          showManagePayees={true}\r\n          clearOnBlur={false}\r\n          focused={true}\r\n          onUpdate={(id, value) => onUpdate?.(value)}\r\n          onSelect={onSave}\r\n          onManagePayees={() => onManagePayees(payee?.id)}\r\n        />\r\n      )}\r\n    </CustomCell>\r\n  );\r\n}\r\n\r\nfunction PayeeIcons({\r\n  transaction,\r\n  transferAccount,\r\n  onNavigateToTransferAccount,\r\n  onNavigateToSchedule,\r\n}) {\r\n  const scheduleId = transaction.schedule;\r\n  const scheduleData = useCachedSchedules();\r\n  const schedule =\r\n    scheduleId && scheduleData\r\n      ? scheduleData.schedules.find(s => s.id === scheduleId)\r\n      : null;\r\n\r\n  const buttonStyle = useMemo(\r\n    () => ({\r\n      marginLeft: -5,\r\n      marginRight: 2,\r\n      width: 23,\r\n      height: 23,\r\n      color: 'inherit',\r\n    }),\r\n    [],\r\n  );\r\n\r\n  const scheduleIconStyle = useMemo(() => ({ width: 13, height: 13 }), []);\r\n\r\n  const transferIconStyle = useMemo(() => ({ width: 10, height: 10 }), []);\r\n\r\n  if (schedule == null && transferAccount == null) {\r\n    // Neither a valid scheduled transaction nor a transfer.\r\n    return null;\r\n  }\r\n\r\n  const recurring = schedule && schedule._date && !!schedule._date.frequency;\r\n\r\n  return (\r\n    <>\r\n      {schedule && (\r\n        <Button\r\n          variant=\"bare\"\r\n          aria-label=\"See schedule details\"\r\n          style={buttonStyle}\r\n          onPress={() => {\r\n            onNavigateToSchedule(scheduleId);\r\n          }}\r\n        >\r\n          {recurring ? (\r\n            <SvgArrowsSynchronize style={scheduleIconStyle} />\r\n          ) : (\r\n            <SvgCalendar style={scheduleIconStyle} />\r\n          )}\r\n        </Button>\r\n      )}\r\n      {transferAccount && (\r\n        <Button\r\n          variant=\"bare\"\r\n          aria-label=\"See transfer account\"\r\n          style={buttonStyle}\r\n          onPress={() => {\r\n            if (!isTemporaryId(transaction.id)) {\r\n              onNavigateToTransferAccount(transferAccount.id);\r\n            }\r\n          }}\r\n        >\r\n          {(transaction._inverse ? -1 : 1) * transaction.amount > 0 ? (\r\n            <SvgLeftArrow2 style={transferIconStyle} />\r\n          ) : (\r\n            <SvgRightArrow2 style={transferIconStyle} />\r\n          )}\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst Transaction = memo(function Transaction({\r\n  allTransactions,\r\n  transaction: originalTransaction,\r\n  subtransactions,\r\n  transferAccountsByTransaction,\r\n  editing,\r\n  showAccount,\r\n  showBalance,\r\n  showCleared,\r\n  showZeroInDeposit,\r\n  style,\r\n  selected,\r\n  highlighted,\r\n  added,\r\n  matched,\r\n  expanded,\r\n  focusedField,\r\n  categoryGroups,\r\n  payees,\r\n  accounts,\r\n  balance,\r\n  dateFormat = 'MM/dd/yyyy',\r\n  hideFraction,\r\n  onSave,\r\n  onEdit,\r\n  onDelete,\r\n  onDuplicate,\r\n  onLinkSchedule,\r\n  onUnlinkSchedule,\r\n  onCreateRule,\r\n  onScheduleAction,\r\n  onMakeAsNonSplitTransactions,\r\n  onSplit,\r\n  onManagePayees,\r\n  onCreatePayee,\r\n  onToggleSplit,\r\n  onNavigateToTransferAccount,\r\n  onNavigateToSchedule,\r\n  onNotesTagClick,\r\n  splitError,\r\n  listContainerRef,\r\n}) {\r\n  const dispatch = useDispatch();\r\n  const dispatchSelected = useSelectedDispatch();\r\n  const triggerRef = useRef(null);\r\n\r\n  const [prevShowZero, setPrevShowZero] = useState(showZeroInDeposit);\r\n  const [prevTransaction, setPrevTransaction] = useState(originalTransaction);\r\n  const [transaction, setTransaction] = useState(() =>\r\n    serializeTransaction(originalTransaction, showZeroInDeposit),\r\n  );\r\n  const isPreview = isPreviewId(transaction.id);\r\n\r\n  if (\r\n    originalTransaction !== prevTransaction ||\r\n    showZeroInDeposit !== prevShowZero\r\n  ) {\r\n    setTransaction(\r\n      serializeTransaction(originalTransaction, showZeroInDeposit),\r\n    );\r\n    setPrevTransaction(originalTransaction);\r\n    setPrevShowZero(showZeroInDeposit);\r\n  }\r\n\r\n  const [showReconciliationWarning, setShowReconciliationWarning] =\r\n    useState(false);\r\n\r\n  function onUpdate(name, value) {\r\n    // Had some issues with this is called twice which is a problem now that we are showing a warning\r\n    // modal if the transaction is locked. I added a boolean to guard against showing the modal twice.\r\n    // I'm still not completely happy with how the cells update pre/post modal. Sometimes you have to\r\n    // click off of the cell manually after confirming your change post modal for example. The last\r\n    // row seems to have more issues than others but the combination of tab, return, and clicking out\r\n    // of the cell all have different implications as well.\r\n\r\n    if (transaction[name] !== value) {\r\n      if (\r\n        transaction.reconciled === true &&\r\n        (name === 'credit' ||\r\n          name === 'debit' ||\r\n          name === 'payee' ||\r\n          name === 'account' ||\r\n          name === 'date')\r\n      ) {\r\n        if (showReconciliationWarning === false) {\r\n          setShowReconciliationWarning(true);\r\n          dispatch(\r\n            pushModal('confirm-transaction-edit', {\r\n              onCancel: () => {\r\n                setShowReconciliationWarning(false);\r\n              },\r\n              onConfirm: () => {\r\n                setShowReconciliationWarning(false);\r\n                onUpdateAfterConfirm(name, value);\r\n              },\r\n              confirmReason: 'editReconciled',\r\n            }),\r\n          );\r\n        }\r\n      } else {\r\n        onUpdateAfterConfirm(name, value);\r\n      }\r\n    }\r\n\r\n    // Allow un-reconciling (unlocking) transactions\r\n    if (name === 'cleared' && transaction.reconciled) {\r\n      dispatch(\r\n        pushModal('confirm-transaction-edit', {\r\n          onConfirm: () => {\r\n            onUpdateAfterConfirm('reconciled', false);\r\n          },\r\n          confirmReason: 'unlockReconciled',\r\n        }),\r\n      );\r\n    }\r\n  }\r\n\r\n  function onUpdateAfterConfirm(name, value) {\r\n    const newTransaction = { ...transaction, [name]: value };\r\n\r\n    // Don't change the note to an empty string if it's null (since they are both rendered the same)\r\n    if (name === 'note' && value === '' && transaction.note == null) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      name === 'account' &&\r\n      value &&\r\n      getAccountsById(accounts)[value].offbudget\r\n    ) {\r\n      newTransaction.category = null;\r\n    }\r\n\r\n    // If entering an amount in either of the credit/debit fields, we\r\n    // need to clear out the other one so it's always properly\r\n    // translated into the desired amount (see\r\n    // `deserializeTransaction`)\r\n    if (name === 'credit') {\r\n      newTransaction['debit'] = '';\r\n    } else if (name === 'debit') {\r\n      newTransaction['credit'] = '';\r\n    }\r\n\r\n    if (name === 'account' && transaction.account !== value) {\r\n      newTransaction.reconciled = false;\r\n    }\r\n\r\n    // Don't save a temporary value (a new payee) which will be\r\n    // filled in with a real id later\r\n    if (name === 'payee' && value && value.startsWith('new:')) {\r\n      setTransaction(newTransaction);\r\n    } else {\r\n      const deserialized = deserializeTransaction(\r\n        newTransaction,\r\n        originalTransaction,\r\n      );\r\n      // Run the transaction through the formatting so that we know\r\n      // it's always showing the formatted result\r\n      setTransaction(serializeTransaction(deserialized, showZeroInDeposit));\r\n\r\n      const deserializedName = ['credit', 'debit'].includes(name)\r\n        ? 'amount'\r\n        : name;\r\n      onSave(deserialized, subtransactions, deserializedName);\r\n    }\r\n  }\r\n\r\n  const {\r\n    id,\r\n    amount,\r\n    debit,\r\n    credit,\r\n    payee: payeeId,\r\n    imported_payee: importedPayee,\r\n    notes,\r\n    date,\r\n    account: accountId,\r\n    category: categoryId,\r\n    cleared,\r\n    reconciled,\r\n    is_parent: isParent,\r\n    _unmatched = false,\r\n    _inverse = false,\r\n  } = transaction;\r\n\r\n  // Join in some data\r\n  const payee = payees && payeeId && getPayeesById(payees)[payeeId];\r\n  const account = accounts && accountId && getAccountsById(accounts)[accountId];\r\n\r\n  const isChild = transaction.is_child;\r\n  const transferAcct = isTemporaryId(id)\r\n    ? getAccountsById(accounts)[payee?.transfer_acct]\r\n    : transferAccountsByTransaction[id];\r\n  const isBudgetTransfer = transferAcct && transferAcct.offbudget === 0;\r\n  const isOffBudget = account && account.offbudget === 1;\r\n\r\n  const valueStyle = added ? { fontWeight: 600 } : null;\r\n  const backgroundFocus = focusedField === 'select';\r\n  const amountStyle = hideFraction ? { letterSpacing: -0.5 } : null;\r\n\r\n  const runningBalance = !isTemporaryId(id)\r\n    ? balance\r\n    : balance + (_inverse ? -1 : 1) * amount;\r\n\r\n  // Ok this entire logic is a dirty, dirty hack.. but let me explain.\r\n  // Problem: the split-error Popover (which has the buttons to distribute/add split)\r\n  // renders before schedules are added to the table. After schedules finally load\r\n  // the entire table gets pushed down. But the Popover does not re-calculate\r\n  // its positioning. This is because there is nothing in react-aria that would be\r\n  // watching for the position of the trigger element.\r\n  // Solution: when transactions (this includes schedules) change - we increment\r\n  // a variable (with a small delay in order for the next render cycle to pick up\r\n  // the change instead of the current). We pass the integer to the Popover which\r\n  // causes it to re-calculate the positioning. Thus fixing the problem.\r\n  const [updateId, setUpdateId] = useState(1);\r\n  useEffect(() => {\r\n    // The hack applies to only transactions with split errors\r\n    if (!splitError) {\r\n      return;\r\n    }\r\n\r\n    setTimeout(() => {\r\n      setUpdateId(state => state + 1);\r\n    }, 1);\r\n  }, [splitError, allTransactions]);\r\n\r\n  const [menuOpen, setMenuOpen] = useState(false);\r\n  const [crossOffset, setCrossOffset] = useState(0);\r\n  const [offset, setOffset] = useState(0);\r\n  const contextMenusEnabled = useFeatureFlag('contextMenus');\r\n\r\n  return (\r\n    <Row\r\n      ref={triggerRef}\r\n      style={{\r\n        backgroundColor: selected\r\n          ? theme.tableRowBackgroundHighlight\r\n          : backgroundFocus\r\n            ? theme.tableRowBackgroundHover\r\n            : theme.tableBackground,\r\n        ':hover': !(backgroundFocus || selected) && {\r\n          backgroundColor: theme.tableRowBackgroundHover,\r\n        },\r\n        '& .hover-visible': {\r\n          opacity: 0,\r\n        },\r\n        ':hover .hover-visible': {\r\n          opacity: 1,\r\n        },\r\n        ...(highlighted || selected\r\n          ? { color: theme.tableRowBackgroundHighlightText }\r\n          : { color: theme.tableText }),\r\n        ...style,\r\n        ...(isPreview && {\r\n          color: theme.tableTextInactive,\r\n          fontStyle: 'italic',\r\n        }),\r\n        ...(_unmatched && { opacity: 0.5 }),\r\n      }}\r\n      onContextMenu={e => {\r\n        if (!contextMenusEnabled) return;\r\n        if (transaction.id === 'temp') return;\r\n        e.preventDefault();\r\n        const rect = e.currentTarget.getBoundingClientRect();\r\n        setCrossOffset(e.clientX - rect.left);\r\n        setOffset(e.clientY - rect.bottom);\r\n        setMenuOpen(true);\r\n      }}\r\n    >\r\n      <Popover\r\n        triggerRef={triggerRef}\r\n        placement=\"bottom start\"\r\n        isOpen={menuOpen}\r\n        onOpenChange={() => setMenuOpen(false)}\r\n        crossOffset={crossOffset}\r\n        offset={offset}\r\n        style={{ width: 200, margin: 1 }}\r\n        isNonModal\r\n      >\r\n        <TransactionMenu\r\n          transaction={transaction}\r\n          onDelete={() => onDelete?.(transaction.id)}\r\n          onDuplicate={() => onDuplicate?.(transaction.id)}\r\n          onLinkSchedule={() => onLinkSchedule?.(transaction.id)}\r\n          onUnlinkSchedule={() => onUnlinkSchedule?.(transaction.id)}\r\n          onCreateRule={() => onCreateRule?.(transaction.id)}\r\n          onScheduleAction={action =>\r\n            onScheduleAction?.(action, transaction.id)\r\n          }\r\n          onMakeAsNonSplitTransactions={() =>\r\n            onMakeAsNonSplitTransactions?.(transaction.id)\r\n          }\r\n          closeMenu={() => setMenuOpen(false)}\r\n        />\r\n      </Popover>\r\n\r\n      {splitError && listContainerRef.current && (\r\n        <Popover\r\n          arrowSize={updateId}\r\n          triggerRef={triggerRef}\r\n          isOpen\r\n          isNonModal\r\n          style={{ width: 375, padding: 5, maxHeight: '38px !important' }}\r\n          shouldFlip={false}\r\n          placement=\"bottom end\"\r\n          UNSTABLE_portalContainer={listContainerRef.current}\r\n        >\r\n          {splitError}\r\n        </Popover>\r\n      )}\r\n\r\n      {isChild && (\r\n        <Field\r\n          /* Checkmark blank placeholder for Child transaction */\r\n          width={110}\r\n          style={{\r\n            width: 110,\r\n            backgroundColor: theme.tableRowBackgroundHover,\r\n            border: 0, // known z-order issue, bottom border for parent transaction hidden\r\n          }}\r\n        />\r\n      )}\r\n\r\n      {isChild && showAccount && (\r\n        <Field\r\n          /* Account blank placeholder for Child transaction */\r\n          style={{\r\n            flex: 1,\r\n            backgroundColor: theme.tableRowBackgroundHover,\r\n            border: 0,\r\n          }}\r\n        />\r\n      )}\r\n\r\n      {/* Checkmark - for Child transaction\r\n      between normal Date and Payee or Account and Payee if needed */}\r\n      {isTemporaryId(transaction.id) ? (\r\n        isChild ? (\r\n          <DeleteCell\r\n            onDelete={() => onDelete && onDelete(transaction.id)}\r\n            exposed={editing}\r\n            style={{ ...(isChild && { borderLeftWidth: 1 }), lineHeight: 0 }}\r\n          />\r\n        ) : (\r\n          <Cell width={20} />\r\n        )\r\n      ) : isPreview && isChild ? (\r\n        <Cell width={20} />\r\n      ) : (\r\n        <SelectCell\r\n          /* Checkmark field for non-child transaction */\r\n          exposed\r\n          buttonProps={{\r\n            className: selected || editing ? null : 'hover-visible',\r\n          }}\r\n          focused={focusedField === 'select'}\r\n          onSelect={e => {\r\n            dispatchSelected({\r\n              type: 'select',\r\n              id: transaction.id,\r\n              isRangeSelect: e.shiftKey,\r\n            });\r\n          }}\r\n          onEdit={() => onEdit(id, 'select')}\r\n          selected={selected}\r\n          style={{ ...(isChild && { borderLeftWidth: 1 }) }}\r\n          value={\r\n            matched && (\r\n              <SvgHyperlink2\r\n                style={{ width: 13, height: 13, color: 'inherit' }}\r\n              />\r\n            )\r\n          }\r\n        />\r\n      )}\r\n      {!isChild && (\r\n        <CustomCell\r\n          /* Date field for non-child transaction */\r\n          name=\"date\"\r\n          width={110}\r\n          textAlign=\"flex\"\r\n          exposed={focusedField === 'date'}\r\n          value={date}\r\n          valueStyle={valueStyle}\r\n          formatter={date =>\r\n            date ? formatDate(parseISO(date), dateFormat) : ''\r\n          }\r\n          onExpose={name => !isPreview && onEdit(id, name)}\r\n          onUpdate={value => {\r\n            onUpdate('date', value);\r\n          }}\r\n        >\r\n          {({\r\n            onBlur,\r\n            onKeyDown,\r\n            onUpdate,\r\n            onSave,\r\n            shouldSaveFromKey,\r\n            inputStyle,\r\n          }) => (\r\n            <DateSelect\r\n              value={date || ''}\r\n              dateFormat={dateFormat}\r\n              inputProps={{ onBlur, onKeyDown, style: inputStyle }}\r\n              shouldSaveFromKey={shouldSaveFromKey}\r\n              clearOnBlur={true}\r\n              onUpdate={onUpdate}\r\n              onSelect={onSave}\r\n            />\r\n          )}\r\n        </CustomCell>\r\n      )}\r\n\r\n      {!isChild && showAccount && (\r\n        <CustomCell\r\n          /* Account field for non-child transaction */\r\n          name=\"account\"\r\n          width=\"flex\"\r\n          textAlign=\"flex\"\r\n          value={accountId}\r\n          formatter={acctId => {\r\n            const acct = acctId && getAccountsById(accounts)[acctId];\r\n            if (acct) {\r\n              return acct.name;\r\n            }\r\n            return '';\r\n          }}\r\n          valueStyle={valueStyle}\r\n          exposed={focusedField === 'account'}\r\n          onExpose={name => !isPreview && onEdit(id, name)}\r\n          onUpdate={async value => {\r\n            // Only ever allow non-null values\r\n            if (value) {\r\n              onUpdate('account', value);\r\n            }\r\n          }}\r\n        >\r\n          {({\r\n            onBlur,\r\n            onKeyDown,\r\n            onUpdate,\r\n            onSave,\r\n            shouldSaveFromKey,\r\n            inputStyle,\r\n          }) => (\r\n            <AccountAutocomplete\r\n              includeClosedAccounts={false}\r\n              value={accountId}\r\n              accounts={accounts}\r\n              shouldSaveFromKey={shouldSaveFromKey}\r\n              clearOnBlur={false}\r\n              focused={true}\r\n              inputProps={{ onBlur, onKeyDown, style: inputStyle }}\r\n              onUpdate={onUpdate}\r\n              onSelect={onSave}\r\n              menuPortalTarget={undefined}\r\n            />\r\n          )}\r\n        </CustomCell>\r\n      )}\r\n      {(() => (\r\n        <PayeeCell\r\n          /* Payee field for all transactions */\r\n          id={id}\r\n          payee={payee}\r\n          focused={focusedField === 'payee'}\r\n          /* Filter out the account we're currently in as it is not a valid transfer */\r\n          accounts={accounts.filter(account => account.id !== accountId)}\r\n          payees={payees.filter(\r\n            payee => !payee.transfer_acct || payee.transfer_acct !== accountId,\r\n          )}\r\n          valueStyle={valueStyle}\r\n          transaction={transaction}\r\n          subtransactions={subtransactions}\r\n          transferAccountsByTransaction={transferAccountsByTransaction}\r\n          importedPayee={importedPayee}\r\n          isPreview={isPreview}\r\n          onEdit={onEdit}\r\n          onUpdate={onUpdate}\r\n          onCreatePayee={onCreatePayee}\r\n          onManagePayees={onManagePayees}\r\n          onNavigateToTransferAccount={onNavigateToTransferAccount}\r\n          onNavigateToSchedule={onNavigateToSchedule}\r\n        />\r\n      ))()}\r\n\r\n      <InputCell\r\n        width=\"flex\"\r\n        name=\"notes\"\r\n        textAlign=\"flex\"\r\n        exposed={focusedField === 'notes'}\r\n        focused={focusedField === 'notes'}\r\n        value={notes || ''}\r\n        valueStyle={valueStyle}\r\n        formatter={value => notesTagFormatter(value, onNotesTagClick)}\r\n        onExpose={name => !isPreview && onEdit(id, name)}\r\n        inputProps={{\r\n          value: notes || '',\r\n          onUpdate: onUpdate.bind(null, 'notes'),\r\n        }}\r\n      />\r\n\r\n      {(isPreview && !isChild) || isParent ? (\r\n        <Cell\r\n          /* Category field (Split button) for parent transactions */\r\n          name=\"category\"\r\n          width=\"flex\"\r\n          focused={focusedField === 'category'}\r\n          style={{\r\n            padding: 0,\r\n            flexDirection: 'row',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-start',\r\n            height: '100%',\r\n          }}\r\n          plain\r\n        >\r\n          {isPreview && (\r\n            <View\r\n              style={{\r\n                color:\r\n                  categoryId === 'missed'\r\n                    ? theme.errorText\r\n                    : categoryId === 'due'\r\n                      ? theme.warningText\r\n                      : selected\r\n                        ? theme.formLabelText\r\n                        : theme.upcomingText,\r\n                backgroundColor:\r\n                  categoryId === 'missed'\r\n                    ? theme.errorBackground\r\n                    : categoryId === 'due'\r\n                      ? theme.warningBackground\r\n                      : selected\r\n                        ? theme.formLabelBackground\r\n                        : theme.upcomingBackground,\r\n                margin: '0 5px',\r\n                padding: '3px 7px',\r\n                borderRadius: 4,\r\n              }}\r\n            >\r\n              {titleFirst(categoryId)}\r\n            </View>\r\n          )}\r\n          <CellButton\r\n            bare\r\n            style={{\r\n              borderRadius: 4,\r\n              border: '1px solid transparent', // so it doesn't shift on hover\r\n              ':hover': {\r\n                border: '1px solid ' + theme.buttonNormalBorder,\r\n              },\r\n            }}\r\n            disabled={isTemporaryId(transaction.id)}\r\n            onEdit={() => !isPreview && onEdit(id, 'category')}\r\n            onSelect={() => onToggleSplit(id)}\r\n          >\r\n            <View\r\n              style={{\r\n                flexDirection: 'row',\r\n                alignItems: 'center',\r\n                alignSelf: 'stretch',\r\n                borderRadius: 4,\r\n                flex: 1,\r\n                padding: 4,\r\n                color: theme.pageTextSubdued,\r\n              }}\r\n            >\r\n              {isParent && (\r\n                <SvgCheveronDown\r\n                  style={{\r\n                    color: 'inherit',\r\n                    width: 14,\r\n                    height: 14,\r\n                    transition: 'transform .08s',\r\n                    transform: expanded ? 'rotateZ(0)' : 'rotateZ(-90deg)',\r\n                  }}\r\n                />\r\n              )}\r\n              {!isPreview && (\r\n                <Text\r\n                  style={{\r\n                    fontStyle: 'italic',\r\n                    fontWeight: 300,\r\n                    userSelect: 'none',\r\n                  }}\r\n                >\r\n                  Split\r\n                </Text>\r\n              )}\r\n            </View>\r\n          </CellButton>\r\n        </Cell>\r\n      ) : isBudgetTransfer || isOffBudget ? (\r\n        <InputCell\r\n          /* Category field for transfer and off-budget transactions\r\n     (NOT preview, it is covered first) */\r\n          name=\"category\"\r\n          width=\"flex\"\r\n          exposed={focusedField === 'category'}\r\n          focused={focusedField === 'category'}\r\n          onExpose={name => onEdit(id, name)}\r\n          value={\r\n            isParent\r\n              ? 'Split'\r\n              : isOffBudget\r\n                ? 'Off Budget'\r\n                : isBudgetTransfer\r\n                  ? 'Transfer'\r\n                  : ''\r\n          }\r\n          valueStyle={valueStyle}\r\n          style={{\r\n            fontStyle: 'italic',\r\n            color: theme.pageTextSubdued,\r\n            fontWeight: 300,\r\n          }}\r\n          inputProps={{\r\n            readOnly: true,\r\n            style: { fontStyle: 'italic' },\r\n          }}\r\n        />\r\n      ) : (\r\n        <CustomCell\r\n          /* Category field for normal and child transactions */\r\n          name=\"category\"\r\n          width=\"flex\"\r\n          textAlign=\"flex\"\r\n          value={categoryId}\r\n          formatter={value =>\r\n            value\r\n              ? getDisplayValue(\r\n                  getCategoriesById(categoryGroups)[value],\r\n                  'name',\r\n                )\r\n              : transaction.id\r\n                ? 'Categorize'\r\n                : ''\r\n          }\r\n          exposed={focusedField === 'category'}\r\n          onExpose={name => !isPreview && onEdit(id, name)}\r\n          valueStyle={\r\n            !categoryId\r\n              ? {\r\n                  // uncategorized transaction\r\n                  fontStyle: 'italic',\r\n                  fontWeight: 300,\r\n                  color: theme.formInputTextHighlight,\r\n                }\r\n              : valueStyle\r\n          }\r\n          onUpdate={async value => {\r\n            if (value === 'split') {\r\n              onSplit(transaction.id);\r\n            } else {\r\n              onUpdate('category', value);\r\n            }\r\n          }}\r\n        >\r\n          {({\r\n            onBlur,\r\n            onKeyDown,\r\n            onUpdate,\r\n            onSave,\r\n            shouldSaveFromKey,\r\n            inputStyle,\r\n          }) => (\r\n            <NamespaceContext.Provider\r\n              value={monthUtils.sheetForMonth(\r\n                monthUtils.monthFromDate(transaction.date),\r\n              )}\r\n            >\r\n              <CategoryAutocomplete\r\n                categoryGroups={categoryGroups}\r\n                value={categoryId}\r\n                focused={true}\r\n                clearOnBlur={false}\r\n                showSplitOption={!isChild && !isParent}\r\n                shouldSaveFromKey={shouldSaveFromKey}\r\n                inputProps={{ onBlur, onKeyDown, style: inputStyle }}\r\n                onUpdate={onUpdate}\r\n                onSelect={onSave}\r\n                menuPortalTarget={undefined}\r\n                showHiddenCategories={false}\r\n              />\r\n            </NamespaceContext.Provider>\r\n          )}\r\n        </CustomCell>\r\n      )}\r\n\r\n      <InputCell\r\n        /* Debit field for all transactions */\r\n        type=\"input\"\r\n        width={100}\r\n        name=\"debit\"\r\n        exposed={focusedField === 'debit'}\r\n        focused={focusedField === 'debit'}\r\n        value={debit === '' && credit === '' ? '0.00' : debit}\r\n        valueStyle={valueStyle}\r\n        textAlign=\"right\"\r\n        title={debit}\r\n        onExpose={name => !isPreview && onEdit(id, name)}\r\n        style={{\r\n          ...(isParent && { fontStyle: 'italic' }),\r\n          ...styles.tnum,\r\n          ...amountStyle,\r\n        }}\r\n        inputProps={{\r\n          value: debit === '' && credit === '' ? '0.00' : debit,\r\n          onUpdate: onUpdate.bind(null, 'debit'),\r\n        }}\r\n        privacyFilter={{\r\n          activationFilters: [!isTemporaryId(transaction.id)],\r\n        }}\r\n      />\r\n\r\n      <InputCell\r\n        /* Credit field for all transactions */\r\n        type=\"input\"\r\n        width={100}\r\n        name=\"credit\"\r\n        exposed={focusedField === 'credit'}\r\n        focused={focusedField === 'credit'}\r\n        value={credit}\r\n        valueStyle={valueStyle}\r\n        textAlign=\"right\"\r\n        title={credit}\r\n        onExpose={name => !isPreview && onEdit(id, name)}\r\n        style={{\r\n          ...(isParent && { fontStyle: 'italic' }),\r\n          ...styles.tnum,\r\n          ...amountStyle,\r\n        }}\r\n        inputProps={{\r\n          value: credit,\r\n          onUpdate: onUpdate.bind(null, 'credit'),\r\n        }}\r\n        privacyFilter={{\r\n          activationFilters: [!isTemporaryId(transaction.id)],\r\n        }}\r\n      />\r\n\r\n      {showBalance && (\r\n        <Cell\r\n          /* Balance field for all transactions */\r\n          name=\"balance\"\r\n          value={\r\n            runningBalance == null || isChild\r\n              ? ''\r\n              : integerToCurrency(runningBalance)\r\n          }\r\n          valueStyle={{\r\n            color: runningBalance < 0 ? theme.errorText : theme.noticeTextLight,\r\n          }}\r\n          style={{ ...styles.tnum, ...amountStyle }}\r\n          width={103}\r\n          textAlign=\"right\"\r\n          privacyFilter\r\n        />\r\n      )}\r\n\r\n      {showCleared && (\r\n        <StatusCell\r\n          /* Icon field for all transactions */\r\n          id={id}\r\n          focused={focusedField === 'cleared'}\r\n          selected={selected}\r\n          isPreview={isPreview}\r\n          status={\r\n            isPreview\r\n              ? categoryId\r\n              : reconciled\r\n                ? 'reconciled'\r\n                : cleared\r\n                  ? 'cleared'\r\n                  : null\r\n          }\r\n          isChild={isChild}\r\n          onEdit={onEdit}\r\n          onUpdate={onUpdate}\r\n        />\r\n      )}\r\n\r\n      <Cell width={5} />\r\n    </Row>\r\n  );\r\n});\r\n\r\nfunction TransactionError({\r\n  error,\r\n  isDeposit,\r\n  onAddSplit,\r\n  onDistributeRemainder,\r\n  style,\r\n  canDistributeRemainder,\r\n}) {\r\n  switch (error.type) {\r\n    case 'SplitTransactionError':\r\n      if (error.version === 1) {\r\n        return (\r\n          <View\r\n            style={{\r\n              flexDirection: 'row',\r\n              alignItems: 'center',\r\n              padding: '0 5px',\r\n              ...style,\r\n            }}\r\n            data-testid=\"transaction-error\"\r\n          >\r\n            <Text>\r\n              Amount left:{' '}\r\n              <Text style={{ fontWeight: 500 }}>\r\n                {integerToCurrency(\r\n                  isDeposit ? error.difference : -error.difference,\r\n                )}\r\n              </Text>\r\n            </Text>\r\n            <View style={{ flex: 1 }} />\r\n            <Button\r\n              variant=\"normal\"\r\n              style={{ marginLeft: 15 }}\r\n              onPress={onDistributeRemainder}\r\n              data-testid=\"distribute-split-button\"\r\n              isDisabled={!canDistributeRemainder}\r\n            >\r\n              Distribute\r\n            </Button>\r\n            <Button\r\n              variant=\"primary\"\r\n              style={{ marginLeft: 10, padding: '4px 10px' }}\r\n              onPress={onAddSplit}\r\n              data-testid=\"add-split-button\"\r\n            >\r\n              Add Split\r\n            </Button>\r\n          </View>\r\n        );\r\n      }\r\n      break;\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nfunction makeTemporaryTransactions(\r\n  currentAccountId,\r\n  currentCategoryId,\r\n  lastDate,\r\n) {\r\n  return [\r\n    {\r\n      id: 'temp',\r\n      date: lastDate || currentDay(),\r\n      account: currentAccountId || null,\r\n      category: currentCategoryId || null,\r\n      cleared: false,\r\n      amount: null,\r\n    },\r\n  ];\r\n}\r\n\r\nfunction NewTransaction({\r\n  transactions,\r\n  accounts,\r\n  categoryGroups,\r\n  payees,\r\n  transferAccountsByTransaction,\r\n  editingTransaction,\r\n  focusedField,\r\n  showAccount,\r\n  showCategory,\r\n  showBalance,\r\n  showCleared,\r\n  dateFormat,\r\n  hideFraction,\r\n  onClose,\r\n  onSplit,\r\n  onEdit,\r\n  onDelete,\r\n  onSave,\r\n  onAdd,\r\n  onAddSplit,\r\n  onDistributeRemainder,\r\n  onManagePayees,\r\n  onCreatePayee,\r\n  onNavigateToTransferAccount,\r\n  onNavigateToSchedule,\r\n  onNotesTagClick,\r\n  balance,\r\n}) {\r\n  const error = transactions[0].error;\r\n  const isDeposit = transactions[0].amount > 0;\r\n\r\n  const childTransactions = transactions.filter(\r\n    t => t.parent_id === transactions[0].id,\r\n  );\r\n  const emptyChildTransactions = childTransactions.filter(t => t.amount === 0);\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        borderBottom: '1px solid ' + theme.tableBorderHover,\r\n        paddingBottom: 6,\r\n        backgroundColor: theme.tableBackground,\r\n      }}\r\n      data-testid=\"new-transaction\"\r\n      onKeyDown={e => {\r\n        if (e.key === 'Escape') {\r\n          onClose();\r\n        }\r\n      }}\r\n    >\r\n      {transactions.map(transaction => (\r\n        <Transaction\r\n          isNew\r\n          key={transaction.id}\r\n          editing={editingTransaction === transaction.id}\r\n          transaction={transaction}\r\n          subtransactions={transaction.is_parent ? childTransactions : null}\r\n          transferAccountsByTransaction={transferAccountsByTransaction}\r\n          showAccount={showAccount}\r\n          showCategory={showCategory}\r\n          showBalance={showBalance}\r\n          showCleared={showCleared}\r\n          focusedField={editingTransaction === transaction.id && focusedField}\r\n          showZeroInDeposit={isDeposit}\r\n          accounts={accounts}\r\n          categoryGroups={categoryGroups}\r\n          payees={payees}\r\n          dateFormat={dateFormat}\r\n          hideFraction={hideFraction}\r\n          expanded={true}\r\n          onEdit={onEdit}\r\n          onSave={onSave}\r\n          onSplit={onSplit}\r\n          onDelete={onDelete}\r\n          onAdd={onAdd}\r\n          onManagePayees={onManagePayees}\r\n          onCreatePayee={onCreatePayee}\r\n          style={{ marginTop: -1 }}\r\n          onNavigateToTransferAccount={onNavigateToTransferAccount}\r\n          onNavigateToSchedule={onNavigateToSchedule}\r\n          onNotesTagClick={onNotesTagClick}\r\n          balance={balance}\r\n        />\r\n      ))}\r\n      <View\r\n        style={{\r\n          flexDirection: 'row',\r\n          alignItems: 'center',\r\n          justifyContent: 'flex-end',\r\n          marginTop: 6,\r\n          marginRight: 20,\r\n        }}\r\n      >\r\n        <Button\r\n          style={{ marginRight: 10, padding: '4px 10px' }}\r\n          onPress={() => onClose()}\r\n          data-testid=\"cancel-button\"\r\n        >\r\n          Cancel\r\n        </Button>\r\n        {error ? (\r\n          <TransactionError\r\n            error={error}\r\n            isDeposit={isDeposit}\r\n            onAddSplit={() => onAddSplit(transactions[0].id)}\r\n            onDistributeRemainder={() =>\r\n              onDistributeRemainder(transactions[0].id)\r\n            }\r\n            canDistributeRemainder={emptyChildTransactions.length > 0}\r\n          />\r\n        ) : (\r\n          <Button\r\n            variant=\"primary\"\r\n            style={{ padding: '4px 10px' }}\r\n            onPress={onAdd}\r\n            data-testid=\"add-button\"\r\n          >\r\n            Add\r\n          </Button>\r\n        )}\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nfunction TransactionTableInner({\r\n  tableNavigator,\r\n  tableRef,\r\n  listContainerRef,\r\n  dateFormat = 'MM/dd/yyyy',\r\n  newNavigator,\r\n  renderEmpty,\r\n  onScroll,\r\n  ...props\r\n}) {\r\n  const containerRef = createRef();\r\n  const isAddingPrev = usePrevious(props.isAdding);\r\n  const [scrollWidth, setScrollWidth] = useState(0);\r\n\r\n  function saveScrollWidth(parent, child) {\r\n    const width = parent > 0 && child > 0 && parent - child;\r\n\r\n    setScrollWidth(!width ? 0 : width);\r\n  }\r\n\r\n  const onNavigateToTransferAccount = useCallback(\r\n    accountId => {\r\n      props.onCloseAddTransaction();\r\n      props.onNavigateToTransferAccount(accountId);\r\n    },\r\n    [props.onCloseAddTransaction, props.onNavigateToTransferAccount],\r\n  );\r\n\r\n  const onNavigateToSchedule = useCallback(\r\n    scheduleId => {\r\n      props.onCloseAddTransaction();\r\n      props.onNavigateToSchedule(scheduleId);\r\n    },\r\n    [props.onCloseAddTransaction, props.onNavigateToSchedule],\r\n  );\r\n\r\n  const onNotesTagClick = useCallback(\r\n    noteTag => {\r\n      props.onCloseAddTransaction();\r\n      props.onNotesTagClick(noteTag);\r\n    },\r\n    [props.onCloseAddTransaction, props.onNotesTagClick],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!isAddingPrev && props.isAdding) {\r\n      newNavigator.onEdit('temp', 'date');\r\n    }\r\n  }, [isAddingPrev, props.isAdding, newNavigator]);\r\n\r\n  // Don't render reconciled transactions if we're hiding them.\r\n  const transactionsToRender = useMemo(\r\n    () =>\r\n      props.showReconciled\r\n        ? props.transactions\r\n        : props.transactions.filter(t => !t.reconciled),\r\n    [props.transactions, props.showReconciled],\r\n  );\r\n\r\n  const renderRow = ({ item, index, editing }) => {\r\n    const {\r\n      transactions,\r\n      selectedItems,\r\n      accounts,\r\n      categoryGroups,\r\n      payees,\r\n      showCleared,\r\n      showAccount,\r\n      showCategory,\r\n      showBalances,\r\n      balances,\r\n      hideFraction,\r\n      isNew,\r\n      isMatched,\r\n      isExpanded,\r\n    } = props;\r\n\r\n    const trans = item;\r\n    const selected = selectedItems.has(trans.id);\r\n\r\n    const parent = props.transactionMap.get(trans.parent_id);\r\n    const isChildDeposit = parent && parent.amount > 0;\r\n    const expanded = isExpanded && isExpanded((parent || trans).id);\r\n\r\n    // For backwards compatibility, read the error of the transaction\r\n    // since in previous versions we stored it there. In the future we\r\n    // can simplify this to just the parent\r\n    const error = expanded\r\n      ? (parent && parent.error) || trans.error\r\n      : trans.error;\r\n\r\n    const hasSplitError =\r\n      (!expanded || isLastChild(transactions, index)) &&\r\n      error &&\r\n      error.type === 'SplitTransactionError';\r\n\r\n    const childTransactions = trans.is_parent\r\n      ? props.transactionsByParent[trans.id]\r\n      : null;\r\n    const emptyChildTransactions = props.transactionsByParent[\r\n      trans.is_parent ? trans.id : trans.parent_id\r\n    ]?.filter(t => t.amount === 0);\r\n\r\n    return (\r\n      <Transaction\r\n        allTransactions={props.transactions}\r\n        editing={editing}\r\n        transaction={trans}\r\n        transferAccountsByTransaction={props.transferAccountsByTransaction}\r\n        subtransactions={childTransactions}\r\n        showAccount={showAccount}\r\n        showCategory={showCategory}\r\n        showBalance={showBalances}\r\n        showCleared={showCleared}\r\n        selected={selected}\r\n        highlighted={false}\r\n        added={isNew?.(trans.id)}\r\n        expanded={isExpanded?.(trans.id)}\r\n        matched={isMatched?.(trans.id)}\r\n        showZeroInDeposit={isChildDeposit}\r\n        balance={balances?.[trans.id]?.balance}\r\n        focusedField={editing && tableNavigator.focusedField}\r\n        accounts={accounts}\r\n        categoryGroups={categoryGroups}\r\n        payees={payees}\r\n        dateFormat={dateFormat}\r\n        hideFraction={hideFraction}\r\n        onEdit={tableNavigator.onEdit}\r\n        onSave={props.onSave}\r\n        onDelete={props.onDelete}\r\n        onDuplicate={props.onDuplicate}\r\n        onLinkSchedule={props.onLinkSchedule}\r\n        onUnlinkSchedule={props.onUnlinkSchedule}\r\n        onCreateRule={props.onCreateRule}\r\n        onScheduleAction={props.onScheduleAction}\r\n        onMakeAsNonSplitTransactions={props.onMakeAsNonSplitTransactions}\r\n        onSplit={props.onSplit}\r\n        onManagePayees={props.onManagePayees}\r\n        onCreatePayee={props.onCreatePayee}\r\n        onToggleSplit={props.onToggleSplit}\r\n        onNavigateToTransferAccount={onNavigateToTransferAccount}\r\n        onNavigateToSchedule={onNavigateToSchedule}\r\n        onNotesTagClick={onNotesTagClick}\r\n        splitError={\r\n          hasSplitError && (\r\n            <TransactionError\r\n              error={error}\r\n              isDeposit={isChildDeposit}\r\n              onAddSplit={() => props.onAddSplit(trans.id)}\r\n              onDistributeRemainder={() =>\r\n                props.onDistributeRemainder(trans.id)\r\n              }\r\n              canDistributeRemainder={emptyChildTransactions.length > 0}\r\n            />\r\n          )\r\n        }\r\n        listContainerRef={listContainerRef}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <View\r\n      innerRef={containerRef}\r\n      style={{\r\n        flex: 1,\r\n        cursor: 'default',\r\n        ...props.style,\r\n      }}\r\n    >\r\n      <View>\r\n        <TransactionHeader\r\n          hasSelected={props.selectedItems.size > 0}\r\n          showAccount={props.showAccount}\r\n          showCategory={props.showCategory}\r\n          showBalance={props.showBalances}\r\n          showCleared={props.showCleared}\r\n          scrollWidth={scrollWidth}\r\n          onSort={props.onSort}\r\n          ascDesc={props.ascDesc}\r\n          field={props.sortField}\r\n        />\r\n\r\n        {props.isAdding && (\r\n          <View\r\n            {...newNavigator.getNavigatorProps({\r\n              onKeyDown: e => props.onCheckNewEnter(e),\r\n            })}\r\n          >\r\n            <NewTransaction\r\n              transactions={props.newTransactions}\r\n              transferAccountsByTransaction={\r\n                props.transferAccountsByTransaction\r\n              }\r\n              editingTransaction={newNavigator.editingId}\r\n              focusedField={newNavigator.focusedField}\r\n              accounts={props.accounts}\r\n              categoryGroups={props.categoryGroups}\r\n              payees={props.payees || []}\r\n              showAccount={props.showAccount}\r\n              showCategory={props.showCategory}\r\n              showBalance={props.showBalances}\r\n              showCleared={props.showCleared}\r\n              dateFormat={dateFormat}\r\n              hideFraction={props.hideFraction}\r\n              onClose={props.onCloseAddTransaction}\r\n              onAdd={props.onAddTemporary}\r\n              onAddSplit={props.onAddSplit}\r\n              onSplit={props.onSplit}\r\n              onEdit={newNavigator.onEdit}\r\n              onSave={props.onSave}\r\n              onDelete={props.onDelete}\r\n              onManagePayees={props.onManagePayees}\r\n              onCreatePayee={props.onCreatePayee}\r\n              onNavigateToTransferAccount={onNavigateToTransferAccount}\r\n              onNavigateToSchedule={onNavigateToSchedule}\r\n              onNotesTagClick={onNotesTagClick}\r\n              onDistributeRemainder={props.onDistributeRemainder}\r\n              balance={\r\n                props.transactions?.length > 0\r\n                  ? props.balances?.[props.transactions[0]?.id]?.balance\r\n                  : 0\r\n              }\r\n            />\r\n          </View>\r\n        )}\r\n      </View>\r\n      {/*// * On Windows, makes the scrollbar always appear\r\n         //   the full height of the container ??? */}\r\n\r\n      <View\r\n        style={{ flex: 1, overflow: 'hidden' }}\r\n        data-testid=\"transaction-table\"\r\n      >\r\n        <Table\r\n          navigator={tableNavigator}\r\n          ref={tableRef}\r\n          listContainerRef={listContainerRef}\r\n          items={transactionsToRender}\r\n          renderItem={renderRow}\r\n          renderEmpty={renderEmpty}\r\n          loadMore={props.loadMoreTransactions}\r\n          isSelected={id => props.selectedItems.has(id)}\r\n          onKeyDown={e => props.onCheckEnter(e)}\r\n          onScroll={onScroll}\r\n          saveScrollWidth={saveScrollWidth}\r\n        />\r\n\r\n        {props.isAdding && (\r\n          <div\r\n            key=\"shadow\"\r\n            style={{\r\n              position: 'absolute',\r\n              top: -20,\r\n              left: 0,\r\n              right: 0,\r\n              height: 20,\r\n              backgroundColor: theme.errorText,\r\n              boxShadow: '0 0 6px rgba(0, 0, 0, .20)',\r\n            }}\r\n          />\r\n        )}\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport const TransactionTable = forwardRef((props, ref) => {\r\n  const [newTransactions, setNewTransactions] = useState(null);\r\n  const [prevIsAdding, setPrevIsAdding] = useState(false);\r\n  const splitsExpanded = useSplitsExpanded();\r\n  const prevSplitsExpanded = useRef(null);\r\n\r\n  const tableRef = useRef(null);\r\n  const listContainerRef = useRef(null);\r\n  const mergedRef = useMergedRefs(tableRef, ref);\r\n\r\n  const transactionsWithExpandedSplits = useMemo(() => {\r\n    let result;\r\n    if (splitsExpanded.state.transitionId != null) {\r\n      const index = props.transactions.findIndex(\r\n        t => t.id === splitsExpanded.state.transitionId,\r\n      );\r\n      result = props.transactions.filter((t, idx) => {\r\n        if (t.parent_id) {\r\n          if (idx >= index) {\r\n            return splitsExpanded.expanded(t.parent_id);\r\n          } else if (prevSplitsExpanded.current) {\r\n            return prevSplitsExpanded.current.expanded(t.parent_id);\r\n          }\r\n        }\r\n        return true;\r\n      });\r\n    } else {\r\n      if (\r\n        prevSplitsExpanded.current &&\r\n        prevSplitsExpanded.current.state.transitionId != null\r\n      ) {\r\n        tableRef.current.anchor();\r\n        tableRef.current.setRowAnimation(false);\r\n      }\r\n      prevSplitsExpanded.current = splitsExpanded;\r\n\r\n      result = props.transactions.filter(t => {\r\n        if (t.parent_id) {\r\n          return splitsExpanded.expanded(t.parent_id);\r\n        }\r\n        return true;\r\n      });\r\n    }\r\n\r\n    prevSplitsExpanded.current = splitsExpanded;\r\n    return result;\r\n  }, [props.transactions, splitsExpanded]);\r\n  const transactionMap = useMemo(() => {\r\n    return new Map(\r\n      transactionsWithExpandedSplits.map(trans => [trans.id, trans]),\r\n    );\r\n  }, [transactionsWithExpandedSplits]);\r\n  const transactionsByParent = useMemo(() => {\r\n    return props.transactions.reduce((acc, trans) => {\r\n      if (trans.is_child) {\r\n        acc[trans.parent_id] = [...(acc[trans.parent_id] ?? []), trans];\r\n      }\r\n      return acc;\r\n    }, {});\r\n  }, [props.transactions]);\r\n\r\n  const transferAccountsByTransaction = useMemo(() => {\r\n    if (!props.accounts) {\r\n      return {};\r\n    }\r\n    const accounts = getAccountsById(props.accounts);\r\n    const payees = getPayeesById(props.payees);\r\n\r\n    return Object.fromEntries(\r\n      props.transactions.map(t => {\r\n        if (!props.accounts) {\r\n          return [t.id, null];\r\n        }\r\n\r\n        const payee = t.payee && payees[t.payee];\r\n        let transferAccount;\r\n        if (t._inverse) {\r\n          transferAccount = t.account && accounts[t.account];\r\n        } else {\r\n          transferAccount =\r\n            payee?.transfer_acct && accounts[payee.transfer_acct];\r\n        }\r\n        return [t.id, transferAccount || null];\r\n      }),\r\n    );\r\n  }, [props.transactions, props.payees, props.accounts]);\r\n\r\n  useEffect(() => {\r\n    // If it's anchored that means we've also disabled animations. To\r\n    // reduce the chance for side effect collision, only do this if\r\n    // we've actually anchored it\r\n    if (tableRef.current.isAnchored()) {\r\n      tableRef.current.unanchor();\r\n      tableRef.current.setRowAnimation(true);\r\n    }\r\n  }, [prevSplitsExpanded.current]);\r\n\r\n  const newNavigator = useTableNavigator(newTransactions, getFields);\r\n  const tableNavigator = useTableNavigator(\r\n    transactionsWithExpandedSplits,\r\n    getFields,\r\n  );\r\n  const shouldAdd = useRef(false);\r\n  const latestState = useRef({ newTransactions, newNavigator, tableNavigator });\r\n  const savePending = useRef(false);\r\n  const afterSaveFunc = useRef(false);\r\n  const [_, forceRerender] = useState({});\r\n  const selectedItems = useSelectedItems();\r\n\r\n  useLayoutEffect(() => {\r\n    latestState.current = {\r\n      newTransactions,\r\n      newNavigator,\r\n      tableNavigator,\r\n      transactions: props.transactions,\r\n    };\r\n  });\r\n\r\n  // Derive new transactions from the `isAdding` prop\r\n  if (prevIsAdding !== props.isAdding) {\r\n    if (!prevIsAdding && props.isAdding) {\r\n      setNewTransactions(\r\n        makeTemporaryTransactions(\r\n          props.currentAccountId,\r\n          props.currentCategoryId,\r\n        ),\r\n      );\r\n    }\r\n    setPrevIsAdding(props.isAdding);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (shouldAdd.current) {\r\n      if (newTransactions[0].account == null) {\r\n        props.addNotification({\r\n          type: 'error',\r\n          message: 'Account is a required field',\r\n        });\r\n        newNavigator.onEdit('temp', 'account');\r\n      } else {\r\n        const transactions = latestState.current.newTransactions;\r\n        const lastDate = transactions.length > 0 ? transactions[0].date : null;\r\n        setNewTransactions(\r\n          makeTemporaryTransactions(\r\n            props.currentAccountId,\r\n            props.currentCategoryId,\r\n            lastDate,\r\n          ),\r\n        );\r\n        newNavigator.onEdit('temp', 'date');\r\n        props.onAdd(transactions);\r\n      }\r\n      shouldAdd.current = false;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (savePending.current && afterSaveFunc.current) {\r\n      afterSaveFunc.current(props);\r\n      afterSaveFunc.current = null;\r\n    }\r\n\r\n    savePending.current = false;\r\n  }, [newTransactions, props.transactions]);\r\n\r\n  function getFields(item) {\r\n    let fields = [\r\n      'select',\r\n      'date',\r\n      'account',\r\n      'payee',\r\n      'notes',\r\n      'category',\r\n      'debit',\r\n      'credit',\r\n      'cleared',\r\n    ];\r\n\r\n    fields = item.is_child\r\n      ? ['select', 'payee', 'notes', 'category', 'debit', 'credit']\r\n      : fields.filter(\r\n          f =>\r\n            (props.showAccount || f !== 'account') &&\r\n            (props.showCategory || f !== 'category'),\r\n        );\r\n\r\n    if (isPreviewId(item.id)) {\r\n      fields = ['select'];\r\n    }\r\n    if (isTemporaryId(item.id)) {\r\n      // You can't focus the select/delete button of temporary\r\n      // transactions\r\n      fields = fields.slice(1);\r\n    }\r\n\r\n    return fields;\r\n  }\r\n\r\n  function afterSave(func) {\r\n    if (savePending.current) {\r\n      afterSaveFunc.current = func;\r\n    } else {\r\n      func(props);\r\n    }\r\n  }\r\n\r\n  function onCheckNewEnter(e) {\r\n    if (e.key === 'Enter') {\r\n      if (e.metaKey) {\r\n        e.stopPropagation();\r\n        onAddTemporary();\r\n      } else if (!e.shiftKey) {\r\n        function getLastTransaction(state) {\r\n          const { newTransactions } = state.current;\r\n          return newTransactions[newTransactions.length - 1];\r\n        }\r\n\r\n        // Right now, the table navigator does some funky stuff with\r\n        // focus, so we want to stop it from handling this event. We\r\n        // still want enter to move up/down normally, so we only stop\r\n        // it if we are on the last transaction (where we are about to\r\n        // do some logic). I don't like this.\r\n        if (newNavigator.editingId === getLastTransaction(latestState).id) {\r\n          e.stopPropagation();\r\n        }\r\n\r\n        afterSave(() => {\r\n          const lastTransaction = getLastTransaction(latestState);\r\n          const isSplit =\r\n            lastTransaction.parent_id || lastTransaction.is_parent;\r\n\r\n          if (\r\n            latestState.current.newTransactions[0].error &&\r\n            newNavigator.editingId === lastTransaction.id\r\n          ) {\r\n            // add split\r\n            onAddSplit(lastTransaction.id);\r\n          } else if (\r\n            newNavigator.editingId === lastTransaction.id &&\r\n            (!isSplit || !lastTransaction.error)\r\n          ) {\r\n            onAddTemporary();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  function onCheckEnter(e) {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      const { editingId: id, focusedField } = tableNavigator;\r\n\r\n      afterSave(() => {\r\n        const transactions = latestState.current.transactions;\r\n        const idx = transactions.findIndex(t => t.id === id);\r\n        const parent = transactions.find(\r\n          t => t.id === transactions[idx]?.parent_id,\r\n        );\r\n\r\n        if (\r\n          isLastChild(transactions, idx) &&\r\n          parent &&\r\n          parent.error &&\r\n          focusedField !== 'select'\r\n        ) {\r\n          e.stopPropagation();\r\n          onAddSplit(id);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  const onAddTemporary = useCallback(() => {\r\n    shouldAdd.current = true;\r\n    // A little hacky - this forces a rerender which will cause the\r\n    // effect we want to run. We have to wait for all updates to be\r\n    // committed (the input could still be saving a value).\r\n    forceRerender({});\r\n  }, [props.onAdd, newNavigator.onEdit]);\r\n\r\n  const onSave = useCallback(\r\n    async (transaction, subtransactions = null, updatedFieldName = null) => {\r\n      savePending.current = true;\r\n\r\n      let groupedTransaction = subtransactions\r\n        ? groupTransaction([transaction, ...subtransactions])\r\n        : transaction;\r\n\r\n      if (isTemporaryId(transaction.id)) {\r\n        if (props.onApplyRules) {\r\n          groupedTransaction = await props.onApplyRules(\r\n            groupedTransaction,\r\n            updatedFieldName,\r\n          );\r\n        }\r\n\r\n        const newTrans = latestState.current.newTransactions;\r\n        // Future refactor: we shouldn't need to iterate through the entire\r\n        // transaction list to ungroup, just the new transactions.\r\n        setNewTransactions(\r\n          ungroupTransactions(\r\n            updateTransaction(newTrans, groupedTransaction).data,\r\n          ),\r\n        );\r\n      } else {\r\n        props.onSave(groupedTransaction);\r\n      }\r\n    },\r\n    [props.onSave],\r\n  );\r\n\r\n  const onDelete = useCallback(id => {\r\n    const temporary = isTemporaryId(id);\r\n\r\n    if (temporary) {\r\n      const newTrans = latestState.current.newTransactions;\r\n\r\n      if (id === newTrans[0].id) {\r\n        // You can never delete the parent new transaction\r\n        return;\r\n      }\r\n\r\n      setNewTransactions(deleteTransaction(newTrans, id).data);\r\n    } else {\r\n      props.onBatchDelete([id]);\r\n    }\r\n  }, []);\r\n\r\n  const onDuplicate = useCallback(id => {\r\n    props.onBatchDuplicate([id]);\r\n  }, []);\r\n\r\n  const onLinkSchedule = useCallback(id => {\r\n    props.onBatchLinkSchedule([id]);\r\n  }, []);\r\n  const onUnlinkSchedule = useCallback(id => {\r\n    props.onBatchUnlinkSchedule([id]);\r\n  }, []);\r\n  const onCreateRule = useCallback(id => {\r\n    props.onCreateRule([id]);\r\n  }, []);\r\n  const onScheduleAction = useCallback((action, id) => {\r\n    props.onScheduleAction(action, [id]);\r\n  }, []);\r\n  const onMakeAsNonSplitTransactions = useCallback(id => {\r\n    props.onMakeAsNonSplitTransactions([id]);\r\n  }, []);\r\n\r\n  const onSplit = useMemo(() => {\r\n    return id => {\r\n      if (isTemporaryId(id)) {\r\n        const { newNavigator } = latestState.current;\r\n        const newTrans = latestState.current.newTransactions;\r\n        const { data, diff } = splitTransaction(newTrans, id);\r\n        setNewTransactions(data);\r\n\r\n        // Jump next to \"debit\" field if it is empty\r\n        // Otherwise jump to the same field as before, but downwards\r\n        // to the added split transaction\r\n        if (newTrans[0].amount === null) {\r\n          newNavigator.onEdit(newTrans[0].id, 'debit');\r\n        } else {\r\n          newNavigator.onEdit(\r\n            diff.added[0].id,\r\n            latestState.current.newNavigator.focusedField,\r\n          );\r\n        }\r\n      } else {\r\n        const trans = latestState.current.transactions.find(t => t.id === id);\r\n        const newId = props.onSplit(id);\r\n\r\n        splitsExpanded.dispatch({ type: 'open-split', id: trans.id });\r\n\r\n        const { tableNavigator } = latestState.current;\r\n        if (trans.amount === null) {\r\n          tableNavigator.onEdit(trans.id, 'debit');\r\n        } else {\r\n          tableNavigator.onEdit(newId, tableNavigator.focusedField);\r\n        }\r\n      }\r\n    };\r\n  }, [props.onSplit, splitsExpanded.dispatch]);\r\n\r\n  const onAddSplit = useCallback(\r\n    id => {\r\n      if (isTemporaryId(id)) {\r\n        const newTrans = latestState.current.newTransactions;\r\n        const { data, diff } = addSplitTransaction(newTrans, id);\r\n        setNewTransactions(data);\r\n        newNavigator.onEdit(\r\n          diff.added[0].id,\r\n          latestState.current.newNavigator.focusedField,\r\n        );\r\n      } else {\r\n        const newId = props.onAddSplit(id);\r\n        tableNavigator.onEdit(\r\n          newId,\r\n          latestState.current.tableNavigator.focusedField,\r\n        );\r\n      }\r\n    },\r\n    [props.onAddSplit],\r\n  );\r\n\r\n  const onDistributeRemainder = useCallback(\r\n    async id => {\r\n      const { transactions, tableNavigator, newTransactions } =\r\n        latestState.current;\r\n\r\n      const targetTransactions = isTemporaryId(id)\r\n        ? newTransactions\r\n        : transactions;\r\n      const transaction = targetTransactions.find(t => t.id === id);\r\n\r\n      const parentTransaction = transaction.is_parent\r\n        ? transaction\r\n        : targetTransactions.find(t => t.id === transaction.parent_id);\r\n\r\n      const siblingTransactions = targetTransactions.filter(\r\n        t =>\r\n          t.parent_id ===\r\n          (transaction.is_parent ? transaction.id : transaction.parent_id),\r\n      );\r\n\r\n      const emptyTransactions = siblingTransactions.filter(t => t.amount === 0);\r\n\r\n      const remainingAmount =\r\n        parentTransaction.amount -\r\n        siblingTransactions.reduce((acc, t) => acc + t.amount, 0);\r\n\r\n      const amountPerTransaction = Math.floor(\r\n        remainingAmount / emptyTransactions.length,\r\n      );\r\n      let remainingCents =\r\n        remainingAmount - amountPerTransaction * emptyTransactions.length;\r\n\r\n      const amounts = new Array(emptyTransactions.length).fill(\r\n        amountPerTransaction,\r\n      );\r\n\r\n      for (const amountIndex in amounts) {\r\n        if (remainingCents === 0) break;\r\n\r\n        amounts[amountIndex] += 1;\r\n        remainingCents--;\r\n      }\r\n\r\n      if (isTemporaryId(id)) {\r\n        newNavigator.onEdit(null);\r\n      } else {\r\n        tableNavigator.onEdit(null);\r\n      }\r\n\r\n      for (const transactionIndex in emptyTransactions) {\r\n        await onSave({\r\n          ...emptyTransactions[transactionIndex],\r\n          amount: amounts[transactionIndex],\r\n        });\r\n      }\r\n    },\r\n    [latestState],\r\n  );\r\n\r\n  function onCloseAddTransaction() {\r\n    setNewTransactions(\r\n      makeTemporaryTransactions(\r\n        props.currentAccountId,\r\n        props.currentCategoryId,\r\n      ),\r\n    );\r\n    props.onCloseAddTransaction();\r\n  }\r\n\r\n  const onToggleSplit = useCallback(\r\n    id => splitsExpanded.dispatch({ type: 'toggle-split', id }),\r\n    [splitsExpanded.dispatch],\r\n  );\r\n\r\n  return (\r\n    <TransactionTableInner\r\n      tableRef={mergedRef}\r\n      listContainerRef={listContainerRef}\r\n      {...props}\r\n      transactions={transactionsWithExpandedSplits}\r\n      transactionMap={transactionMap}\r\n      transactionsByParent={transactionsByParent}\r\n      transferAccountsByTransaction={transferAccountsByTransaction}\r\n      selectedItems={selectedItems}\r\n      isExpanded={splitsExpanded.expanded}\r\n      onSave={onSave}\r\n      onDelete={onDelete}\r\n      onDuplicate={onDuplicate}\r\n      onLinkSchedule={onLinkSchedule}\r\n      onUnlinkSchedule={onUnlinkSchedule}\r\n      onCreateRule={onCreateRule}\r\n      onScheduleAction={onScheduleAction}\r\n      onMakeAsNonSplitTransactions={onMakeAsNonSplitTransactions}\r\n      onSplit={onSplit}\r\n      onCheckNewEnter={onCheckNewEnter}\r\n      onCheckEnter={onCheckEnter}\r\n      onAddTemporary={onAddTemporary}\r\n      onAddSplit={onAddSplit}\r\n      onDistributeRemainder={onDistributeRemainder}\r\n      onCloseAddTransaction={onCloseAddTransaction}\r\n      onToggleSplit={onToggleSplit}\r\n      newTransactions={newTransactions}\r\n      tableNavigator={tableNavigator}\r\n      newNavigator={newNavigator}\r\n    />\r\n  );\r\n});\r\n\r\nTransactionTable.displayName = 'TransactionTable';\r\n\r\nfunction notesTagFormatter(notes, onNotesTagClick) {\r\n  const words = notes.split(' ');\r\n  return (\r\n    <>\r\n      {words.map((word, i, arr) => {\r\n        const separator = arr.length - 1 === i ? '' : ' ';\r\n        if (word.includes('#') && word.length > 1) {\r\n          let lastEmptyTag = -1;\r\n          // Treat tags in a single word as separate tags.\r\n          // #tag1#tag2 => (#tag1)(#tag2)\r\n          // not-a-tag#tag2#tag3 => not-a-tag(#tag2)(#tag3)\r\n          return word.split('#').map((tag, ti) => {\r\n            if (ti === 0) {\r\n              return tag;\r\n            }\r\n\r\n            if (!tag) {\r\n              lastEmptyTag = ti;\r\n              return '#';\r\n            }\r\n\r\n            if (lastEmptyTag === ti - 1) {\r\n              return `${tag} `;\r\n            }\r\n            lastEmptyTag = -1;\r\n\r\n            const validTag = `#${tag}`;\r\n            return (\r\n              <span key={`${validTag}${ti}`}>\r\n                <Button\r\n                  variant=\"bare\"\r\n                  key={i}\r\n                  className={css({\r\n                    display: 'inline-flex',\r\n                    padding: '3px 7px',\r\n                    borderRadius: 16,\r\n                    userSelect: 'none',\r\n                    backgroundColor: theme.noteTagBackground,\r\n                    color: theme.noteTagText,\r\n                    cursor: 'pointer',\r\n                    '&[data-hovered]': {\r\n                      backgroundColor: theme.noteTagBackgroundHover,\r\n                    },\r\n                  })}\r\n                  onPress={() => {\r\n                    onNotesTagClick?.(validTag);\r\n                  }}\r\n                >\r\n                  {validTag}\r\n                </Button>\r\n                {separator}\r\n              </span>\r\n            );\r\n          });\r\n        }\r\n        return `${word}${separator}`;\r\n      })}\r\n    </>\r\n  );\r\n}\r\n","import React, { useRef, useCallback, useLayoutEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { pushModal } from 'loot-core/client/actions';\r\nimport { send } from 'loot-core/src/platform/client/fetch';\r\nimport {\r\n  splitTransaction,\r\n  updateTransaction,\r\n  addSplitTransaction,\r\n  realizeTempTransactions,\r\n  applyTransactionDiff,\r\n} from 'loot-core/src/shared/transactions';\r\nimport { getChangedValues, applyChanges } from 'loot-core/src/shared/util';\r\n\r\nimport { useNavigate } from '../../hooks/useNavigate';\r\nimport { theme } from '../../style';\r\n\r\nimport { TransactionTable } from './TransactionsTable';\r\n\r\n// When data changes, there are two ways to update the UI:\r\n//\r\n// * Optimistic updates: we apply the needed updates to local data\r\n//   and rerender immediately, and send off the changes to the\r\n//   server. Currently, it assumes the server request is successful.\r\n//   If it fails the user will see a generic error which isn't\r\n//   great, but since the server is local a failure is very\r\n//   unlikely. Still, we should notify errors better.\r\n//\r\n// * A full refetch and rerender: this is needed when applying\r\n//   updates locally is too complex. Usually this happens when\r\n//   changing a field that data is sorted on: we're not going\r\n//   to resort the data in memory, we want to rely on the database\r\n//   for that. So we need to do a full refresh.\r\n//\r\n// When writing updates, it's up to you to decide which one to do.\r\n// Optimistic updates feel snappy, but they might show data\r\n// differently than a full refresh. It's up to you to decide which\r\n// one to use when doing updates.\r\n\r\nasync function saveDiff(diff) {\r\n  const remoteUpdates = await send('transactions-batch-update', {\r\n    ...diff,\r\n    learnCategories: true,\r\n  });\r\n  if (remoteUpdates.length > 0) {\r\n    return { updates: remoteUpdates };\r\n  }\r\n  return {};\r\n}\r\n\r\nasync function saveDiffAndApply(diff, changes, onChange) {\r\n  const remoteDiff = await saveDiff(diff);\r\n  onChange(\r\n    applyTransactionDiff(changes.newTransaction, remoteDiff),\r\n    applyChanges(remoteDiff, changes.data),\r\n  );\r\n}\r\n\r\nexport function TransactionList({\r\n  tableRef,\r\n  transactions,\r\n  allTransactions,\r\n  loadMoreTransactions,\r\n  account,\r\n  accounts,\r\n  category,\r\n  categoryGroups,\r\n  payees,\r\n  balances,\r\n  showBalances,\r\n  showReconciled,\r\n  showCleared,\r\n  showAccount,\r\n  headerContent,\r\n  isAdding,\r\n  isNew,\r\n  isMatched,\r\n  isFiltered,\r\n  dateFormat,\r\n  hideFraction,\r\n  addNotification,\r\n  renderEmpty,\r\n  onSort,\r\n  sortField,\r\n  ascDesc,\r\n  onChange,\r\n  onRefetch,\r\n  onCloseAddTransaction,\r\n  onCreatePayee,\r\n  onApplyFilter,\r\n  onBatchDelete,\r\n  onBatchDuplicate,\r\n  onBatchLinkSchedule,\r\n  onBatchUnlinkSchedule,\r\n  onCreateRule,\r\n  onScheduleAction,\r\n  onMakeAsNonSplitTransactions,\r\n}) {\r\n  const dispatch = useDispatch();\r\n  const transactionsLatest = useRef();\r\n  const navigate = useNavigate();\r\n\r\n  useLayoutEffect(() => {\r\n    transactionsLatest.current = transactions;\r\n  }, [transactions]);\r\n\r\n  const onAdd = useCallback(async newTransactions => {\r\n    newTransactions = realizeTempTransactions(newTransactions);\r\n\r\n    await saveDiff({ added: newTransactions });\r\n    onRefetch();\r\n  }, []);\r\n\r\n  const onSave = useCallback(async transaction => {\r\n    const changes = updateTransaction(transactionsLatest.current, transaction);\r\n    transactionsLatest.current = changes.data;\r\n\r\n    if (changes.diff.updated.length > 0) {\r\n      const dateChanged = !!changes.diff.updated[0].date;\r\n      if (dateChanged) {\r\n        // Make sure it stays at the top of the list of transactions\r\n        // for that date\r\n        changes.diff.updated[0].sort_order = Date.now();\r\n        await saveDiff(changes.diff);\r\n        onRefetch();\r\n      } else {\r\n        onChange(changes.newTransaction, changes.data);\r\n        saveDiffAndApply(changes.diff, changes, onChange);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const onAddSplit = useCallback(id => {\r\n    const changes = addSplitTransaction(transactionsLatest.current, id);\r\n    onChange(changes.newTransaction, changes.data);\r\n    saveDiffAndApply(changes.diff, changes, onChange);\r\n    return changes.diff.added[0].id;\r\n  }, []);\r\n\r\n  const onSplit = useCallback(id => {\r\n    const changes = splitTransaction(transactionsLatest.current, id);\r\n    onChange(changes.newTransaction, changes.data);\r\n    saveDiffAndApply(changes.diff, changes, onChange);\r\n    return changes.diff.added[0].id;\r\n  }, []);\r\n\r\n  const onApplyRules = useCallback(\r\n    async (transaction, updatedFieldName = null) => {\r\n      const afterRules = await send('rules-run', { transaction });\r\n      const diff = getChangedValues(transaction, afterRules);\r\n\r\n      const newTransaction = { ...transaction };\r\n      if (diff) {\r\n        Object.keys(diff).forEach(field => {\r\n          if (\r\n            newTransaction[field] == null ||\r\n            newTransaction[field] === '' ||\r\n            newTransaction[field] === 0 ||\r\n            newTransaction[field] === false\r\n          ) {\r\n            newTransaction[field] = diff[field];\r\n          }\r\n        });\r\n\r\n        // When a rule updates a parent transaction, overwrite all changes to the current field in subtransactions.\r\n        if (\r\n          transaction.is_parent &&\r\n          diff.subtransactions !== undefined &&\r\n          updatedFieldName !== null\r\n        ) {\r\n          newTransaction.subtransactions = diff.subtransactions.map(\r\n            (st, idx) => ({\r\n              ...(newTransaction.subtransactions[idx] || st),\r\n              ...(st[updatedFieldName] != null && {\r\n                [updatedFieldName]: st[updatedFieldName],\r\n              }),\r\n            }),\r\n          );\r\n        }\r\n      }\r\n      return newTransaction;\r\n    },\r\n    [],\r\n  );\r\n\r\n  const onManagePayees = useCallback(id => {\r\n    navigate('/payees', { state: { selectedPayee: id } });\r\n  });\r\n\r\n  const onNavigateToTransferAccount = useCallback(accountId => {\r\n    navigate(`/accounts/${accountId}`);\r\n  });\r\n\r\n  const onNavigateToSchedule = useCallback(scheduleId => {\r\n    dispatch(pushModal('schedule-edit', { id: scheduleId }));\r\n  });\r\n\r\n  const onNotesTagClick = useCallback(tag => {\r\n    onApplyFilter({\r\n      field: 'notes',\r\n      op: 'hasTags',\r\n      value: tag,\r\n      type: 'string',\r\n    });\r\n  });\r\n\r\n  return (\r\n    <TransactionTable\r\n      ref={tableRef}\r\n      transactions={allTransactions}\r\n      loadMoreTransactions={loadMoreTransactions}\r\n      accounts={accounts}\r\n      categoryGroups={categoryGroups}\r\n      payees={payees}\r\n      balances={balances}\r\n      showBalances={showBalances}\r\n      showReconciled={showReconciled}\r\n      showCleared={showCleared}\r\n      showAccount={showAccount}\r\n      showCategory={true}\r\n      currentAccountId={account && account.id}\r\n      currentCategoryId={category && category.id}\r\n      isAdding={isAdding}\r\n      isNew={isNew}\r\n      isMatched={isMatched}\r\n      isFiltered={isFiltered}\r\n      dateFormat={dateFormat}\r\n      hideFraction={hideFraction}\r\n      addNotification={addNotification}\r\n      headerContent={headerContent}\r\n      renderEmpty={renderEmpty}\r\n      onSave={onSave}\r\n      onApplyRules={onApplyRules}\r\n      onSplit={onSplit}\r\n      onCloseAddTransaction={onCloseAddTransaction}\r\n      onAdd={onAdd}\r\n      onAddSplit={onAddSplit}\r\n      onManagePayees={onManagePayees}\r\n      onCreatePayee={onCreatePayee}\r\n      style={{ backgroundColor: theme.tableBackground }}\r\n      onNavigateToTransferAccount={onNavigateToTransferAccount}\r\n      onNavigateToSchedule={onNavigateToSchedule}\r\n      onNotesTagClick={onNotesTagClick}\r\n      onSort={onSort}\r\n      sortField={sortField}\r\n      ascDesc={ascDesc}\r\n      onBatchDelete={onBatchDelete}\r\n      onBatchDuplicate={onBatchDuplicate}\r\n      onBatchLinkSchedule={onBatchLinkSchedule}\r\n      onBatchUnlinkSchedule={onBatchUnlinkSchedule}\r\n      onCreateRule={onCreateRule}\r\n      onScheduleAction={onScheduleAction}\r\n      onMakeAsNonSplitTransactions={onMakeAsNonSplitTransactions}\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Menu } from '../common/Menu';\n\nimport { type SavedFilter } from './SavedFilterMenuButton';\n\nexport function FilterMenu({\n  filterId,\n  onFilterMenuSelect,\n}: {\n  filterId?: SavedFilter;\n  onFilterMenuSelect: (item: string) => void;\n}) {\n  const { t } = useTranslation();\n\n  return (\n    <Menu\n      onMenuSelect={item => {\n        onFilterMenuSelect(item);\n      }}\n      items={\n        !filterId?.id\n          ? [\n              { name: 'save-filter', text: t('Save new filter') },\n              { name: 'clear-filter', text: t('Clear all conditions') },\n            ]\n          : filterId?.id !== null && filterId?.status === 'saved'\n            ? [\n                { name: 'rename-filter', text: t('Rename') },\n                { name: 'delete-filter', text: t('Delete') },\n                Menu.line,\n                {\n                  name: 'save-filter',\n                  text: t('Save new filter'),\n                  disabled: true,\n                },\n                { name: 'clear-filter', text: t('Clear all conditions') },\n              ]\n            : [\n                { name: 'rename-filter', text: t('Rename') },\n                { name: 'update-filter', text: t('Update condtions') },\n                { name: 'reload-filter', text: t('Revert changes') },\n                { name: 'delete-filter', text: t('Delete') },\n                Menu.line,\n                { name: 'save-filter', text: t('Save new filter') },\n                { name: 'clear-filter', text: t('Clear all conditions') },\n              ]\n      }\n    />\n  );\n}\n","import React, { useRef, useEffect } from 'react';\nimport { Form } from 'react-aria-components';\nimport { useTranslation } from 'react-i18next';\n\nimport { theme } from '../../style';\nimport { Button } from '../common/Button2';\nimport { Input } from '../common/Input';\nimport { Stack } from '../common/Stack';\nimport { Text } from '../common/Text';\nimport { FormField, FormLabel } from '../forms';\n\nexport function NameFilter({\n  menuItem,\n  name,\n  setName,\n  adding,\n  onAddUpdate,\n  err,\n}: {\n  menuItem: string;\n  name: string;\n  setName: (item: string) => void;\n  adding: boolean;\n  onAddUpdate: () => void;\n  err: string | null;\n}) {\n  const { t } = useTranslation();\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <>\n      {menuItem !== 'update-filter' && (\n        <Form\n          onSubmit={e => {\n            e.preventDefault();\n            onAddUpdate();\n          }}\n        >\n          <Stack\n            direction=\"row\"\n            justify=\"flex-end\"\n            align=\"center\"\n            style={{ padding: 10 }}\n          >\n            <FormField style={{ flex: 1 }}>\n              <FormLabel\n                title={t('Filter Name')}\n                htmlFor=\"name-field\"\n                style={{ userSelect: 'none' }}\n              />\n              <Input\n                id=\"name-field\"\n                inputRef={inputRef}\n                defaultValue={name || ''}\n                onChangeValue={setName}\n              />\n            </FormField>\n            <Button variant=\"primary\" type=\"submit\" style={{ marginTop: 18 }}>\n              {adding ? t('Add') : t('Update')}\n            </Button>\n          </Stack>\n        </Form>\n      )}\n      {err && (\n        <Stack direction=\"row\" align=\"center\" style={{ padding: 10 }}>\n          <Text style={{ color: theme.errorText }}>{err}</Text>\n        </Stack>\n      )}\n    </>\n  );\n}\n","import React, { useRef, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport { send, sendCatch } from 'loot-core/src/platform/client/fetch';\nimport { type TransactionFilterEntity } from 'loot-core/types/models';\nimport { type RuleConditionEntity } from 'loot-core/types/models/rule';\n\nimport { SvgExpandArrow } from '../../icons/v0';\nimport { Button } from '../common/Button2';\nimport { Popover } from '../common/Popover';\nimport { Text } from '../common/Text';\nimport { View } from '../common/View';\n\nimport { FilterMenu } from './FilterMenu';\nimport { NameFilter } from './NameFilter';\n\nexport type SavedFilter = {\n  conditions?: RuleConditionEntity[];\n  conditionsOp?: 'and' | 'or';\n  id?: string;\n  name: string;\n  status?: string;\n};\n\nexport function SavedFilterMenuButton({\n  conditions,\n  conditionsOp,\n  filterId,\n  onClearFilters,\n  onReloadSavedFilter,\n  savedFilters,\n}: {\n  conditions: RuleConditionEntity[];\n  conditionsOp: 'and' | 'or';\n  filterId?: SavedFilter;\n  onClearFilters: () => void;\n  onReloadSavedFilter: (savedFilter: SavedFilter, value?: string) => void;\n  savedFilters: TransactionFilterEntity[];\n}) {\n  const { t } = useTranslation();\n  const [nameOpen, setNameOpen] = useState(false);\n  const [adding, setAdding] = useState(false);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const triggerRef = useRef(null);\n  const [err, setErr] = useState(null);\n  const [menuItem, setMenuItem] = useState('');\n  const [name, setName] = useState(filterId?.name ?? '');\n  const id = filterId?.id;\n  let savedFilter: SavedFilter;\n\n  const onFilterMenuSelect = async (item: string) => {\n    setMenuItem(item);\n    switch (item) {\n      case 'rename-filter':\n        setErr(null);\n        setAdding(false);\n        setMenuOpen(false);\n        setNameOpen(true);\n        break;\n      case 'delete-filter':\n        setMenuOpen(false);\n        await send('filter-delete', id);\n        onClearFilters();\n        break;\n      case 'update-filter':\n        setErr(null);\n        setAdding(false);\n        setMenuOpen(false);\n        savedFilter = {\n          conditions,\n          conditionsOp,\n          id: filterId?.id,\n          name: filterId?.name ?? '',\n          status: 'saved',\n        };\n        const response = await sendCatch('filter-update', {\n          state: savedFilter,\n          filters: [...savedFilters],\n        });\n\n        if (response.error) {\n          setErr(response.error.message);\n          setNameOpen(true);\n          return;\n        }\n\n        onReloadSavedFilter(savedFilter, 'update');\n        break;\n      case 'save-filter':\n        setErr(null);\n        setAdding(true);\n        setMenuOpen(false);\n        setNameOpen(true);\n        break;\n      case 'reload-filter':\n        setMenuOpen(false);\n        savedFilter = {\n          ...savedFilter,\n          status: 'saved',\n        };\n        onReloadSavedFilter(savedFilter, 'reload');\n        break;\n      case 'clear-filter':\n        setMenuOpen(false);\n        onClearFilters();\n        break;\n      default:\n    }\n  };\n\n  async function onAddUpdate() {\n    if (adding) {\n      const newSavedFilter = {\n        conditions,\n        conditionsOp,\n        name,\n        status: 'saved',\n      };\n\n      const response = await sendCatch('filter-create', {\n        state: newSavedFilter,\n        filters: [...savedFilters],\n      });\n\n      if (response.error) {\n        setErr(response.error.message);\n        setNameOpen(true);\n        return;\n      }\n\n      setNameOpen(false);\n      onReloadSavedFilter({\n        ...newSavedFilter,\n        id: response.data,\n      });\n      return;\n    }\n\n    const updatedFilter = {\n      conditions: filterId?.conditions,\n      conditionsOp: filterId?.conditionsOp,\n      id: filterId?.id,\n      name,\n    };\n\n    const response = await sendCatch('filter-update', {\n      state: updatedFilter,\n      filters: [...savedFilters],\n    });\n\n    if (response.error) {\n      setErr(response.error.message);\n      setNameOpen(true);\n      return;\n    }\n\n    setNameOpen(false);\n    onReloadSavedFilter(updatedFilter);\n  }\n\n  return (\n    <View>\n      {conditions.length > 0 && (\n        <Button\n          ref={triggerRef}\n          variant=\"bare\"\n          style={{ marginTop: 10 }}\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n        >\n          <Text\n            style={{\n              maxWidth: 150,\n              whiteSpace: 'nowrap',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              flexShrink: 0,\n            }}\n          >\n            {!filterId?.id ? t('Unsaved filter') : filterId?.name}&nbsp;\n          </Text>\n          {filterId?.id && filterId?.status !== 'saved' && (\n            <Text>\n              <Trans>(modified)</Trans>&nbsp;\n            </Text>\n          )}\n          <SvgExpandArrow width={8} height={8} style={{ marginRight: 5 }} />\n        </Button>\n      )}\n\n      <Popover\n        triggerRef={triggerRef}\n        isOpen={menuOpen}\n        onOpenChange={() => setMenuOpen(false)}\n        style={{ width: 200 }}\n      >\n        <FilterMenu\n          filterId={filterId}\n          onFilterMenuSelect={onFilterMenuSelect}\n        />\n      </Popover>\n\n      <Popover\n        triggerRef={triggerRef}\n        isOpen={nameOpen}\n        onOpenChange={() => setNameOpen(false)}\n        style={{ width: 325 }}\n      >\n        <NameFilter\n          menuItem={menuItem}\n          name={name}\n          setName={setName}\n          adding={adding}\n          onAddUpdate={onAddUpdate}\n          err={err}\n        />\n      </Popover>\n    </View>\n  );\n}\n","import React from 'react';\n\nimport { type TransactionFilterEntity } from 'loot-core/types/models';\nimport { type RuleConditionEntity } from 'loot-core/types/models/rule';\n\nimport { Stack } from '../common/Stack';\nimport { View } from '../common/View';\n\nimport { AppliedFilters } from './AppliedFilters';\nimport {\n  type SavedFilter,\n  SavedFilterMenuButton,\n} from './SavedFilterMenuButton';\n\nexport function FiltersStack({\n  conditions,\n  conditionsOp,\n  onUpdateFilter,\n  onDeleteFilter,\n  onClearFilters,\n  onReloadSavedFilter,\n  filterId,\n  savedFilters,\n  onConditionsOpChange,\n}: {\n  conditions: RuleConditionEntity[];\n  conditionsOp: 'and' | 'or';\n  onUpdateFilter: (\n    filter: RuleConditionEntity,\n    newFilter: RuleConditionEntity,\n  ) => void;\n  onDeleteFilter: (filter: RuleConditionEntity) => void;\n  onClearFilters: () => void;\n  onReloadSavedFilter: (savedFilter: SavedFilter, value?: string) => void;\n  filterId?: SavedFilter;\n  savedFilters: TransactionFilterEntity[];\n  onConditionsOpChange: (value: 'and' | 'or') => void;\n}) {\n  return (\n    <View>\n      <Stack\n        spacing={2}\n        direction=\"row\"\n        justify=\"flex-start\"\n        align=\"flex-start\"\n      >\n        <AppliedFilters\n          conditions={conditions}\n          conditionsOp={conditionsOp}\n          onConditionsOpChange={onConditionsOpChange}\n          onUpdate={onUpdateFilter}\n          onDelete={onDeleteFilter}\n        />\n        <View style={{ flex: 1 }} />\n        <SavedFilterMenuButton\n          conditions={conditions}\n          conditionsOp={conditionsOp}\n          filterId={filterId}\n          onClearFilters={onClearFilters}\n          onReloadSavedFilter={onReloadSavedFilter}\n          savedFilters={savedFilters}\n        />\n      </Stack>\n    </View>\n  );\n}\n","import { useMemo } from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\n\nimport { pushModal } from 'loot-core/client/actions';\nimport { isPreviewId } from 'loot-core/shared/transactions';\nimport { validForTransfer } from 'loot-core/src/client/transfer';\nimport { type TransactionEntity } from 'loot-core/types/models';\n\nimport { useSelectedItems } from '../../hooks/useSelected';\nimport { Menu } from '../common/Menu';\nimport { SelectedItemsButton } from '../table';\n\ntype SelectedTransactionsButtonProps = {\n  getTransaction: (id: string) => TransactionEntity | undefined;\n  onShow: (selectedIds: string[]) => void;\n  onDuplicate: (selectedIds: string[]) => void;\n  onDelete: (selectedIds: string[]) => void;\n  onEdit: (\n    type:\n      | 'date'\n      | 'amount'\n      | 'account'\n      | 'payee'\n      | 'notes'\n      | 'category'\n      | 'cleared',\n    selectedIds: string[],\n  ) => void;\n  onLinkSchedule: (selectedIds: string[]) => void;\n  onUnlinkSchedule: (selectedIds: string[]) => void;\n  onCreateRule: (selectedIds: string[]) => void;\n  onSetTransfer: (selectedIds: string[]) => void;\n  onScheduleAction: (\n    action: 'post-transaction' | 'skip',\n    selectedIds: string[],\n  ) => void;\n  showMakeTransfer: boolean;\n  onMakeAsSplitTransaction: (selectedIds: string[]) => void;\n  onMakeAsNonSplitTransactions: (selectedIds: string[]) => void;\n};\n\nexport function SelectedTransactionsButton({\n  getTransaction,\n  onShow,\n  onDuplicate,\n  onDelete,\n  onEdit,\n  onLinkSchedule,\n  onUnlinkSchedule,\n  onCreateRule,\n  onSetTransfer,\n  onScheduleAction,\n  showMakeTransfer,\n  onMakeAsSplitTransaction,\n  onMakeAsNonSplitTransactions,\n}: SelectedTransactionsButtonProps) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const selectedItems = useSelectedItems();\n  const selectedIds = useMemo(() => [...selectedItems], [selectedItems]);\n\n  const types = useMemo(() => {\n    const items = selectedIds;\n    return {\n      preview: !!items.find(id => isPreviewId(id)),\n      trans: !!items.find(id => !isPreviewId(id)),\n    };\n  }, [selectedIds]);\n\n  const ambiguousDuplication = useMemo(() => {\n    const transactions = selectedIds.map(id => getTransaction(id));\n\n    return transactions.some(tx => tx && tx.is_child);\n  }, [selectedIds, getTransaction]);\n\n  const linked = useMemo(() => {\n    return (\n      !types.preview &&\n      selectedIds.every(id => {\n        const t = getTransaction(id);\n        return t && t.schedule;\n      })\n    );\n  }, [types.preview, selectedIds, getTransaction]);\n\n  const canBeTransfer = useMemo(() => {\n    // only two selected\n    if (selectedIds.length !== 2) {\n      return false;\n    }\n    const fromTrans = getTransaction(selectedIds[0]);\n    const toTrans = getTransaction(selectedIds[1]);\n\n    // previously selected transactions aren't always present in current transaction list\n    if (!fromTrans || !toTrans) {\n      return false;\n    }\n\n    return validForTransfer(fromTrans, toTrans);\n  }, [selectedIds, getTransaction]);\n\n  const canMakeAsSplitTransaction = useMemo(() => {\n    if (selectedIds.length <= 1 || types.preview) {\n      return false;\n    }\n\n    const transactions = selectedIds.map(id => getTransaction(id));\n    const [firstTransaction] = transactions;\n\n    const areAllSameDateAndAccount = transactions.every(\n      tx =>\n        tx &&\n        tx.date === firstTransaction?.date &&\n        tx.account === firstTransaction?.account,\n    );\n    const areNoSplitTransactions = transactions.every(\n      tx => tx && !tx.is_parent && !tx.is_child,\n    );\n    const areNoReconciledTransactions = transactions.every(\n      tx => tx && !tx.reconciled,\n    );\n\n    return (\n      areAllSameDateAndAccount &&\n      areNoSplitTransactions &&\n      areNoReconciledTransactions\n    );\n  }, [selectedIds, types, getTransaction]);\n\n  const canUnsplitTransactions = useMemo(() => {\n    if (selectedIds.length === 0 || types.preview) {\n      return false;\n    }\n\n    const transactions = selectedIds.map(id => getTransaction(id));\n\n    const areNoReconciledTransactions = transactions.every(\n      tx => tx && !tx.reconciled,\n    );\n    const areAllSplitTransactions = transactions.every(\n      tx => tx && (tx.is_parent || tx.is_child),\n    );\n    return areNoReconciledTransactions && areAllSplitTransactions;\n  }, [selectedIds, types, getTransaction]);\n\n  function onViewSchedule() {\n    const firstId = selectedIds[0];\n    let scheduleId;\n    if (isPreviewId(firstId)) {\n      const parts = firstId.split('/');\n      scheduleId = parts[1];\n    } else {\n      const trans = getTransaction(firstId);\n      scheduleId = trans && trans.schedule;\n    }\n\n    if (scheduleId) {\n      dispatch(pushModal('schedule-edit', { id: scheduleId }));\n    }\n  }\n\n  const hotKeyOptions = {\n    enabled: types.trans,\n    scopes: ['app'],\n  };\n  useHotkeys('f', () => onShow(selectedIds), hotKeyOptions, [\n    onShow,\n    selectedIds,\n  ]);\n  useHotkeys('d', () => onDelete(selectedIds), hotKeyOptions, [\n    onDelete,\n    selectedIds,\n  ]);\n  useHotkeys('a', () => onEdit('account', selectedIds), hotKeyOptions, [\n    onEdit,\n    selectedIds,\n  ]);\n  useHotkeys('p', () => onEdit('payee', selectedIds), hotKeyOptions, [\n    onEdit,\n    selectedIds,\n  ]);\n  useHotkeys('n', () => onEdit('notes', selectedIds), hotKeyOptions, [\n    onEdit,\n    selectedIds,\n  ]);\n  useHotkeys('c', () => onEdit('category', selectedIds), hotKeyOptions, [\n    onEdit,\n    selectedIds,\n  ]);\n  useHotkeys('l', () => onEdit('cleared', selectedIds), hotKeyOptions, [\n    onEdit,\n    selectedIds,\n  ]);\n  useHotkeys(\n    's',\n    () =>\n      !types.trans || linked ? onViewSchedule() : onLinkSchedule(selectedIds),\n    {\n      scopes: ['app'],\n    },\n    [onLinkSchedule, onViewSchedule, linked, selectedIds],\n  );\n\n  return (\n    <SelectedItemsButton\n      id=\"transactions\"\n      name={count => t('{{count}} transactions', { count })}\n      // @ts-expect-error fix me\n      items={[\n        ...(!types.trans\n          ? [\n              {\n                name: 'view-schedule',\n                text: t('View schedule'),\n                key: 'S',\n              } as const,\n              {\n                name: 'post-transaction',\n                text: t('Post transaction'),\n              } as const,\n              { name: 'skip', text: t('Skip scheduled date') } as const,\n            ]\n          : [\n              { name: 'show', text: t('Show'), key: 'F' } as const,\n              {\n                name: 'duplicate',\n                text: t('Duplicate'),\n                disabled: ambiguousDuplication,\n              } as const,\n              { name: 'delete', text: t('Delete'), key: 'D' } as const,\n              ...(linked\n                ? [\n                    {\n                      name: 'view-schedule',\n                      text: t('View schedule'),\n                      key: 'S',\n                      disabled: selectedIds.length > 1,\n                    } as const,\n                    {\n                      name: 'unlink-schedule',\n                      text: t('Unlink schedule'),\n                    } as const,\n                  ]\n                : [\n                    {\n                      name: 'link-schedule',\n                      text: t('Link schedule'),\n                      key: 'S',\n                    } as const,\n                    {\n                      name: 'create-rule',\n                      text: t('Create rule'),\n                    } as const,\n                  ]),\n              ...(showMakeTransfer\n                ? [\n                    {\n                      name: 'set-transfer',\n                      text: t('Make transfer'),\n                      disabled: !canBeTransfer,\n                    } as const,\n                  ]\n                : []),\n              ...(canMakeAsSplitTransaction\n                ? [\n                    {\n                      name: 'make-as-split-transaction',\n                      text: t('Make as split transaction'),\n                    } as const,\n                  ]\n                : []),\n              ...(canUnsplitTransactions\n                ? [\n                    {\n                      name: 'unsplit-transactions',\n                      text: t('Unsplit {{count}} transactions', {\n                        count: selectedIds.length,\n                      }),\n                    } as const,\n                  ]\n                : []),\n              Menu.line,\n              { type: Menu.label, name: t('Edit field'), text: '' } as const,\n              { name: 'date', text: t('Date') } as const,\n              { name: 'account', text: t('Account'), key: 'A' } as const,\n              { name: 'payee', text: t('Payee'), key: 'P' } as const,\n              { name: 'notes', text: t('Notes'), key: 'N' } as const,\n              { name: 'category', text: t('Category'), key: 'C' } as const,\n              { name: 'amount', text: t('Amount') } as const,\n              { name: 'cleared', text: t('Cleared'), key: 'L' } as const,\n            ]),\n      ]}\n      onSelect={name => {\n        switch (name) {\n          case 'show':\n            onShow(selectedIds);\n            break;\n          case 'duplicate':\n            onDuplicate(selectedIds);\n            break;\n          case 'delete':\n            onDelete(selectedIds);\n            break;\n          case 'make-as-split-transaction':\n            onMakeAsSplitTransaction(selectedIds);\n            break;\n          case 'unsplit-transactions':\n            onMakeAsNonSplitTransactions(selectedIds);\n            break;\n          case 'post-transaction':\n          case 'skip':\n            onScheduleAction(name, selectedIds);\n            break;\n          case 'view-schedule':\n            onViewSchedule();\n            break;\n          case 'link-schedule':\n            onLinkSchedule(selectedIds);\n            break;\n          case 'unlink-schedule':\n            onUnlinkSchedule(selectedIds);\n            break;\n          case 'create-rule':\n            onCreateRule(selectedIds);\n            break;\n          case 'set-transfer':\n            onSetTransfer(selectedIds);\n            break;\n          default:\n            // @ts-expect-error fix me\n            onEdit(name, selectedIds);\n        }\n      }}\n    />\n  );\n}\n","import React, { useRef } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { useHover } from 'usehooks-ts';\r\n\r\nimport { isPreviewId } from 'loot-core/shared/transactions';\r\nimport { useCachedSchedules } from 'loot-core/src/client/data-hooks/schedules';\r\nimport { q } from 'loot-core/src/shared/query';\r\nimport { getScheduledAmount } from 'loot-core/src/shared/schedules';\r\n\r\nimport { useSelectedItems } from '../../hooks/useSelected';\r\nimport { SvgArrowButtonRight1 } from '../../icons/v2';\r\nimport { theme } from '../../style';\r\nimport { Button } from '../common/Button2';\r\nimport { Text } from '../common/Text';\r\nimport { View } from '../common/View';\r\nimport { PrivacyFilter } from '../PrivacyFilter';\r\nimport { CellValue, CellValueText } from '../spreadsheet/CellValue';\r\nimport { useFormat } from '../spreadsheet/useFormat';\r\nimport { useSheetValue } from '../spreadsheet/useSheetValue';\r\n\r\nfunction DetailedBalance({ name, balance, isExactBalance = true }) {\r\n  const format = useFormat();\r\n  return (\r\n    <Text\r\n      style={{\r\n        marginLeft: 15,\r\n        borderRadius: 4,\r\n        padding: '4px 6px',\r\n        color: theme.pillText,\r\n        backgroundColor: theme.pillBackground,\r\n      }}\r\n    >\r\n      {name}{' '}\r\n      <PrivacyFilter>\r\n        <Text style={{ fontWeight: 600 }}>\r\n          {!isExactBalance && '~ '}\r\n          {format(balance, 'financial')}\r\n        </Text>\r\n      </PrivacyFilter>\r\n    </Text>\r\n  );\r\n}\r\n\r\nfunction SelectedBalance({ selectedItems, account }) {\r\n  const { t } = useTranslation();\r\n\r\n  const name = `selected-balance-${[...selectedItems].join('-')}`;\r\n\r\n  const rows = useSheetValue({\r\n    name,\r\n    query: q('transactions')\r\n      .filter({\r\n        id: { $oneof: [...selectedItems] },\r\n        parent_id: { $oneof: [...selectedItems] },\r\n      })\r\n      .select('id'),\r\n  });\r\n  const ids = new Set((rows || []).map(r => r.id));\r\n\r\n  const finalIds = [...selectedItems].filter(id => !ids.has(id));\r\n  let balance = useSheetValue({\r\n    name: name + '-sum',\r\n    query: q('transactions')\r\n      .filter({ id: { $oneof: finalIds } })\r\n      .options({ splits: 'all' })\r\n      .calculate({ $sum: '$amount' }),\r\n  });\r\n\r\n  let scheduleBalance = null;\r\n  const scheduleData = useCachedSchedules();\r\n  const schedules = scheduleData ? scheduleData.schedules : [];\r\n  const previewIds = [...selectedItems]\r\n    .filter(id => isPreviewId(id))\r\n    .map(id => id.slice(8));\r\n  let isExactBalance = true;\r\n\r\n  for (const s of schedules) {\r\n    if (previewIds.includes(s.id)) {\r\n      // If a schedule is `between X and Y` then we calculate the average\r\n      if (s._amountOp === 'isbetween') {\r\n        isExactBalance = false;\r\n      }\r\n\r\n      if (!account || account.id === s._account) {\r\n        scheduleBalance += getScheduledAmount(s._amount);\r\n      } else {\r\n        scheduleBalance -= getScheduledAmount(s._amount);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (balance == null) {\r\n    if (scheduleBalance == null) {\r\n      return null;\r\n    } else {\r\n      balance = scheduleBalance;\r\n    }\r\n  } else if (scheduleBalance != null) {\r\n    balance += scheduleBalance;\r\n  }\r\n\r\n  return (\r\n    <DetailedBalance\r\n      name={t('Selected balance:')}\r\n      balance={balance}\r\n      isExactBalance={isExactBalance}\r\n    />\r\n  );\r\n}\r\n\r\nfunction FilteredBalance({ filteredAmount }) {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <DetailedBalance\r\n      name={t('Filtered balance:')}\r\n      balance={filteredAmount || 0}\r\n      isExactBalance={true}\r\n    />\r\n  );\r\n}\r\n\r\nfunction MoreBalances({ balanceQuery }) {\r\n  const { t } = useTranslation();\r\n\r\n  const cleared = useSheetValue({\r\n    name: balanceQuery.name + '-cleared',\r\n    query: balanceQuery.query.filter({ cleared: true }),\r\n  });\r\n  const uncleared = useSheetValue({\r\n    name: balanceQuery.name + '-uncleared',\r\n    query: balanceQuery.query.filter({ cleared: false }),\r\n  });\r\n\r\n  return (\r\n    <View style={{ flexDirection: 'row' }}>\r\n      <DetailedBalance name={t('Cleared total:')} balance={cleared} />\r\n      <DetailedBalance name={t('Uncleared total:')} balance={uncleared} />\r\n    </View>\r\n  );\r\n}\r\n\r\nexport function Balances({\r\n  balanceQuery,\r\n  showExtraBalances,\r\n  onToggleExtraBalances,\r\n  account,\r\n  isFiltered,\r\n  filteredAmount,\r\n}) {\r\n  const selectedItems = useSelectedItems();\r\n  const buttonRef = useRef(null);\r\n  const isButtonHovered = useHover(buttonRef);\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        marginTop: -5,\r\n        marginLeft: -5,\r\n      }}\r\n    >\r\n      <Button\r\n        ref={buttonRef}\r\n        data-testid=\"account-balance\"\r\n        variant=\"bare\"\r\n        onPress={onToggleExtraBalances}\r\n        style={{\r\n          paddingTop: 1,\r\n          paddingBottom: 1,\r\n        }}\r\n      >\r\n        <CellValue binding={{ ...balanceQuery, value: 0 }} type=\"financial\">\r\n          {props => (\r\n            <CellValueText\r\n              {...props}\r\n              style={{\r\n                fontSize: 22,\r\n                fontWeight: 400,\r\n                color:\r\n                  props.value < 0\r\n                    ? theme.errorText\r\n                    : props.value > 0\r\n                      ? theme.noticeTextLight\r\n                      : theme.pageTextSubdued,\r\n              }}\r\n            />\r\n          )}\r\n        </CellValue>\r\n\r\n        <SvgArrowButtonRight1\r\n          style={{\r\n            width: 10,\r\n            height: 10,\r\n            marginLeft: 10,\r\n            color: theme.pillText,\r\n            transform: showExtraBalances ? 'rotateZ(180deg)' : 'rotateZ(0)',\r\n            opacity:\r\n              isButtonHovered || selectedItems.size > 0 || showExtraBalances\r\n                ? 1\r\n                : 0,\r\n          }}\r\n        />\r\n      </Button>\r\n      {showExtraBalances && <MoreBalances balanceQuery={balanceQuery} />}\r\n\r\n      {selectedItems.size > 0 && (\r\n        <SelectedBalance selectedItems={selectedItems} account={account} />\r\n      )}\r\n      {isFiltered && <FilteredBalance filteredAmount={filteredAmount} />}\r\n    </View>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\nimport { Trans } from 'react-i18next';\n\nimport * as queries from 'loot-core/src/client/queries';\nimport { type Query } from 'loot-core/src/shared/query';\nimport { currencyToInteger } from 'loot-core/src/shared/util';\nimport { type AccountEntity } from 'loot-core/types/models';\n\nimport { SvgCheckCircle1 } from '../../icons/v2';\nimport { styles, theme } from '../../style';\nimport { Button } from '../common/Button2';\nimport { InitialFocus } from '../common/InitialFocus';\nimport { Input } from '../common/Input';\nimport { Text } from '../common/Text';\nimport { View } from '../common/View';\nimport { useFormat } from '../spreadsheet/useFormat';\nimport { useSheetValue } from '../spreadsheet/useSheetValue';\n\ntype ReconcilingMessageProps = {\n  balanceQuery: { name: `balance-query-${string}`; query: Query };\n  targetBalance: number;\n  onDone: () => void;\n  onCreateTransaction: (targetDiff: number) => void;\n};\n\nexport function ReconcilingMessage({\n  balanceQuery,\n  targetBalance,\n  onDone,\n  onCreateTransaction,\n}: ReconcilingMessageProps) {\n  const cleared = useSheetValue<'balance', `balance-query-${string}-cleared`>({\n    name: (balanceQuery.name + '-cleared') as `balance-query-${string}-cleared`,\n    value: 0,\n    query: balanceQuery.query.filter({ cleared: true }),\n  });\n  const format = useFormat();\n  const targetDiff = targetBalance - cleared;\n\n  const clearedBalance = format(cleared, 'financial');\n  const bankBalance = format(targetBalance, 'financial');\n  const difference =\n    (targetDiff > 0 ? '+' : '') + format(targetDiff, 'financial');\n\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        alignSelf: 'center',\n        backgroundColor: theme.tableBackground,\n        ...styles.shadow,\n        borderRadius: 4,\n        marginTop: 5,\n        marginBottom: 15,\n        padding: 10,\n      }}\n    >\n      <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n        {targetDiff === 0 ? (\n          <View\n            style={{\n              color: theme.noticeTextLight,\n              flex: 1,\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <SvgCheckCircle1\n              style={{\n                width: 13,\n                height: 13,\n                color: 'inherit',\n                marginRight: 3,\n              }}\n            />\n            <Trans>All reconciled!</Trans>\n          </View>\n        ) : (\n          <View style={{ color: theme.tableText }}>\n            <Text style={{ fontStyle: 'italic', textAlign: 'center' }}>\n              <Trans>\n                Your cleared balance <strong>{clearedBalance}</strong> needs{' '}\n                <strong>{difference}</strong> to match\n                <br /> your bank&apos;s balance of{' '}\n                <Text style={{ fontWeight: 700 }}>{bankBalance}</Text>\n              </Trans>\n            </Text>\n          </View>\n        )}\n        <View style={{ marginLeft: 15 }}>\n          <Button variant=\"primary\" onPress={onDone}>\n            <Trans>Done Reconciling</Trans>\n          </Button>\n        </View>\n        {targetDiff !== 0 && (\n          <View style={{ marginLeft: 15 }}>\n            <Button onPress={() => onCreateTransaction(targetDiff)}>\n              <Trans>Create Reconciliation Transaction</Trans>\n            </Button>\n          </View>\n        )}\n      </View>\n    </View>\n  );\n}\n\ntype ReconcileMenuProps = {\n  account: AccountEntity;\n  onReconcile: (amount: number | null) => void;\n  onClose: () => void;\n};\n\nexport function ReconcileMenu({\n  account,\n  onReconcile,\n  onClose,\n}: ReconcileMenuProps) {\n  const balanceQuery = queries.accountBalance(account);\n  const clearedBalance = useSheetValue<'account', `balance-${string}-cleared`>({\n    name: (balanceQuery.name + '-cleared') as `balance-${string}-cleared`,\n    value: null,\n    query: balanceQuery.query.filter({ cleared: true }),\n  });\n  const format = useFormat();\n  const [inputValue, setInputValue] = useState<string | null>(null);\n  const [inputFocused, setInputFocused] = useState(false);\n\n  function onSubmit() {\n    if (inputValue === '') {\n      setInputFocused(true);\n      return;\n    }\n\n    const amount =\n      inputValue != null ? currencyToInteger(inputValue) : clearedBalance;\n\n    onReconcile(amount);\n    onClose();\n  }\n\n  return (\n    <View style={{ padding: '5px 8px' }}>\n      <Text>\n        <Trans>\n          Enter the current balance of your bank account that you want to\n          reconcile with:\n        </Trans>\n      </Text>\n      {clearedBalance != null && (\n        <InitialFocus>\n          <Input\n            defaultValue={format(clearedBalance, 'financial')}\n            onChangeValue={setInputValue}\n            style={{ margin: '7px 0' }}\n            focused={inputFocused}\n            onEnter={onSubmit}\n          />\n        </InitialFocus>\n      )}\n      <Button variant=\"primary\" onPress={onSubmit}>\n        <Trans>Reconcile</Trans>\n      </Button>\n    </View>\n  );\n}\n","import React, {\n  useState,\n  useRef,\n  Fragment,\n  type ReactNode,\n  type ComponentProps,\n} from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  type AccountEntity,\n  type RuleConditionEntity,\n  type TransactionEntity,\n  type TransactionFilterEntity,\n} from 'loot-core/types/models';\n\nimport { useLocalPref } from '../../hooks/useLocalPref';\nimport { useSplitsExpanded } from '../../hooks/useSplitsExpanded';\nimport { useSyncServerStatus } from '../../hooks/useSyncServerStatus';\nimport { AnimatedLoading } from '../../icons/AnimatedLoading';\nimport { SvgAdd } from '../../icons/v1';\nimport {\n  SvgArrowsExpand3,\n  SvgArrowsShrink3,\n  SvgDownloadThickBottom,\n  SvgLockClosed,\n  SvgPencil1,\n} from '../../icons/v2';\nimport { theme, styles } from '../../style';\nimport { AnimatedRefresh } from '../AnimatedRefresh';\nimport { Button } from '../common/Button2';\nimport { InitialFocus } from '../common/InitialFocus';\nimport { Input } from '../common/Input';\nimport { Menu } from '../common/Menu';\nimport { MenuButton } from '../common/MenuButton';\nimport { Popover } from '../common/Popover';\nimport { Search } from '../common/Search';\nimport { Stack } from '../common/Stack';\nimport { View } from '../common/View';\nimport { FilterButton } from '../filters/FiltersMenu';\nimport { FiltersStack } from '../filters/FiltersStack';\nimport { type SavedFilter } from '../filters/SavedFilterMenuButton';\nimport { NotesButton } from '../NotesButton';\nimport { SelectedTransactionsButton } from '../transactions/SelectedTransactionsButton';\n\nimport { type TableRef } from './Account';\nimport { Balances } from './Balance';\nimport { ReconcilingMessage, ReconcileMenu } from './Reconcile';\n\ntype AccountHeaderProps = {\n  tableRef: TableRef;\n  editingName: boolean;\n  isNameEditable: boolean;\n  workingHard: boolean;\n  accountName: string;\n  account: AccountEntity;\n  filterId?: SavedFilter;\n  savedFilters: TransactionFilterEntity[];\n  accountsSyncing: string[];\n  failedAccounts: AccountSyncSidebarProps['failedAccounts'];\n  accounts: AccountEntity[];\n  transactions: TransactionEntity[];\n  showBalances: boolean;\n  showExtraBalances: boolean;\n  showCleared: boolean;\n  showReconciled: boolean;\n  showEmptyMessage: boolean;\n  balanceQuery: ComponentProps<typeof ReconcilingMessage>['balanceQuery'];\n  reconcileAmount: number;\n  canCalculateBalance: () => boolean;\n  isFiltered: boolean;\n  filteredAmount: number;\n  isSorted: boolean;\n  search: string;\n  filterConditions: RuleConditionEntity[];\n  filterConditionsOp: 'and' | 'or';\n  onSearch: (newSearch: string) => void;\n  onAddTransaction: () => void;\n  onShowTransactions: ComponentProps<\n    typeof SelectedTransactionsButton\n  >['onShow'];\n  onDoneReconciling: ComponentProps<typeof ReconcilingMessage>['onDone'];\n  onCreateReconciliationTransaction: ComponentProps<\n    typeof ReconcilingMessage\n  >['onCreateTransaction'];\n  onToggleExtraBalances: ComponentProps<\n    typeof Balances\n  >['onToggleExtraBalances'];\n  onSaveName: AccountNameFieldProps['onSaveName'];\n  saveNameError: AccountNameFieldProps['saveNameError'];\n  onExposeName: (isExposed: boolean) => void;\n  onSync: () => void;\n  onImport: () => void;\n  onMenuSelect: AccountMenuProps['onMenuSelect'];\n  onReconcile: ComponentProps<typeof ReconcileMenu>['onReconcile'];\n  onBatchEdit: ComponentProps<typeof SelectedTransactionsButton>['onEdit'];\n  onBatchDelete: ComponentProps<typeof SelectedTransactionsButton>['onDelete'];\n  onBatchDuplicate: ComponentProps<\n    typeof SelectedTransactionsButton\n  >['onDuplicate'];\n  onBatchLinkSchedule: ComponentProps<\n    typeof SelectedTransactionsButton\n  >['onLinkSchedule'];\n  onBatchUnlinkSchedule: ComponentProps<\n    typeof SelectedTransactionsButton\n  >['onUnlinkSchedule'];\n  onApplyFilter: (filter: RuleConditionEntity) => void;\n} & Pick<\n  ComponentProps<typeof SelectedTransactionsButton>,\n  | 'onCreateRule'\n  | 'onScheduleAction'\n  | 'onSetTransfer'\n  | 'onMakeAsSplitTransaction'\n  | 'onMakeAsNonSplitTransactions'\n> &\n  Pick<\n    ComponentProps<typeof FiltersStack>,\n    | 'onUpdateFilter'\n    | 'onDeleteFilter'\n    | 'onConditionsOpChange'\n    | 'onClearFilters'\n    | 'onReloadSavedFilter'\n  >;\n\nexport function AccountHeader({\n  tableRef,\n  editingName,\n  isNameEditable,\n  workingHard,\n  accountName,\n  account,\n  filterId,\n  savedFilters,\n  accountsSyncing,\n  failedAccounts,\n  accounts,\n  transactions,\n  showBalances,\n  showExtraBalances,\n  showCleared,\n  showReconciled,\n  showEmptyMessage,\n  balanceQuery,\n  reconcileAmount,\n  canCalculateBalance,\n  isFiltered,\n  filteredAmount,\n  isSorted,\n  search,\n  filterConditions,\n  filterConditionsOp,\n  onSearch,\n  onAddTransaction,\n  onShowTransactions,\n  onDoneReconciling,\n  onCreateReconciliationTransaction,\n  onToggleExtraBalances,\n  onSaveName,\n  saveNameError,\n  onExposeName,\n  onSync,\n  onImport,\n  onMenuSelect,\n  onReconcile,\n  onBatchDelete,\n  onBatchDuplicate,\n  onBatchEdit,\n  onBatchLinkSchedule,\n  onBatchUnlinkSchedule,\n  onCreateRule,\n  onApplyFilter,\n  onUpdateFilter,\n  onClearFilters,\n  onReloadSavedFilter,\n  onConditionsOpChange,\n  onDeleteFilter,\n  onScheduleAction,\n  onSetTransfer,\n  onMakeAsSplitTransaction,\n  onMakeAsNonSplitTransactions,\n}: AccountHeaderProps) {\n  const { t } = useTranslation();\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [reconcileOpen, setReconcileOpen] = useState(false);\n  const searchInput = useRef<HTMLInputElement>(null);\n  const triggerRef = useRef(null);\n  const reconcileRef = useRef(null);\n  const splitsExpanded = useSplitsExpanded();\n  const syncServerStatus = useSyncServerStatus();\n  const isUsingServer = syncServerStatus !== 'no-server';\n  const isServerOffline = syncServerStatus === 'offline';\n  const [_, setExpandSplitsPref] = useLocalPref('expand-splits');\n\n  let canSync = !!(account?.account_id && isUsingServer);\n  if (!account) {\n    // All accounts - check for any syncable account\n    canSync = !!accounts.find(account => !!account.account_id) && isUsingServer;\n  }\n\n  // Only show the ability to make linked transfers on multi-account views.\n  const showMakeTransfer = !account;\n\n  function onToggleSplits() {\n    if (tableRef.current) {\n      splitsExpanded.dispatch({\n        type: 'switch-mode',\n        id: tableRef.current.getScrolledItem(),\n      });\n\n      setExpandSplitsPref(!(splitsExpanded.state.mode === 'expand'));\n    }\n  }\n\n  useHotkeys(\n    'ctrl+f, cmd+f, meta+f',\n    () => {\n      if (searchInput.current) {\n        searchInput.current.focus();\n      }\n    },\n    {\n      enableOnFormTags: true,\n      preventDefault: true,\n      scopes: ['app'],\n    },\n    [searchInput],\n  );\n  useHotkeys(\n    't',\n    () => onAddTransaction(),\n    {\n      preventDefault: true,\n      scopes: ['app'],\n    },\n    [onAddTransaction],\n  );\n  useHotkeys(\n    'ctrl+i, cmd+i, meta+i',\n    () => onImport(),\n    {\n      scopes: ['app'],\n    },\n    [onImport],\n  );\n  useHotkeys(\n    'ctrl+b, cmd+b, meta+b',\n    () => onSync(),\n    {\n      enabled: canSync && !isServerOffline,\n      preventDefault: true,\n      scopes: ['app'],\n    },\n    [onSync],\n  );\n\n  return (\n    <>\n      <View style={{ ...styles.pageContent, paddingBottom: 10, flexShrink: 0 }}>\n        <View\n          style={{ marginTop: 2, marginBottom: 10, alignItems: 'flex-start' }}\n        >\n          <View\n            style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n              gap: 3,\n            }}\n          >\n            {!!account?.bank && (\n              <AccountSyncSidebar\n                account={account}\n                failedAccounts={failedAccounts}\n                accountsSyncing={accountsSyncing}\n              />\n            )}\n            <AccountNameField\n              account={account}\n              accountName={accountName}\n              isNameEditable={isNameEditable}\n              editingName={editingName}\n              saveNameError={saveNameError}\n              onSaveName={onSaveName}\n              onExposeName={onExposeName}\n            />\n          </View>\n        </View>\n\n        <Balances\n          balanceQuery={balanceQuery}\n          showExtraBalances={showExtraBalances}\n          onToggleExtraBalances={onToggleExtraBalances}\n          account={account}\n          isFiltered={isFiltered}\n          filteredAmount={filteredAmount}\n        />\n\n        <Stack\n          spacing={2}\n          direction=\"row\"\n          align=\"center\"\n          style={{ marginTop: 12 }}\n        >\n          {canSync && (\n            <Button\n              variant=\"bare\"\n              onPress={onSync}\n              isDisabled={isServerOffline}\n            >\n              <AnimatedRefresh\n                width={13}\n                height={13}\n                animating={\n                  account\n                    ? accountsSyncing.includes(account.id)\n                    : accountsSyncing.length > 0\n                }\n              />{' '}\n              {isServerOffline ? t('Bank Sync Offline') : t('Bank Sync')}\n            </Button>\n          )}\n\n          {account && !account.closed && (\n            <Button variant=\"bare\" onPress={onImport}>\n              <SvgDownloadThickBottom\n                width={13}\n                height={13}\n                style={{ marginRight: 4 }}\n              />{' '}\n              <Trans>Import</Trans>\n            </Button>\n          )}\n\n          {!showEmptyMessage && (\n            <Button variant=\"bare\" onPress={onAddTransaction}>\n              <SvgAdd width={10} height={10} style={{ marginRight: 3 }} />\n              <Trans>Add New</Trans>\n            </Button>\n          )}\n          <View style={{ flexShrink: 0 }}>\n            {/* @ts-expect-error fix me */}\n            <FilterButton onApply={onApplyFilter} />\n          </View>\n          <View style={{ flex: 1 }} />\n          <Search\n            placeholder={t('Search')}\n            value={search}\n            onChange={onSearch}\n            inputRef={searchInput}\n          />\n          {workingHard ? (\n            <View>\n              <AnimatedLoading style={{ width: 16, height: 16 }} />\n            </View>\n          ) : (\n            <SelectedTransactionsButton\n              getTransaction={id => transactions.find(t => t.id === id)}\n              onShow={onShowTransactions}\n              onDuplicate={onBatchDuplicate}\n              onDelete={onBatchDelete}\n              onEdit={onBatchEdit}\n              onLinkSchedule={onBatchLinkSchedule}\n              onUnlinkSchedule={onBatchUnlinkSchedule}\n              onCreateRule={onCreateRule}\n              onSetTransfer={onSetTransfer}\n              onScheduleAction={onScheduleAction}\n              showMakeTransfer={showMakeTransfer}\n              onMakeAsSplitTransaction={onMakeAsSplitTransaction}\n              onMakeAsNonSplitTransactions={onMakeAsNonSplitTransactions}\n            />\n          )}\n          <View>\n            {account && (\n              <>\n                <Button\n                  ref={reconcileRef}\n                  variant=\"bare\"\n                  aria-label={t('Reconcile')}\n                  style={{ padding: 6, marginLeft: 10 }}\n                  onPress={() => {\n                    setReconcileOpen(true);\n                  }}\n                >\n                  <View title={t('Reconcile')}>\n                    <SvgLockClosed width={14} height={14} />\n                  </View>\n                </Button>\n                <Popover\n                  placement=\"bottom\"\n                  triggerRef={reconcileRef}\n                  style={{ width: 275 }}\n                  isOpen={reconcileOpen}\n                  onOpenChange={() => setReconcileOpen(false)}\n                >\n                  <ReconcileMenu\n                    account={account}\n                    onClose={() => setReconcileOpen(false)}\n                    onReconcile={onReconcile}\n                  />\n                </Popover>\n              </>\n            )}\n          </View>\n          <Button\n            variant=\"bare\"\n            aria-label={\n              splitsExpanded.state.mode === 'collapse'\n                ? t('Collapse split transactions')\n                : t('Expand split transactions')\n            }\n            isDisabled={search !== '' || filterConditions.length > 0}\n            style={{ padding: 6 }}\n            onPress={onToggleSplits}\n          >\n            <View\n              title={\n                splitsExpanded.state.mode === 'collapse'\n                  ? t('Collapse split transactions')\n                  : t('Expand split transactions')\n              }\n            >\n              {splitsExpanded.state.mode === 'collapse' ? (\n                <SvgArrowsShrink3 style={{ width: 14, height: 14 }} />\n              ) : (\n                <SvgArrowsExpand3 style={{ width: 14, height: 14 }} />\n              )}\n            </View>\n          </Button>\n          {account ? (\n            <View>\n              <MenuButton\n                aria-label=\"Account menu\"\n                ref={triggerRef}\n                onPress={() => setMenuOpen(true)}\n              />\n\n              <Popover\n                triggerRef={triggerRef}\n                style={{ width: 275 }}\n                isOpen={menuOpen}\n                onOpenChange={() => setMenuOpen(false)}\n              >\n                <AccountMenu\n                  account={account}\n                  canSync={canSync}\n                  canShowBalances={canCalculateBalance()}\n                  isSorted={isSorted}\n                  showBalances={showBalances}\n                  showCleared={showCleared}\n                  showReconciled={showReconciled}\n                  onMenuSelect={item => {\n                    setMenuOpen(false);\n                    onMenuSelect(item);\n                  }}\n                />\n              </Popover>\n            </View>\n          ) : (\n            <View>\n              <MenuButton\n                aria-label=\"Account menu\"\n                ref={triggerRef}\n                onPress={() => setMenuOpen(true)}\n              />\n\n              <Popover\n                triggerRef={triggerRef}\n                isOpen={menuOpen}\n                onOpenChange={() => setMenuOpen(false)}\n              >\n                <Menu\n                  onMenuSelect={item => {\n                    setMenuOpen(false);\n                    onMenuSelect(item);\n                  }}\n                  items={[\n                    ...(isSorted\n                      ? [\n                          {\n                            name: 'remove-sorting',\n                            text: t('Remove all sorting'),\n                          } as const,\n                        ]\n                      : []),\n                    { name: 'export', text: t('Export') },\n                  ]}\n                />\n              </Popover>\n            </View>\n          )}\n        </Stack>\n\n        {filterConditions?.length > 0 && (\n          <FiltersStack\n            conditions={filterConditions}\n            conditionsOp={filterConditionsOp}\n            onUpdateFilter={onUpdateFilter}\n            onDeleteFilter={onDeleteFilter}\n            onClearFilters={onClearFilters}\n            onReloadSavedFilter={onReloadSavedFilter}\n            filterId={filterId}\n            savedFilters={savedFilters}\n            onConditionsOpChange={onConditionsOpChange}\n          />\n        )}\n      </View>\n      {reconcileAmount != null && (\n        <ReconcilingMessage\n          targetBalance={reconcileAmount}\n          balanceQuery={balanceQuery}\n          onDone={onDoneReconciling}\n          onCreateTransaction={onCreateReconciliationTransaction}\n        />\n      )}\n    </>\n  );\n}\n\ntype AccountSyncSidebarProps = {\n  account: AccountEntity;\n  failedAccounts: Map<\n    string,\n    {\n      type: string;\n      code: string;\n    }\n  >;\n  accountsSyncing: string[];\n};\n\nfunction AccountSyncSidebar({\n  account,\n  failedAccounts,\n  accountsSyncing,\n}: AccountSyncSidebarProps) {\n  return (\n    <View\n      style={{\n        backgroundColor: accountsSyncing.includes(account.id)\n          ? theme.sidebarItemBackgroundPending\n          : failedAccounts.has(account.id)\n            ? theme.sidebarItemBackgroundFailed\n            : theme.sidebarItemBackgroundPositive,\n        marginRight: '4px',\n        width: 8,\n        height: 8,\n        borderRadius: 8,\n      }}\n    />\n  );\n}\n\ntype AccountNameFieldProps = {\n  account: AccountEntity;\n  accountName: string;\n  isNameEditable: boolean;\n  editingName: boolean;\n  saveNameError?: ReactNode;\n  onSaveName: (newName: string) => void;\n  onExposeName: (isExposed: boolean) => void;\n};\n\nfunction AccountNameField({\n  account,\n  accountName,\n  isNameEditable,\n  editingName,\n  saveNameError,\n  onSaveName,\n  onExposeName,\n}: AccountNameFieldProps) {\n  const { t } = useTranslation();\n\n  if (editingName) {\n    return (\n      <Fragment>\n        <InitialFocus>\n          <Input\n            defaultValue={accountName}\n            onEnter={e => onSaveName(e.currentTarget.value)}\n            onBlur={e => onSaveName(e.target.value)}\n            onEscape={() => onExposeName(false)}\n            style={{\n              fontSize: 25,\n              fontWeight: 500,\n              marginTop: -3,\n              marginBottom: -4,\n              marginLeft: -6,\n              paddingTop: 2,\n              paddingBottom: 2,\n              width: Math.max(20, accountName.length) + 'ch',\n            }}\n          />\n        </InitialFocus>\n        {saveNameError && (\n          <View style={{ color: theme.warningText }}>{saveNameError}</View>\n        )}\n      </Fragment>\n    );\n  } else {\n    if (isNameEditable) {\n      return (\n        <View\n          style={{\n            flexDirection: 'row',\n            alignItems: 'center',\n            gap: 3,\n            '& .hover-visible': {\n              opacity: 0,\n              transition: 'opacity .25s',\n            },\n            '&:hover .hover-visible': {\n              opacity: 1,\n            },\n          }}\n        >\n          <View\n            style={{\n              fontSize: 25,\n              fontWeight: 500,\n              marginRight: 5,\n              marginBottom: -1,\n            }}\n            data-testid=\"account-name\"\n          >\n            {account && account.closed\n              ? t('Closed: {{ accountName }}', { accountName })\n              : accountName}\n          </View>\n\n          {account && (\n            <NotesButton\n              id={`account-${account.id}`}\n              defaultColor={theme.pageTextSubdued}\n            />\n          )}\n          <Button\n            variant=\"bare\"\n            aria-label={t('Edit account name')}\n            className=\"hover-visible\"\n            onPress={() => onExposeName(true)}\n          >\n            <SvgPencil1\n              style={{\n                width: 11,\n                height: 11,\n                color: theme.pageTextSubdued,\n              }}\n            />\n          </Button>\n        </View>\n      );\n    } else {\n      return (\n        <View\n          style={{ fontSize: 25, fontWeight: 500, marginBottom: -1 }}\n          data-testid=\"account-name\"\n        >\n          {account && account.closed\n            ? t('Closed: {{ accountName }}', { accountName })\n            : accountName}\n        </View>\n      );\n    }\n  }\n}\n\ntype AccountMenuProps = {\n  account: AccountEntity;\n  canSync: boolean;\n  showBalances: boolean;\n  canShowBalances: boolean;\n  showCleared: boolean;\n  showReconciled: boolean;\n  isSorted: boolean;\n  onMenuSelect: (\n    item:\n      | 'link'\n      | 'unlink'\n      | 'close'\n      | 'reopen'\n      | 'export'\n      | 'toggle-balance'\n      | 'remove-sorting'\n      | 'toggle-cleared'\n      | 'toggle-reconciled',\n  ) => void;\n};\n\nfunction AccountMenu({\n  account,\n  canSync,\n  showBalances,\n  canShowBalances,\n  showCleared,\n  showReconciled,\n  isSorted,\n  onMenuSelect,\n}: AccountMenuProps) {\n  const { t } = useTranslation();\n  const syncServerStatus = useSyncServerStatus();\n\n  return (\n    <Menu\n      onMenuSelect={item => {\n        onMenuSelect(item);\n      }}\n      items={[\n        ...(isSorted\n          ? [\n              {\n                name: 'remove-sorting',\n                text: t('Remove all sorting'),\n              } as const,\n            ]\n          : []),\n        ...(canShowBalances\n          ? [\n              {\n                name: 'toggle-balance',\n                text: showBalances\n                  ? t('Hide running balance')\n                  : t('Show running balance'),\n              } as const,\n            ]\n          : []),\n        {\n          name: 'toggle-cleared',\n          text: showCleared\n            ? t('Hide “cleared” checkboxes')\n            : t('Show “cleared” checkboxes'),\n        },\n        {\n          name: 'toggle-reconciled',\n          text: showReconciled\n            ? t('Hide reconciled transactions')\n            : t('Show reconciled transactions'),\n        },\n        { name: 'export', text: t('Export') },\n        ...(account && !account.closed\n          ? canSync\n            ? [\n                {\n                  name: 'unlink',\n                  text: t('Unlink account'),\n                } as const,\n              ]\n            : syncServerStatus === 'online'\n              ? [\n                  {\n                    name: 'link',\n                    text: t('Link account'),\n                  } as const,\n                ]\n              : []\n          : []),\n\n        ...(account.closed\n          ? [{ name: 'reopen', text: t('Reopen account') } as const]\n          : [{ name: 'close', text: t('Close account') } as const]),\n      ]}\n    />\n  );\n}\n","// @ts-strict-ignore\nimport React, {\n  PureComponent,\n  type MutableRefObject,\n  createRef,\n  useMemo,\n  type ReactElement,\n} from 'react';\nimport { Trans } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { Navigate, useParams, useLocation } from 'react-router-dom';\n\nimport { debounce } from 'debounce';\nimport { t } from 'i18next';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { validForTransfer } from 'loot-core/client/transfer';\nimport { type UndoState } from 'loot-core/server/undo';\nimport { useFilters } from 'loot-core/src/client/data-hooks/filters';\nimport {\n  SchedulesProvider,\n  useDefaultSchedulesQueryTransform,\n} from 'loot-core/src/client/data-hooks/schedules';\nimport * as queries from 'loot-core/src/client/queries';\nimport { runQuery, pagedQuery } from 'loot-core/src/client/query-helpers';\nimport { send, listen } from 'loot-core/src/platform/client/fetch';\nimport { currentDay } from 'loot-core/src/shared/months';\nimport { q, type Query } from 'loot-core/src/shared/query';\nimport { getScheduledAmount } from 'loot-core/src/shared/schedules';\nimport {\n  updateTransaction,\n  realizeTempTransactions,\n  ungroupTransaction,\n  ungroupTransactions,\n  makeChild,\n  makeAsNonChildTransactions,\n} from 'loot-core/src/shared/transactions';\nimport { applyChanges, groupById } from 'loot-core/src/shared/util';\nimport {\n  type NewRuleEntity,\n  type RuleActionEntity,\n  type AccountEntity,\n  type PayeeEntity,\n  type RuleConditionEntity,\n  type TransactionEntity,\n  type TransactionFilterEntity,\n} from 'loot-core/src/types/models';\n\nimport { useAccounts } from '../../hooks/useAccounts';\nimport { useActions } from '../../hooks/useActions';\nimport { useCategories } from '../../hooks/useCategories';\nimport { useDateFormat } from '../../hooks/useDateFormat';\nimport { useFailedAccounts } from '../../hooks/useFailedAccounts';\nimport { useLocalPref } from '../../hooks/useLocalPref';\nimport { usePayees } from '../../hooks/usePayees';\nimport { usePreviewTransactions } from '../../hooks/usePreviewTransactions';\nimport {\n  SelectedProviderWithItems,\n  type Actions,\n} from '../../hooks/useSelected';\nimport {\n  SplitsExpandedProvider,\n  useSplitsExpanded,\n} from '../../hooks/useSplitsExpanded';\nimport { useSyncedPref } from '../../hooks/useSyncedPref';\nimport { useTransactionBatchActions } from '../../hooks/useTransactionBatchActions';\nimport { styles, theme } from '../../style';\nimport { Button } from '../common/Button2';\nimport { Text } from '../common/Text';\nimport { View } from '../common/View';\nimport { type SavedFilter } from '../filters/SavedFilterMenuButton';\nimport { TransactionList } from '../transactions/TransactionList';\nimport { validateAccountName } from '../util/accountValidation';\n\nimport { AccountHeader } from './Header';\n\ntype ConditionEntity = Partial<RuleConditionEntity> | TransactionFilterEntity;\n\nfunction isTransactionFilterEntity(\n  filter: ConditionEntity,\n): filter is TransactionFilterEntity {\n  return 'id' in filter;\n}\n\ntype EmptyMessageProps = {\n  onAdd: () => void;\n};\n\nfunction EmptyMessage({ onAdd }: EmptyMessageProps) {\n  return (\n    <View\n      style={{\n        color: theme.tableText,\n        backgroundColor: theme.tableBackground,\n        flex: 1,\n        alignItems: 'center',\n        borderTopWidth: 1,\n        borderColor: theme.tableBorder,\n      }}\n    >\n      <View\n        style={{\n          width: 550,\n          marginTop: 75,\n          fontSize: 15,\n          alignItems: 'center',\n        }}\n      >\n        <Text style={{ textAlign: 'center', lineHeight: '1.4em' }}>\n          <Trans>\n            For Actual to be useful, you need to <strong>add an account</strong>\n            . You can link an account to automatically download transactions, or\n            manage it locally yourself.\n          </Trans>\n        </Text>\n\n        <Button\n          variant=\"primary\"\n          style={{ marginTop: 20 }}\n          autoFocus\n          onPress={onAdd}\n        >\n          <Trans>Add account</Trans>\n        </Button>\n\n        <View\n          style={{ marginTop: 20, fontSize: 13, color: theme.tableTextLight }}\n        >\n          <Trans>In the future, you can add accounts from the sidebar.</Trans>\n        </View>\n      </View>\n    </View>\n  );\n}\n\ntype AllTransactionsProps = {\n  account?: AccountEntity;\n  transactions: TransactionEntity[];\n  balances: Record<string, { balance: number }> | null;\n  showBalances?: boolean;\n  filtered?: boolean;\n  children: (\n    transactions: TransactionEntity[],\n    balances: Record<string, { balance: number }> | null,\n  ) => ReactElement;\n  collapseTransactions: (ids: string[]) => void;\n};\n\nfunction AllTransactions({\n  account,\n  transactions,\n  balances,\n  showBalances,\n  filtered,\n  children,\n  collapseTransactions,\n}: AllTransactionsProps) {\n  const accountId = account?.id;\n  const prependTransactions: (TransactionEntity & { _inverse?: boolean })[] =\n    usePreviewTransactions(collapseTransactions).map(trans => ({\n      ...trans,\n      _inverse: accountId ? accountId !== trans.account : false,\n    }));\n\n  transactions ??= [];\n\n  let runningBalance = useMemo(() => {\n    if (!showBalances) {\n      return 0;\n    }\n\n    return balances && transactions?.length > 0\n      ? (balances[transactions[0].id]?.balance ?? 0)\n      : 0;\n  }, [showBalances, balances, transactions]);\n\n  const prependBalances = useMemo(() => {\n    if (!showBalances) {\n      return null;\n    }\n\n    // Reverse so we can calculate from earliest upcoming schedule.\n    const scheduledBalances = [...prependTransactions]\n      .reverse()\n      .map(scheduledTransaction => {\n        const amount =\n          (scheduledTransaction._inverse ? -1 : 1) *\n          getScheduledAmount(scheduledTransaction.amount);\n        return {\n          // TODO: fix me\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          balance: (runningBalance += amount),\n          id: scheduledTransaction.id,\n        };\n      });\n    return groupById(scheduledBalances);\n  }, [showBalances, prependTransactions, runningBalance]);\n\n  const allTransactions = useMemo(() => {\n    // Don't prepend scheduled transactions if we are filtering\n    if (!filtered && prependTransactions.length > 0) {\n      return prependTransactions.concat(transactions);\n    }\n    return transactions;\n  }, [filtered, prependTransactions, transactions]);\n\n  const allBalances = useMemo(() => {\n    // Don't prepend scheduled transactions if we are filtering\n    if (!filtered && prependBalances && balances) {\n      return { ...prependBalances, ...balances };\n    }\n    return balances;\n  }, [filtered, prependBalances, balances]);\n\n  if (!prependTransactions) {\n    return children(transactions, balances);\n  }\n  return children(allTransactions, allBalances);\n}\n\nfunction getField(field?: string) {\n  if (!field) {\n    return 'date';\n  }\n\n  switch (field) {\n    case 'account':\n      return 'account.name';\n    case 'payee':\n      return 'payee.name';\n    case 'category':\n      return 'category.name';\n    case 'payment':\n      return 'amount';\n    case 'deposit':\n      return 'amount';\n    default:\n      return field;\n  }\n}\n\ntype AccountInternalProps = {\n  accountId?: string;\n  filterConditions: RuleConditionEntity[];\n  showBalances?: boolean;\n  setShowBalances: (newValue: boolean) => void;\n  showCleared?: boolean;\n  setShowCleared: (newValue: boolean) => void;\n  showReconciled: boolean;\n  setShowReconciled: (newValue: boolean) => void;\n  showExtraBalances?: boolean;\n  setShowExtraBalances: (newValue: boolean) => void;\n  modalShowing?: boolean;\n  setLastUndoState: (state: null) => void;\n  lastUndoState: { current: UndoState | null };\n  accounts: AccountEntity[];\n  getPayees: () => Promise<PayeeEntity[]>;\n  updateAccount: (newAccount: AccountEntity) => void;\n  newTransactions: string[];\n  matchedTransactions: string[];\n  splitsExpandedDispatch: ReturnType<typeof useSplitsExpanded>['dispatch'];\n  expandSplits?: boolean;\n  savedFilters: TransactionFilterEntity[];\n  onBatchEdit: ReturnType<typeof useTransactionBatchActions>['onBatchEdit'];\n  onBatchDuplicate: ReturnType<\n    typeof useTransactionBatchActions\n  >['onBatchDuplicate'];\n  onBatchLinkSchedule: ReturnType<\n    typeof useTransactionBatchActions\n  >['onBatchLinkSchedule'];\n  onBatchUnlinkSchedule: ReturnType<\n    typeof useTransactionBatchActions\n  >['onBatchUnlinkSchedule'];\n  onBatchDelete: ReturnType<typeof useTransactionBatchActions>['onBatchDelete'];\n  categoryId?: string;\n  location: ReturnType<typeof useLocation>;\n  failedAccounts: ReturnType<typeof useFailedAccounts>;\n  dateFormat: ReturnType<typeof useDateFormat>;\n  payees: ReturnType<typeof usePayees>;\n  categoryGroups: ReturnType<typeof useCategories>['grouped'];\n  hideFraction: boolean;\n  accountsSyncing: string[];\n} & ReturnType<typeof useActions>;\ntype AccountInternalState = {\n  search: string;\n  filterConditions: ConditionEntity[];\n  filterId?: SavedFilter;\n  filterConditionsOp: 'and' | 'or';\n  loading: boolean;\n  workingHard: boolean;\n  reconcileAmount: null | number;\n  transactions: TransactionEntity[];\n  transactionCount: number;\n  transactionsFiltered?: boolean;\n  showBalances?: boolean;\n  balances: Record<string, { balance: number }> | null;\n  showCleared?: boolean;\n  prevShowCleared?: boolean;\n  showReconciled: boolean;\n  editingName: boolean;\n  nameError: string;\n  isAdding: boolean;\n  modalShowing?: boolean;\n  sort: {\n    ascDesc: 'asc' | 'desc';\n    field: string;\n    prevField?: string;\n    prevAscDesc?: 'asc' | 'desc';\n  } | null;\n  filteredAmount: null | number;\n};\n\nexport type TableRef = MutableRefObject<{\n  edit: (updatedId: string | null, op?: string, someBool?: boolean) => void;\n  setRowAnimation: (animation: boolean) => void;\n  scrollTo: (focusId: string) => void;\n  scrollToTop: () => void;\n  getScrolledItem: () => string;\n} | null>;\n\nclass AccountInternal extends PureComponent<\n  AccountInternalProps,\n  AccountInternalState\n> {\n  paged: ReturnType<typeof pagedQuery> | null;\n  rootQuery: Query;\n  currentQuery: Query;\n  table: TableRef;\n  unlisten?: () => void;\n  dispatchSelected?: (action: Actions) => void;\n\n  constructor(props: AccountInternalProps) {\n    super(props);\n    this.paged = null;\n    this.table = createRef();\n\n    this.state = {\n      search: '',\n      filterConditions: props.filterConditions || [],\n      filterId: undefined,\n      filterConditionsOp: 'and',\n      loading: true,\n      workingHard: false,\n      reconcileAmount: null,\n      transactions: [],\n      transactionCount: 0,\n      showBalances: props.showBalances,\n      balances: null,\n      showCleared: props.showCleared,\n      showReconciled: props.showReconciled,\n      editingName: false,\n      nameError: '',\n      isAdding: false,\n      sort: null,\n      filteredAmount: null,\n    };\n  }\n\n  async componentDidMount() {\n    const maybeRefetch = (tables: string[]) => {\n      if (\n        tables.includes('transactions') ||\n        tables.includes('category_mapping') ||\n        tables.includes('payee_mapping')\n      ) {\n        return this.refetchTransactions();\n      }\n    };\n\n    const onUndo = async ({ tables, messages }: UndoState) => {\n      await maybeRefetch(tables);\n\n      // If all the messages are dealing with transactions, find the\n      // first message referencing a non-deleted row so that we can\n      // highlight the row\n      //\n      let focusId: null | string;\n      if (\n        messages.every(msg => msg.dataset === 'transactions') &&\n        !messages.find(msg => msg.column === 'tombstone')\n      ) {\n        const focusableMsgs = messages.filter(\n          msg =>\n            msg.dataset === 'transactions' && !(msg.column === 'tombstone'),\n        );\n\n        focusId = focusableMsgs.length === 1 ? focusableMsgs[0].row : null;\n\n        // Highlight the transactions\n        // this.table && this.table.highlight(focusableMsgs.map(msg => msg.row));\n      }\n\n      if (this.table.current) {\n        this.table.current.edit(null);\n\n        // Focus a transaction if applicable. There is a chance if the\n        // user navigated away that focusId is a transaction that has\n        // been \"paged off\" and we won't focus it. That's ok, we just\n        // do our best.\n        if (focusId) {\n          this.table.current.scrollTo(focusId);\n        }\n      }\n\n      this.props.setLastUndoState(null);\n    };\n\n    const unlistens = [listen('undo-event', onUndo)];\n\n    this.unlisten = () => {\n      unlistens.forEach(unlisten => unlisten());\n    };\n\n    // Important that any async work happens last so that the\n    // listeners are set up synchronously\n    await this.props.initiallyLoadPayees();\n    await this.fetchTransactions(this.state.filterConditions);\n\n    // If there is a pending undo, apply it immediately (this happens\n    // when an undo changes the location to this page)\n    if (this.props.lastUndoState && this.props.lastUndoState.current) {\n      onUndo(this.props.lastUndoState.current);\n    }\n  }\n\n  componentDidUpdate(prevProps: AccountInternalProps) {\n    // If the active account changes - close the transaction entry mode\n    if (this.state.isAdding && this.props.accountId !== prevProps.accountId) {\n      this.setState({ isAdding: false });\n    }\n\n    // If the user was on a different screen and is now coming back to\n    // the transactions, automatically refresh the transaction to make\n    // sure we have updated state\n    if (prevProps.modalShowing && !this.props.modalShowing) {\n      // This is clearly a hack. Need a better way to track which\n      // things are listening to transactions and refetch\n      // automatically (use ActualQL?)\n      setTimeout(() => {\n        this.refetchTransactions();\n      }, 100);\n    }\n\n    //Resest sort/filter/search on account change\n    if (this.props.accountId !== prevProps.accountId) {\n      this.setState({ sort: null, search: '', filterConditions: [] });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.unlisten) {\n      this.unlisten();\n    }\n    if (this.paged) {\n      this.paged.unsubscribe();\n    }\n  }\n\n  fetchAllIds = async () => {\n    const { data } = await runQuery(this.paged?.getQuery().select('id'));\n    // Remember, this is the `grouped` split type so we need to deal\n    // with the `subtransactions` property\n    return data.reduce((arr: string[], t: TransactionEntity) => {\n      arr.push(t.id);\n      t.subtransactions?.forEach(sub => arr.push(sub.id));\n      return arr;\n    }, []);\n  };\n\n  refetchTransactions = async () => {\n    this.paged?.run();\n  };\n\n  fetchTransactions = (filterConditions?: ConditionEntity[]) => {\n    const query = this.makeRootQuery();\n    this.rootQuery = this.currentQuery = query;\n    if (filterConditions) this.applyFilters(filterConditions);\n    else this.updateQuery(query);\n\n    if (this.props.accountId) {\n      this.props.markAccountRead(this.props.accountId);\n    }\n  };\n\n  makeRootQuery = () => {\n    const accountId = this.props.accountId;\n\n    return queries.makeTransactionsQuery(accountId);\n  };\n\n  updateQuery(query: Query, isFiltered: boolean = false) {\n    if (this.paged) {\n      this.paged.unsubscribe();\n    }\n\n    // Filter out reconciled transactions if they are hidden\n    // and we're not showing balances.\n    if (\n      !this.state.showReconciled &&\n      (!this.state.showBalances || !this.canCalculateBalance())\n    ) {\n      query = query.filter({ reconciled: { $eq: false } });\n    }\n\n    this.paged = pagedQuery(\n      query.select('*'),\n      async (\n        data: TransactionEntity[],\n        prevData: TransactionEntity[] | null,\n      ) => {\n        const firstLoad = prevData == null;\n\n        if (firstLoad) {\n          this.table.current?.setRowAnimation(false);\n\n          if (isFiltered) {\n            this.props.splitsExpandedDispatch({\n              type: 'set-mode',\n              mode: 'collapse',\n            });\n          } else {\n            this.props.splitsExpandedDispatch({\n              type: 'set-mode',\n              mode: this.props.expandSplits ? 'expand' : 'collapse',\n            });\n          }\n        }\n\n        this.setState(\n          {\n            transactions: data,\n            transactionCount: this.paged?.getTotalCount(),\n            transactionsFiltered: isFiltered,\n            loading: false,\n            workingHard: false,\n            balances: this.state.showBalances\n              ? await this.calculateBalances()\n              : null,\n            filteredAmount: await this.getFilteredAmount(),\n          },\n          () => {\n            if (firstLoad) {\n              this.table.current?.scrollToTop();\n            }\n\n            setTimeout(() => {\n              this.table.current?.setRowAnimation(true);\n            }, 0);\n          },\n        );\n      },\n      {\n        pageCount: 150,\n        onlySync: true,\n        mapper: ungroupTransactions,\n      },\n    );\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: AccountInternalProps) {\n    if (this.props.accountId !== nextProps.accountId) {\n      this.setState(\n        {\n          editingName: false,\n          loading: true,\n          search: '',\n          showBalances: nextProps.showBalances,\n          balances: null,\n          showCleared: nextProps.showCleared,\n          showReconciled: nextProps.showReconciled,\n          reconcileAmount: null,\n        },\n        () => {\n          this.fetchTransactions();\n        },\n      );\n    }\n  }\n\n  onSearch = (value: string) => {\n    this.paged?.unsubscribe();\n    this.setState({ search: value }, this.onSearchDone);\n  };\n\n  onSearchDone = debounce(() => {\n    if (this.state.search === '') {\n      this.updateQuery(\n        this.currentQuery,\n        this.state.filterConditions.length > 0,\n      );\n    } else {\n      this.updateQuery(\n        queries.makeTransactionSearchQuery(\n          this.currentQuery,\n          this.state.search,\n          this.props.dateFormat,\n        ),\n        true,\n      );\n    }\n  }, 150);\n\n  onSync = async () => {\n    const accountId = this.props.accountId;\n    const account = this.props.accounts.find(acct => acct.id === accountId);\n\n    await this.props.syncAndDownload(account ? account.id : undefined);\n  };\n\n  onImport = async () => {\n    const accountId = this.props.accountId;\n    const account = this.props.accounts.find(acct => acct.id === accountId);\n    const categories = await this.props.getCategories();\n\n    if (account) {\n      const res = await window.Actual?.openFileDialog({\n        filters: [\n          {\n            name: t('Financial Files'),\n            extensions: ['qif', 'ofx', 'qfx', 'csv', 'tsv', 'xml'],\n          },\n        ],\n      });\n\n      if (res) {\n        this.props.pushModal('import-transactions', {\n          accountId,\n          categories,\n          filename: res[0],\n          onImported: (didChange: boolean) => {\n            if (didChange) {\n              this.fetchTransactions();\n            }\n          },\n        });\n      }\n    }\n  };\n\n  onExport = async (accountName: string) => {\n    const exportedTransactions = await send('transactions-export-query', {\n      query: this.currentQuery.serialize(),\n    });\n    const normalizedName =\n      accountName && accountName.replace(/[()]/g, '').replace(/\\s+/g, '-');\n    const filename = `${normalizedName || 'transactions'}.csv`;\n\n    window.Actual?.saveFile(\n      exportedTransactions,\n      filename,\n      t('Export Transactions'),\n    );\n  };\n\n  onTransactionsChange = (\n    newTransaction: TransactionEntity,\n    data: TransactionEntity[],\n  ) => {\n    // Apply changes to pagedQuery data\n    this.paged?.optimisticUpdate(\n      (data: TransactionEntity[]) => {\n        if (newTransaction._deleted) {\n          return data.filter(t => t.id !== newTransaction.id);\n        } else {\n          return data.map(t => {\n            return t.id === newTransaction.id ? newTransaction : t;\n          });\n        }\n      },\n      () => {\n        return data;\n      },\n    );\n\n    this.props.updateNewTransactions(newTransaction.id);\n  };\n\n  canCalculateBalance = () => {\n    const accountId = this.props.accountId;\n    const account = this.props.accounts.find(\n      account => account.id === accountId,\n    );\n    return (\n      account &&\n      this.state.search === '' &&\n      this.state.filterConditions.length === 0 &&\n      (this.state.sort === null ||\n        (this.state.sort.field === 'date' &&\n          this.state.sort.ascDesc === 'desc'))\n    );\n  };\n\n  async calculateBalances() {\n    if (!this.canCalculateBalance()) {\n      return null;\n    }\n\n    const { data } = await runQuery(\n      this.paged\n        ?.getQuery()\n        .options({ splits: 'none' })\n        .select([{ balance: { $sumOver: '$amount' } }]),\n    );\n\n    return groupById<{ id: string; balance: number }>(data);\n  }\n\n  onAddTransaction = () => {\n    this.setState({ isAdding: true });\n  };\n\n  onExposeName = (flag: boolean) => {\n    this.setState({ editingName: flag });\n  };\n\n  onSaveName = (name: string) => {\n    const accountNameError = validateAccountName(\n      name,\n      this.props.accountId,\n      this.props.accounts,\n    );\n    if (accountNameError) {\n      this.setState({ nameError: accountNameError });\n    } else {\n      const account = this.props.accounts.find(\n        account => account.id === this.props.accountId,\n      );\n      this.props.updateAccount({ ...account, name });\n      this.setState({ editingName: false, nameError: '' });\n    }\n  };\n\n  onToggleExtraBalances = () => {\n    this.props.setShowExtraBalances(!this.props.showExtraBalances);\n  };\n\n  onMenuSelect = async (\n    item:\n      | 'link'\n      | 'unlink'\n      | 'close'\n      | 'reopen'\n      | 'export'\n      | 'toggle-balance'\n      | 'remove-sorting'\n      | 'toggle-cleared'\n      | 'toggle-reconciled',\n  ) => {\n    const accountId = this.props.accountId!;\n    const account = this.props.accounts.find(\n      account => account.id === accountId,\n    )!;\n\n    switch (item) {\n      case 'link':\n        this.props.pushModal('add-account', {\n          upgradingAccountId: accountId,\n        });\n        break;\n      case 'unlink':\n        this.props.pushModal('confirm-unlink-account', {\n          accountName: account.name,\n          onUnlink: () => {\n            this.props.unlinkAccount(accountId);\n          },\n        });\n        break;\n      case 'close':\n        this.props.openAccountCloseModal(accountId);\n        break;\n      case 'reopen':\n        this.props.reopenAccount(accountId);\n        break;\n      case 'export':\n        const accountName = this.getAccountTitle(account, accountId);\n        this.onExport(accountName);\n        break;\n      case 'toggle-balance':\n        if (this.state.showBalances) {\n          this.props.setShowBalances(false);\n          this.setState({ showBalances: false, balances: null });\n        } else {\n          this.props.setShowBalances(true);\n          this.setState(\n            {\n              transactions: [],\n              transactionCount: 0,\n              filterConditions: [],\n              search: '',\n              sort: null,\n              showBalances: true,\n            },\n            () => {\n              this.fetchTransactions();\n            },\n          );\n        }\n        break;\n      case 'remove-sorting': {\n        this.setState({ sort: null }, () => {\n          const filterConditions = this.state.filterConditions;\n          if (filterConditions.length > 0) {\n            this.applyFilters([...filterConditions]);\n          } else {\n            this.fetchTransactions();\n          }\n          if (this.state.search !== '') {\n            this.onSearch(this.state.search);\n          }\n        });\n        break;\n      }\n      case 'toggle-cleared':\n        if (this.state.showCleared) {\n          this.props.setShowCleared(false);\n          this.setState({ showCleared: false });\n        } else {\n          this.props.setShowCleared(true);\n          this.setState({ showCleared: true });\n        }\n        break;\n      case 'toggle-reconciled':\n        if (this.state.showReconciled) {\n          this.props.setShowReconciled(false);\n          this.setState({ showReconciled: false }, () =>\n            this.fetchTransactions(this.state.filterConditions),\n          );\n        } else {\n          this.props.setShowReconciled(true);\n          this.setState({ showReconciled: true }, () =>\n            this.fetchTransactions(this.state.filterConditions),\n          );\n        }\n        break;\n      default:\n    }\n  };\n\n  getAccountTitle(account?: AccountEntity, id?: string) {\n    const { filterName } = this.props.location.state || {};\n\n    if (filterName) {\n      return filterName;\n    }\n\n    if (!account) {\n      if (id === 'budgeted') {\n        return t('Budgeted Accounts');\n      } else if (id === 'offbudget') {\n        return t('Off Budget Accounts');\n      } else if (id === 'uncategorized') {\n        return t('Uncategorized');\n      } else if (!id) {\n        return t('All Accounts');\n      }\n      return null;\n    }\n\n    return account.name;\n  }\n\n  getBalanceQuery(id?: string) {\n    return {\n      name: `balance-query-${id}`,\n      query: this.makeRootQuery().calculate({ $sum: '$amount' }),\n    } as const;\n  }\n\n  getFilteredAmount = async () => {\n    const { data: amount } = await runQuery(\n      this.paged?.getQuery().calculate({ $sum: '$amount' }),\n    );\n    return amount;\n  };\n\n  isNew = (id: string) => {\n    return this.props.newTransactions.includes(id);\n  };\n\n  isMatched = (id: string) => {\n    return this.props.matchedTransactions.includes(id);\n  };\n\n  onCreatePayee = (name: string) => {\n    const trimmed = name.trim();\n    if (trimmed !== '') {\n      return this.props.createPayee(name);\n    }\n    return null;\n  };\n\n  lockTransactions = async () => {\n    this.setState({ workingHard: true });\n\n    const { accountId } = this.props;\n\n    const { data } = await runQuery(\n      q('transactions')\n        .filter({ cleared: true, reconciled: false, account: accountId })\n        .select('*')\n        .options({ splits: 'grouped' }),\n    );\n    let transactions = ungroupTransactions(data);\n\n    const changes: { updated: Array<Partial<TransactionEntity>> } = {\n      updated: [],\n    };\n\n    transactions.forEach(trans => {\n      const { diff } = updateTransaction(transactions, {\n        ...trans,\n        reconciled: true,\n      });\n\n      transactions = applyChanges(diff, transactions);\n\n      changes.updated = changes.updated\n        ? changes.updated.concat(diff.updated)\n        : diff.updated;\n    });\n\n    await send('transactions-batch-update', changes);\n    await this.refetchTransactions();\n  };\n\n  onReconcile = async (balance: number) => {\n    this.setState(({ showCleared }) => ({\n      reconcileAmount: balance,\n      showCleared: true,\n      prevShowCleared: showCleared,\n    }));\n  };\n\n  onDoneReconciling = async () => {\n    const { accountId } = this.props;\n    const { reconcileAmount } = this.state;\n\n    const { data } = await runQuery(\n      q('transactions')\n        .filter({ cleared: true, account: accountId })\n        .select('*')\n        .options({ splits: 'grouped' }),\n    );\n    const transactions = ungroupTransactions(data);\n\n    let cleared = 0;\n\n    transactions.forEach(trans => {\n      if (!trans.is_parent) {\n        cleared += trans.amount;\n      }\n    });\n\n    const targetDiff = (reconcileAmount || 0) - cleared;\n\n    if (targetDiff === 0) {\n      await this.lockTransactions();\n    }\n\n    this.setState({\n      reconcileAmount: null,\n      showCleared: this.state.prevShowCleared,\n    });\n  };\n\n  onCreateReconciliationTransaction = async (diff: number) => {\n    // Create a new reconciliation transaction\n    const reconciliationTransactions = realizeTempTransactions([\n      {\n        id: 'temp',\n        account: this.props.accountId!,\n        cleared: true,\n        reconciled: false,\n        amount: diff,\n        date: currentDay(),\n        notes: t('Reconciliation balance adjustment'),\n      },\n    ]);\n\n    // Optimistic UI: update the transaction list before sending the data to the database\n    this.setState({\n      transactions: [...reconciliationTransactions, ...this.state.transactions],\n    });\n\n    // run rules on the reconciliation transaction\n    const ruledTransactions = await Promise.all(\n      reconciliationTransactions.map(transaction =>\n        send('rules-run', { transaction }),\n      ),\n    );\n\n    // sync the reconciliation transaction\n    await send('transactions-batch-update', {\n      added: ruledTransactions,\n    });\n    await this.refetchTransactions();\n  };\n\n  onShowTransactions = async (ids: string[]) => {\n    this.onApplyFilter({\n      customName: t('Selected transactions'),\n      queryFilter: { id: { $oneof: ids } },\n    });\n  };\n\n  onBatchEdit = (name: keyof TransactionEntity, ids: string[]) => {\n    this.props.onBatchEdit({\n      name,\n      ids,\n      onSuccess: updatedIds => {\n        this.refetchTransactions();\n\n        if (this.table.current) {\n          this.table.current.edit(updatedIds[0], 'select', false);\n        }\n      },\n    });\n  };\n\n  onBatchDuplicate = (ids: string[]) => {\n    this.props.onBatchDuplicate({ ids, onSuccess: this.refetchTransactions });\n  };\n\n  onBatchDelete = (ids: string[]) => {\n    this.props.onBatchDelete({ ids, onSuccess: this.refetchTransactions });\n  };\n\n  onMakeAsSplitTransaction = async (ids: string[]) => {\n    this.setState({ workingHard: true });\n\n    const { data } = await runQuery(\n      q('transactions')\n        .filter({ id: { $oneof: ids } })\n        .select('*')\n        .options({ splits: 'none' }),\n    );\n\n    const transactions: TransactionEntity[] = data;\n\n    if (!transactions || transactions.length === 0) {\n      return;\n    }\n\n    const [firstTransaction] = transactions;\n    const parentTransaction = {\n      id: uuidv4(),\n      is_parent: true,\n      cleared: transactions.every(t => !!t.cleared),\n      date: firstTransaction.date,\n      account: firstTransaction.account,\n      amount: transactions\n        .map(t => t.amount)\n        .reduce((total, amount) => total + amount, 0),\n    };\n    const childTransactions = transactions.map(t =>\n      makeChild(parentTransaction, t),\n    );\n\n    await send('transactions-batch-update', {\n      added: [parentTransaction],\n      updated: childTransactions,\n    });\n\n    this.refetchTransactions();\n  };\n\n  onMakeAsNonSplitTransactions = async (ids: string[]) => {\n    this.setState({ workingHard: true });\n\n    const { data } = await runQuery(\n      q('transactions')\n        .filter({ id: { $oneof: ids } })\n        .select('*')\n        .options({ splits: 'grouped' }),\n    );\n\n    const groupedTransactions: TransactionEntity[] = data;\n\n    let changes: {\n      updated: TransactionEntity[];\n      deleted: TransactionEntity[];\n    } = {\n      updated: [],\n      deleted: [],\n    };\n\n    const groupedTransactionsToUpdate = groupedTransactions.filter(\n      t => t.is_parent,\n    );\n\n    for (const groupedTransaction of groupedTransactionsToUpdate) {\n      const transactions = ungroupTransaction(groupedTransaction);\n      const [parentTransaction, ...childTransactions] = transactions;\n\n      if (ids.includes(parentTransaction.id)) {\n        // Unsplit all child transactions.\n        const diff = makeAsNonChildTransactions(\n          childTransactions,\n          transactions,\n        );\n\n        changes = {\n          updated: [...changes.updated, ...diff.updated],\n          deleted: [...changes.deleted, ...diff.deleted],\n        };\n\n        // Already processed the child transactions above, no need to process them below.\n        continue;\n      }\n\n      // Unsplit selected child transactions.\n\n      const selectedChildTransactions = childTransactions.filter(t =>\n        ids.includes(t.id),\n      );\n\n      if (selectedChildTransactions.length === 0) {\n        continue;\n      }\n\n      const diff = makeAsNonChildTransactions(\n        selectedChildTransactions,\n        transactions,\n      );\n\n      changes = {\n        updated: [...changes.updated, ...diff.updated],\n        deleted: [...changes.deleted, ...diff.deleted],\n      };\n    }\n\n    await send('transactions-batch-update', changes);\n\n    this.refetchTransactions();\n\n    const transactionsToSelect = changes.updated.map(t => t.id);\n    this.dispatchSelected?.({\n      type: 'select-all',\n      ids: transactionsToSelect,\n    });\n  };\n\n  checkForReconciledTransactions = async (\n    ids: string[],\n    confirmReason: string,\n    onConfirm: (ids: string[]) => void,\n  ) => {\n    const { data } = await runQuery(\n      q('transactions')\n        .filter({ id: { $oneof: ids }, reconciled: true })\n        .select('*')\n        .options({ splits: 'grouped' }),\n    );\n    const transactions = ungroupTransactions(data);\n    if (transactions.length > 0) {\n      this.props.pushModal('confirm-transaction-edit', {\n        onConfirm: () => {\n          onConfirm(ids);\n        },\n        confirmReason,\n      });\n    } else {\n      onConfirm(ids);\n    }\n  };\n\n  onBatchLinkSchedule = (ids: string[]) => {\n    this.props.onBatchLinkSchedule({\n      ids,\n      account: this.props.accounts.find(a => a.id === this.props.accountId),\n      onSuccess: this.refetchTransactions,\n    });\n  };\n\n  onBatchUnlinkSchedule = (ids: string[]) => {\n    this.props.onBatchUnlinkSchedule({\n      ids,\n      onSuccess: this.refetchTransactions,\n    });\n  };\n\n  onCreateRule = async (ids: string[]) => {\n    const { data } = await runQuery(\n      q('transactions')\n        .filter({ id: { $oneof: ids } })\n        .select('*')\n        .options({ splits: 'grouped' }),\n    );\n\n    const transactions = ungroupTransactions(data);\n    const ruleTransaction = transactions[0];\n    const childTransactions = transactions.filter(\n      t => t.parent_id === ruleTransaction.id,\n    );\n\n    const payeeCondition = ruleTransaction.imported_payee\n      ? ({\n          field: 'imported_payee',\n          op: 'is',\n          value: ruleTransaction.imported_payee,\n          type: 'string',\n        } satisfies RuleConditionEntity)\n      : ({\n          field: 'payee',\n          op: 'is',\n          value: ruleTransaction.payee!,\n          type: 'id',\n        } satisfies RuleConditionEntity);\n    const amountCondition = {\n      field: 'amount',\n      op: 'isapprox',\n      value: ruleTransaction.amount,\n      type: 'number',\n    } satisfies RuleConditionEntity;\n\n    const rule = {\n      stage: null,\n      conditionsOp: 'and',\n      conditions: [payeeCondition, amountCondition],\n      actions: [\n        ...(childTransactions.length === 0\n          ? [\n              {\n                op: 'set',\n                field: 'category',\n                value: ruleTransaction.category,\n                type: 'id',\n                options: {\n                  splitIndex: 0,\n                },\n              } satisfies RuleActionEntity,\n            ]\n          : []),\n        ...childTransactions.flatMap((sub, index) => [\n          {\n            op: 'set-split-amount',\n            value: sub.amount,\n            options: {\n              splitIndex: index + 1,\n              method: 'fixed-amount',\n            },\n          } satisfies RuleActionEntity,\n          {\n            op: 'set',\n            field: 'category',\n            value: sub.category,\n            type: 'id',\n            options: {\n              splitIndex: index + 1,\n            },\n          } satisfies RuleActionEntity,\n        ]),\n      ],\n    } satisfies NewRuleEntity;\n\n    this.props.pushModal('edit-rule', { rule });\n  };\n\n  onSetTransfer = async (ids: string[]) => {\n    const onConfirmTransfer = async (ids: string[]) => {\n      this.setState({ workingHard: true });\n\n      const payees = await this.props.getPayees();\n      const { data: transactions } = await runQuery(\n        q('transactions')\n          .filter({ id: { $oneof: ids } })\n          .select('*'),\n      );\n      const [fromTrans, toTrans] = transactions;\n\n      if (transactions.length === 2 && validForTransfer(fromTrans, toTrans)) {\n        const fromPayee = payees.find(\n          p => p.transfer_acct === fromTrans.account,\n        );\n        const toPayee = payees.find(p => p.transfer_acct === toTrans.account);\n\n        const changes = {\n          updated: [\n            {\n              ...fromTrans,\n              payee: toPayee?.id,\n              transfer_id: toTrans.id,\n            },\n            {\n              ...toTrans,\n              payee: fromPayee?.id,\n              transfer_id: fromTrans.id,\n            },\n          ],\n        };\n\n        await send('transactions-batch-update', changes);\n      }\n\n      await this.refetchTransactions();\n    };\n\n    await this.checkForReconciledTransactions(\n      ids,\n      'batchEditWithReconciled',\n      onConfirmTransfer,\n    );\n  };\n\n  onConditionsOpChange = (value: 'and' | 'or') => {\n    this.setState({ filterConditionsOp: value });\n    this.setState({ filterId: { ...this.state.filterId, status: 'changed' } });\n    this.applyFilters([...this.state.filterConditions]);\n    if (this.state.search !== '') {\n      this.onSearch(this.state.search);\n    }\n  };\n\n  onReloadSavedFilter = (savedFilter: SavedFilter, item: string) => {\n    if (item === 'reload') {\n      const [savedFilter] = this.props.savedFilters.filter(\n        f => f.id === this.state.filterId?.id,\n      );\n      this.setState({ filterConditionsOp: savedFilter.conditionsOp ?? 'and' });\n      this.applyFilters([...savedFilter.conditions]);\n    } else {\n      if (savedFilter.status) {\n        this.setState({\n          filterConditionsOp: savedFilter.conditionsOp ?? 'and',\n        });\n        this.applyFilters([...savedFilter.conditions]);\n      }\n    }\n    this.setState({ filterId: { ...this.state.filterId, ...savedFilter } });\n  };\n\n  onClearFilters = () => {\n    this.setState({ filterConditionsOp: 'and' });\n    this.setState({ filterId: undefined });\n    this.applyFilters([]);\n    if (this.state.search !== '') {\n      this.onSearch(this.state.search);\n    }\n  };\n\n  onUpdateFilter = (\n    oldCondition: RuleConditionEntity,\n    updatedCondition: RuleConditionEntity,\n  ) => {\n    this.applyFilters(\n      this.state.filterConditions.map(c =>\n        c === oldCondition ? updatedCondition : c,\n      ),\n    );\n    this.setState({\n      filterId: {\n        ...this.state.filterId,\n        status: this.state.filterId && 'changed',\n      },\n    });\n    if (this.state.search !== '') {\n      this.onSearch(this.state.search);\n    }\n  };\n\n  onDeleteFilter = (condition: RuleConditionEntity) => {\n    this.applyFilters(this.state.filterConditions.filter(c => c !== condition));\n    if (this.state.filterConditions.length === 1) {\n      this.setState({ filterId: undefined });\n      this.setState({ filterConditionsOp: 'and' });\n    } else {\n      this.setState({\n        filterId: {\n          ...this.state.filterId,\n          status: this.state.filterId && 'changed',\n        },\n      });\n    }\n    if (this.state.search !== '') {\n      this.onSearch(this.state.search);\n    }\n  };\n\n  onApplyFilter = async (conditionOrSavedFilter: ConditionEntity) => {\n    let filterConditions = this.state.filterConditions;\n\n    if (\n      'customName' in conditionOrSavedFilter &&\n      conditionOrSavedFilter.customName\n    ) {\n      filterConditions = filterConditions.filter(\n        c =>\n          !isTransactionFilterEntity(c) &&\n          c.customName !== conditionOrSavedFilter.customName,\n      );\n    }\n\n    if (isTransactionFilterEntity(conditionOrSavedFilter)) {\n      // A saved filter was passed in.\n      const savedFilter = conditionOrSavedFilter;\n      this.setState({\n        filterId: { ...savedFilter, status: 'saved' },\n      });\n      this.setState({ filterConditionsOp: savedFilter.conditionsOp });\n      this.applyFilters([...savedFilter.conditions]);\n    } else {\n      // A condition was passed in.\n      const condition = conditionOrSavedFilter;\n      this.setState({\n        filterId: {\n          ...this.state.filterId,\n          status: this.state.filterId && 'changed',\n        },\n      });\n      this.applyFilters([...filterConditions, condition]);\n    }\n\n    if (this.state.search !== '') {\n      this.onSearch(this.state.search);\n    }\n  };\n\n  onScheduleAction = async (\n    name: 'skip' | 'post-transaction',\n    ids: string[],\n  ) => {\n    switch (name) {\n      case 'post-transaction':\n        for (const id of ids) {\n          const parts = id.split('/');\n          await send('schedule/post-transaction', { id: parts[1] });\n        }\n        this.refetchTransactions();\n        break;\n      case 'skip':\n        for (const id of ids) {\n          const parts = id.split('/');\n          await send('schedule/skip-next-date', { id: parts[1] });\n        }\n        break;\n      default:\n    }\n  };\n\n  applyFilters = async (conditions: ConditionEntity[]) => {\n    if (conditions.length > 0) {\n      const filteredCustomQueryFilters: Partial<RuleConditionEntity>[] =\n        conditions.filter(cond => !isTransactionFilterEntity(cond));\n      const customQueryFilters = filteredCustomQueryFilters.map(\n        f => f.queryFilter,\n      );\n      const { filters: queryFilters } = await send(\n        'make-filters-from-conditions',\n        {\n          conditions: conditions.filter(\n            cond => isTransactionFilterEntity(cond) || !cond.customName,\n          ),\n        },\n      );\n      const conditionsOpKey =\n        this.state.filterConditionsOp === 'or' ? '$or' : '$and';\n      this.currentQuery = this.rootQuery.filter({\n        [conditionsOpKey]: [...queryFilters, ...customQueryFilters],\n      });\n\n      this.setState(\n        {\n          filterConditions: conditions,\n        },\n        () => {\n          this.updateQuery(this.currentQuery, true);\n        },\n      );\n    } else {\n      this.setState(\n        {\n          transactions: [],\n          transactionCount: 0,\n          filterConditions: conditions,\n        },\n        () => {\n          this.fetchTransactions();\n        },\n      );\n    }\n\n    if (this.state.sort !== null) {\n      this.applySort();\n    }\n  };\n\n  applySort = (\n    field?: string,\n    ascDesc?: 'asc' | 'desc',\n    prevField?: string,\n    prevAscDesc?: 'asc' | 'desc',\n  ) => {\n    const filterConditions = this.state.filterConditions;\n    const isFiltered = filterConditions.length > 0;\n    const sortField = getField(!field ? this.state.sort?.field : field);\n    const sortAscDesc = !ascDesc ? this.state.sort?.ascDesc : ascDesc;\n    const sortPrevField = getField(\n      !prevField ? this.state.sort?.prevField : prevField,\n    );\n    const sortPrevAscDesc = !prevField\n      ? this.state.sort?.prevAscDesc\n      : prevAscDesc;\n\n    const sortCurrentQuery = function (\n      that: AccountInternal,\n      sortField: string,\n      sortAscDesc?: 'asc' | 'desc',\n    ) {\n      if (sortField === 'cleared') {\n        that.currentQuery = that.currentQuery.orderBy({\n          reconciled: sortAscDesc,\n        });\n      }\n\n      that.currentQuery = that.currentQuery.orderBy({\n        [sortField]: sortAscDesc,\n      });\n    };\n\n    const sortRootQuery = function (\n      that: AccountInternal,\n      sortField: string,\n      sortAscDesc?: 'asc' | 'desc',\n    ) {\n      if (sortField === 'cleared') {\n        that.currentQuery = that.rootQuery.orderBy({\n          reconciled: sortAscDesc,\n        });\n        that.currentQuery = that.currentQuery.orderBy({\n          cleared: sortAscDesc,\n        });\n      } else {\n        that.currentQuery = that.rootQuery.orderBy({\n          [sortField]: sortAscDesc,\n        });\n      }\n    };\n\n    // sort by previously used sort field, if any\n    const maybeSortByPreviousField = function (\n      that: AccountInternal,\n      sortPrevField: string,\n      sortPrevAscDesc?: 'asc' | 'desc',\n    ) {\n      if (!sortPrevField) {\n        return;\n      }\n\n      if (sortPrevField === 'cleared') {\n        that.currentQuery = that.currentQuery.orderBy({\n          reconciled: sortPrevAscDesc,\n        });\n      }\n\n      that.currentQuery = that.currentQuery.orderBy({\n        [sortPrevField]: sortPrevAscDesc,\n      });\n    };\n\n    switch (true) {\n      // called by applyFilters to sort an already filtered result\n      case !field:\n        sortCurrentQuery(this, sortField, sortAscDesc);\n        break;\n\n      // called directly from UI by sorting a column.\n      // active filters need to be applied before sorting\n      case isFiltered:\n        this.applyFilters([...filterConditions]);\n        sortCurrentQuery(this, sortField, sortAscDesc);\n        break;\n\n      // called directly from UI by sorting a column.\n      // no active filters, start a new root query.\n      case !isFiltered:\n        sortRootQuery(this, sortField, sortAscDesc);\n        break;\n\n      default:\n    }\n\n    maybeSortByPreviousField(this, sortPrevField, sortPrevAscDesc);\n    this.updateQuery(this.currentQuery, isFiltered);\n  };\n\n  onSort = (headerClicked: string, ascDesc: 'asc' | 'desc') => {\n    let prevField: string | undefined;\n    let prevAscDesc: 'asc' | 'desc' | undefined;\n    //if staying on same column but switching asc/desc\n    //then keep prev the same\n    if (headerClicked === this.state.sort?.field) {\n      prevField = this.state.sort.prevField;\n      prevAscDesc = this.state.sort.prevAscDesc;\n      this.setState({\n        sort: {\n          ...this.state.sort,\n          ascDesc,\n        },\n      });\n    } else {\n      //if switching to new column then capture state\n      //of current sort column as prev\n      prevField = this.state.sort?.field;\n      prevAscDesc = this.state.sort?.ascDesc;\n      this.setState({\n        sort: {\n          field: headerClicked,\n          ascDesc,\n          prevField: this.state.sort?.field,\n          prevAscDesc: this.state.sort?.ascDesc,\n        },\n      });\n    }\n\n    this.applySort(headerClicked, ascDesc, prevField, prevAscDesc);\n    if (this.state.search !== '') {\n      this.onSearch(this.state.search);\n    }\n  };\n\n  render() {\n    const {\n      accounts,\n      categoryGroups,\n      payees,\n      dateFormat,\n      hideFraction,\n      addNotification,\n      accountsSyncing,\n      failedAccounts,\n      replaceModal,\n      showExtraBalances,\n      accountId,\n      categoryId,\n    } = this.props;\n    const {\n      transactions,\n      loading,\n      workingHard,\n      filterId,\n      reconcileAmount,\n      transactionsFiltered,\n      editingName,\n      showBalances,\n      balances,\n      showCleared,\n      showReconciled,\n      filteredAmount,\n    } = this.state;\n\n    const account = accounts.find(account => account.id === accountId);\n    const accountName = this.getAccountTitle(account, accountId);\n\n    if (!accountName && !loading) {\n      // This is probably an account that was deleted, so redirect to\n      // all accounts\n      return <Navigate to=\"/accounts\" replace />;\n    }\n\n    const category = categoryGroups\n      .flatMap(g => g.categories)\n      .find(category => category?.id === categoryId);\n\n    const showEmptyMessage = !loading && !accountId && accounts.length === 0;\n\n    const isNameEditable =\n      accountId &&\n      accountId !== 'budgeted' &&\n      accountId !== 'offbudget' &&\n      accountId !== 'uncategorized';\n\n    const balanceQuery = this.getBalanceQuery(accountId);\n\n    return (\n      <AllTransactions\n        account={account}\n        transactions={transactions}\n        balances={balances}\n        showBalances={showBalances}\n        filtered={transactionsFiltered}\n        collapseTransactions={ids =>\n          this.props.splitsExpandedDispatch({ type: 'close-splits', ids })\n        }\n      >\n        {(allTransactions, allBalances) => (\n          <SelectedProviderWithItems\n            name=\"transactions\"\n            items={allTransactions}\n            fetchAllIds={this.fetchAllIds}\n            registerDispatch={dispatch => (this.dispatchSelected = dispatch)}\n            selectAllFilter={item => !item._unmatched && !item.is_parent}\n          >\n            <View style={styles.page}>\n              <AccountHeader\n                tableRef={this.table}\n                editingName={editingName}\n                isNameEditable={isNameEditable}\n                workingHard={workingHard}\n                account={account}\n                filterId={filterId}\n                savedFilters={this.props.savedFilters}\n                accountName={accountName}\n                accountsSyncing={accountsSyncing}\n                failedAccounts={failedAccounts}\n                accounts={accounts}\n                transactions={transactions}\n                showBalances={showBalances}\n                showExtraBalances={showExtraBalances}\n                showCleared={showCleared}\n                showReconciled={showReconciled}\n                showEmptyMessage={showEmptyMessage}\n                balanceQuery={balanceQuery}\n                canCalculateBalance={this.canCalculateBalance}\n                filteredAmount={filteredAmount}\n                isFiltered={transactionsFiltered}\n                isSorted={this.state.sort !== null}\n                reconcileAmount={reconcileAmount}\n                search={this.state.search}\n                // @ts-expect-error fix me\n                filterConditions={this.state.filterConditions}\n                filterConditionsOp={this.state.filterConditionsOp}\n                onSearch={this.onSearch}\n                onShowTransactions={this.onShowTransactions}\n                onMenuSelect={this.onMenuSelect}\n                onAddTransaction={this.onAddTransaction}\n                onToggleExtraBalances={this.onToggleExtraBalances}\n                onSaveName={this.onSaveName}\n                saveNameError={this.state.nameError}\n                onExposeName={this.onExposeName}\n                onReconcile={this.onReconcile}\n                onDoneReconciling={this.onDoneReconciling}\n                onCreateReconciliationTransaction={\n                  this.onCreateReconciliationTransaction\n                }\n                onSync={this.onSync}\n                onImport={this.onImport}\n                onBatchDelete={this.onBatchDelete}\n                onBatchDuplicate={this.onBatchDuplicate}\n                onBatchEdit={this.onBatchEdit}\n                onBatchLinkSchedule={this.onBatchLinkSchedule}\n                onBatchUnlinkSchedule={this.onBatchUnlinkSchedule}\n                onCreateRule={this.onCreateRule}\n                onUpdateFilter={this.onUpdateFilter}\n                onClearFilters={this.onClearFilters}\n                onReloadSavedFilter={this.onReloadSavedFilter}\n                onConditionsOpChange={this.onConditionsOpChange}\n                onDeleteFilter={this.onDeleteFilter}\n                onApplyFilter={this.onApplyFilter}\n                onScheduleAction={this.onScheduleAction}\n                onSetTransfer={this.onSetTransfer}\n                onMakeAsSplitTransaction={this.onMakeAsSplitTransaction}\n                onMakeAsNonSplitTransactions={this.onMakeAsNonSplitTransactions}\n              />\n\n              <View style={{ flex: 1 }}>\n                <TransactionList\n                  headerContent={undefined}\n                  tableRef={this.table}\n                  account={account}\n                  transactions={transactions}\n                  allTransactions={allTransactions}\n                  loadMoreTransactions={() =>\n                    this.paged && this.paged.fetchNext()\n                  }\n                  accounts={accounts}\n                  category={category}\n                  categoryGroups={categoryGroups}\n                  payees={payees}\n                  balances={allBalances}\n                  showBalances={!!allBalances}\n                  showReconciled={showReconciled}\n                  showCleared={showCleared}\n                  showAccount={\n                    !accountId ||\n                    accountId === 'offbudget' ||\n                    accountId === 'budgeted' ||\n                    accountId === 'uncategorized'\n                  }\n                  isAdding={this.state.isAdding}\n                  isNew={this.isNew}\n                  isMatched={this.isMatched}\n                  isFiltered={transactionsFiltered}\n                  dateFormat={dateFormat}\n                  hideFraction={hideFraction}\n                  addNotification={addNotification}\n                  renderEmpty={() =>\n                    showEmptyMessage ? (\n                      <EmptyMessage onAdd={() => replaceModal('add-account')} />\n                    ) : !loading ? (\n                      <View\n                        style={{\n                          color: theme.tableText,\n                          marginTop: 20,\n                          textAlign: 'center',\n                          fontStyle: 'italic',\n                        }}\n                      >\n                        No transactions\n                      </View>\n                    ) : null\n                  }\n                  onSort={this.onSort}\n                  sortField={this.state.sort?.field}\n                  ascDesc={this.state.sort?.ascDesc}\n                  onChange={this.onTransactionsChange}\n                  onBatchDelete={this.onBatchDelete}\n                  onBatchDuplicate={this.onBatchDuplicate}\n                  onBatchLinkSchedule={this.onBatchLinkSchedule}\n                  onBatchUnlinkSchedule={this.onBatchUnlinkSchedule}\n                  onCreateRule={this.onCreateRule}\n                  onScheduleAction={this.onScheduleAction}\n                  onMakeAsNonSplitTransactions={\n                    this.onMakeAsNonSplitTransactions\n                  }\n                  onRefetch={this.refetchTransactions}\n                  onCloseAddTransaction={() =>\n                    this.setState({ isAdding: false })\n                  }\n                  onCreatePayee={this.onCreatePayee}\n                  onApplyFilter={this.onApplyFilter}\n                />\n              </View>\n            </View>\n          </SelectedProviderWithItems>\n        )}\n      </AllTransactions>\n    );\n  }\n}\n\ntype AccountHackProps = Omit<\n  AccountInternalProps,\n  | 'splitsExpandedDispatch'\n  | 'onBatchEdit'\n  | 'onBatchDuplicate'\n  | 'onBatchLinkSchedule'\n  | 'onBatchUnlinkSchedule'\n  | 'onBatchDelete'\n>;\n\nfunction AccountHack(props: AccountHackProps) {\n  const { dispatch: splitsExpandedDispatch } = useSplitsExpanded();\n  const {\n    onBatchEdit,\n    onBatchDuplicate,\n    onBatchLinkSchedule,\n    onBatchUnlinkSchedule,\n    onBatchDelete,\n  } = useTransactionBatchActions();\n\n  return (\n    <AccountInternal\n      splitsExpandedDispatch={splitsExpandedDispatch}\n      onBatchEdit={onBatchEdit}\n      onBatchDuplicate={onBatchDuplicate}\n      onBatchLinkSchedule={onBatchLinkSchedule}\n      onBatchUnlinkSchedule={onBatchUnlinkSchedule}\n      onBatchDelete={onBatchDelete}\n      {...props}\n    />\n  );\n}\n\nexport function Account() {\n  const params = useParams();\n  const location = useLocation();\n\n  const { grouped: categoryGroups } = useCategories();\n  const newTransactions = useSelector(state => state.queries.newTransactions);\n  const matchedTransactions = useSelector(\n    state => state.queries.matchedTransactions,\n  );\n  const accounts = useAccounts();\n  const payees = usePayees();\n  const failedAccounts = useFailedAccounts();\n  const dateFormat = useDateFormat() || 'MM/dd/yyyy';\n  const [hideFraction] = useSyncedPref('hideFraction');\n  const [expandSplits] = useLocalPref('expand-splits');\n  const [showBalances, setShowBalances] = useSyncedPref(\n    `show-balances-${params.id}`,\n  );\n  const [hideCleared, setHideCleared] = useSyncedPref(\n    `hide-cleared-${params.id}`,\n  );\n  const [hideReconciled, setHideReconciled] = useSyncedPref(\n    `hide-reconciled-${params.id}`,\n  );\n  const [showExtraBalances, setShowExtraBalances] = useSyncedPref(\n    `show-extra-balances-${params.id || 'all-accounts'}`,\n  );\n  const modalShowing = useSelector(state => state.modals.modalStack.length > 0);\n  const accountsSyncing = useSelector(state => state.account.accountsSyncing);\n  const lastUndoState = useSelector(state => state.app.lastUndoState);\n  const filterConditions = location?.state?.filterConditions || [];\n\n  const savedFiters = useFilters();\n  const actionCreators = useActions();\n\n  const transform = useDefaultSchedulesQueryTransform(params.id);\n\n  return (\n    <SchedulesProvider transform={transform}>\n      <SplitsExpandedProvider\n        initialMode={expandSplits ? 'collapse' : 'expand'}\n      >\n        <AccountHack\n          newTransactions={newTransactions}\n          matchedTransactions={matchedTransactions}\n          accounts={accounts}\n          failedAccounts={failedAccounts}\n          dateFormat={dateFormat}\n          hideFraction={String(hideFraction) === 'true'}\n          expandSplits={expandSplits}\n          showBalances={String(showBalances) === 'true'}\n          setShowBalances={showBalances =>\n            setShowBalances(String(showBalances))\n          }\n          showCleared={String(hideCleared) !== 'true'}\n          setShowCleared={val => setHideCleared(String(!val))}\n          showReconciled={String(hideReconciled) !== 'true'}\n          setShowReconciled={val => setHideReconciled(String(!val))}\n          showExtraBalances={String(showExtraBalances) === 'true'}\n          setShowExtraBalances={extraBalances =>\n            setShowExtraBalances(String(extraBalances))\n          }\n          payees={payees}\n          modalShowing={modalShowing}\n          accountsSyncing={accountsSyncing}\n          lastUndoState={lastUndoState}\n          filterConditions={filterConditions}\n          categoryGroups={categoryGroups}\n          {...actionCreators}\n          accountId={params.id}\n          categoryId={location?.state?.categoryId}\n          location={location}\n          savedFilters={savedFiters}\n        />\n      </SplitsExpandedProvider>\n    </SchedulesProvider>\n  );\n}\n"],"names":["SvgLeftArrow2","props","_jsx","svg","xmlns","viewBox","style","color","path","fill","d","SvgArrowDown","SvgArrowUp","SvgArrowButtonRight1","_jsxs","SvgArrowsExpand3","SvgArrowsShrink3","SvgDownloadThickBottom","SvgHyperlink2","SvgInformationCircle","MonthPicker","startMonth","numDisplayed","monthBounds","onSelect","hoverId","setHoverId","useState","targetMonthCount","setTargetMonthCount","currentMonth","monthUtils","firstSelectedMonth","lastSelectedMonth","range","firstSelectedIndex","Math","floor","length","lastSelectedIndex","size","setSize","containerRef","useResizeObserver","rect","width","min","max","yearHeadersShown","View","flexDirection","alignItems","justifyContent","innerRef","flex","map","month","idx","monthName","selected","lastHoverId","hovered","current","year","showYearHeader","includes","push","isMonthBudgeted","start","end","padding","textAlign","userSelect","cursor","borderRadius","border","textDecoration","theme","pageTextSubdued","styles","smallText","backgroundColor","tableBorderHover","buttonPrimaryText","filter","buttonBareBackgroundHover","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","fontWeight","onClick","onMouseEnter","onMouseLeave","position","top","left","fontSize","pageText","BudgetPageHeader","onMonthSelect","numMonths","marginLeft","flexShrink","marginRight","getScrollbarWidth","paddingTop","displayName","RenderMonths","component","Component","editingMonth","args","months","useContext","MonthsContext","index","editing","NamespaceContext","Provider","value","borderLeft","tableBorder","SidebarCategory","category","categoryGroup","dragPreview","dragging","isLast","onEditName","onSave","onDelete","onHideNewCategory","t","useTranslation","temporary","id","menuOpen","setMenuOpen","triggerRef","useRef","contextMenusEnabled","useFeatureFlag","displayed","WebkitUserSelect","opacity","hidden","undefined","height","ref","onContextMenu","e","preventDefault","div","data-testid","textOverflow","whiteSpace","overflow","minWidth","name","Button","variant","className","onPress","SvgCheveronDown","Popover","placement","isOpen","onOpenChange","isNonModal","Menu","onMenuSelect","type","items","text","NotesButton","defaultColor","pageTextLight","display","formInputTextPlaceholderSelected","tableBackground","zIndex","onKeyDown","key","stopPropagation","InputCell","formatter","exposed","onUpdate","onBlur","paddingLeft","borderBottomWidth","inputProps","placeholder","ExpenseCategory","cat","editingCell","dragState","MonthComponent","onEditMonth","onBudgetAction","onShowActivity","onDragChange","onReorder","item","cat_group","dragRef","useDraggable","canDrag","dropRef","dropPos","useDroppable","types","onDrop","Row","collapsed","DropHighlight","pos","offset","preview","cell","onEdit","SidebarGroup","group","onApplyBudgetTemplatesInGroup","onShowNewCategory","onHideNewGroup","onToggleCollapse","isGoalTemplatesEnabled","SvgExpandArrow","transition","transform","Text","_Fragment","categories","c","is_income","tableRowHeaderBackground","ExpenseGroup","onReorderGroup","onReorderCategory","catDropRef","catDropPos","onLongHover","right","ROW_HEIGHT","IncomeCategory","IncomeGroup","IncomeHeader","onShowNewGroup","margin","Trans","BudgetCategories","memo","categoryGroups","dataComponents","onSaveCategory","onSaveGroup","onDeleteCategory","onDeleteGroup","collapsedGroupIds","setCollapsedGroupIdsPref","useLocalPref","showHiddenCategories","onCollapse","isAddingGroup","setIsAddingGroup","newCategoryForGroup","setNewCategoryForGroup","useMemo","expenseGroups","incomeGroup","separateGroups","Array","prototype","concat","apply","groupCategories","x","setDragState","savedCollapsed","setSavedCollapsed","newDragState","state","hoveredId","hoveredPos","id_","_onSaveGroup","groupId","_onSaveCategory","marginBottom","boxShadow","cardShadow","content","find","g","ExpenseGroupComponent","ExpenseCategoryComponent","incomeHeaderHeight","IncomeHeaderComponent","IncomeGroupComponent","IncomeCategoryComponent","Error","DropHighlightPosContext","BudgetSummaries","SummaryComponent","widthState","setWidthState","spring","useSpring","config","mass","tension","friction","useCallback","prevMonth0","allMonths","unshift","subMonths","addMonths","monthWidth","useLayoutEffect","prevMonth","reversed","offsetX","from","to","css","animated","willChange","paddingRight","BudgetTotals","toggleHiddenCategories","expandAllCategories","collapseAllCategories","borderBottom","flexGrow","aria-label","SvgDotsHorizontalTriple","BudgetTable","prewarmStartMonth","grouped","useCategories","setShowHiddenCategoriesPef","setEditing","_onReorderCategory","targetId","findSortUp","targetGroup","findSortDown","_onReorderGroup","moveVertically","dir","flattened","reduce","all","isGroup","nextIdx","findIndex","next","shiftKey","collapsedIds","onToggleHiddenCategories","lightScrollbar","tableHeaderBackground","MonthsProvider","BudgetTotalsComponent","overflowY","overflowAnchor","getNumPossibleMonths","estimatedTableWidth","DynamicBudgetTableInner","maxMonths","setDisplayMax","useBudgetMonthCount","numPossible","maxWidth","useEffect","getValidMonth","_onMonthSelect","useHotkeys","scopes","DynamicBudgetTable","AutoSizer","BudgetInner","spreadsheet","useSpreadsheet","dispatch","useDispatch","navigate","useNavigate","summaryCollapsed","setSummaryCollapsedPref","startMonthPref","setStartMonthPref","bounds","setBounds","budgetType","useSyncedPref","maxMonthsPref","useGlobalPref","initialized","setInitialized","loadCategories","getCategories","run","send","prewarmAllMonths","unlistens","listen","tables","forEach","unlisten","then","accountId","warmingMonth","prewarmMonth","categoryNameAlreadyExistsNotification","addNotification","message","toUpperCase","createCategory","updateCategory","mustTransfer","pushModal","transferCategory","deleteCategory","createGroup","updateGroup","deleteGroup","applyBudgetAction","categoryId","goBack","filterConditions","field","op","options","sortInfo","cats","moveCandidate","list","moveCategory","moveCategoryGroup","trackingComponents","envelopeComponents","table","TrackingBudgetProvider","onToggleSummaryCollapse","EnvelopeBudgetProvider","EnvelopeBudgetSummary","envelopeBudget","Budget","trackingBudget","IncomeHeaderMonth","page","InfoBubble","label","textWidth","location","useLocation","visible","setVisible","hash","getStringWidth","buttonNormalText","buttonNormalBackground","buttonNormalBorder","buttonPrimaryShadow","onMouseOver","setTimeout","context","document","createElement","getContext","font","getComputedStyle","body","ceil","measureText","UpcomingLengthSettings","_upcomingLength","setUpcomingLength","upcomingLength","enabled","expanded","setExpanded","Setting","primaryAction","gap","title","Select","onChange","newValue","strong","Schedules","useActions","setFilter","scheduleData","useSchedules","schedules","statuses","onAdd","onDiscover","onAction","schedule","completed","resetNextDate","Page","header","Search","SchedulesTable","allowCompleted","GoCardlessLink","window","close","Modal","isDismissable","ModalHeader","Paragraph","validForTransfer","fromTransaction","toTransaction","every","tran","transfer_id","is_child","account","amount","SplitsExpandedContext","useSplitsExpanded","data","mode","ids","has","SplitsExpandedProvider","children","initialMode","cachedState","useSelector","app","lastSplitState","reduxDispatch","useReducer","action","Set","delete","add","transitionId","splitState","TransactionMenu","transaction","onDuplicate","onLinkSchedule","onUnlinkSchedule","onCreateRule","onScheduleAction","onMakeAsNonSplitTransactions","closeMenu","isPreview","isPreviewId","linked","canUnsplitTransactions","reconciled","is_parent","onViewSchedule","firstId","scheduleId","split","getDisplayValue","obj","serializeTransaction","showZeroInDeposit","date","_inverse","getScheduledAmount","debit","credit","isDateValid","parseISO","integerToCurrency","deserializeTransaction","originalTransaction","originalDate","realTransaction","parsed","evalArithmetic","amountToInteger","currentDay","isLastChild","transactions","trans","parent_id","selectAscDesc","ascDesc","clicked","defaultAscDesc","TransactionHeader","hasSelected","showAccount","showCategory","showBalance","showCleared","scrollWidth","onSort","dispatchSelected","useSelectedDispatch","event","tableHeaderText","borderTopWidth","borderColor","SelectCell","focused","isRangeSelect","HeaderCell","icon","getPayeePretty","payee","transferAcct","numHiddenPayees","formatPayeeName","payeeName","payeeId","startsWith","slice","StatusCell","status","isChild","isClearedField","statusProps","getStatusProps","statusColor","noticeTextLight","errorText","warningText","pageTextLinkLight","Cell","plain","CellButton","formInputBorderSelected","visibility","disabled","Icon","marginTop","CustomCell","unexposedContent","cellValue","UnexposedCellContent","useParentPayee","payees","subtransactions","transferAccountsByTransaction","counts","mostCommonPayeeTransaction","result","sub","maxCount","mostCommonPayee","getPayeesById","numDistinctPayees","Object","keys","PayeeCell","accounts","valueStyle","importedPayee","onCreatePayee","onManagePayees","onNavigateToTransferAccount","onNavigateToSchedule","isCreatingPayee","parentPayee","transferAccount","bare","alignSelf","PayeeIcons","SvgSplit","fontStyle","Tooltip","tooltip","triggerProps","delay","onExpose","shouldSaveFromKey","inputStyle","PayeeAutocomplete","showManagePayees","clearOnBlur","useCachedSchedules","s","buttonStyle","scheduleIconStyle","transferIconStyle","recurring","_date","frequency","SvgArrowsSynchronize","SvgCalendar","isTemporaryId","SvgRightArrow2","Transaction","allTransactions","highlighted","added","matched","focusedField","balance","dateFormat","hideFraction","onSplit","onToggleSplit","onNotesTagClick","splitError","listContainerRef","prevShowZero","setPrevShowZero","prevTransaction","setPrevTransaction","setTransaction","showReconciliationWarning","setShowReconciliationWarning","onCancel","onConfirm","onUpdateAfterConfirm","confirmReason","newTransaction","note","getAccountsById","offbudget","deserialized","deserializedName","imported_payee","notes","cleared","isParent","_unmatched","transfer_acct","isBudgetTransfer","isOffBudget","backgroundFocus","amountStyle","letterSpacing","runningBalance","updateId","setUpdateId","crossOffset","setCrossOffset","setOffset","tableRowBackgroundHighlight","tableRowBackgroundHover","tableRowBackgroundHighlightText","tableText","tableTextInactive","currentTarget","getBoundingClientRect","clientX","clientY","bottom","arrowSize","maxHeight","shouldFlip","UNSTABLE_portalContainer","Field","DeleteCell","borderLeftWidth","lineHeight","buttonProps","formatDate","DateSelect","acctId","acct","AccountAutocomplete","includeClosedAccounts","menuPortalTarget","notesTagFormatter","bind","formLabelText","upcomingText","errorBackground","warningBackground","formLabelBackground","upcomingBackground","titleFirst","readOnly","getCategoriesById","formInputTextHighlight","CategoryAutocomplete","showSplitOption","tnum","privacyFilter","activationFilters","TransactionError","error","isDeposit","onAddSplit","onDistributeRemainder","canDistributeRemainder","version","difference","isDisabled","makeTemporaryTransactions","currentAccountId","currentCategoryId","lastDate","NewTransaction","editingTransaction","onClose","childTransactions","emptyChildTransactions","paddingBottom","isNew","TransactionTableInner","tableNavigator","tableRef","newNavigator","renderEmpty","onScroll","createRef","isAddingPrev","usePrevious","isAdding","setScrollWidth","saveScrollWidth","parent","child","onCloseAddTransaction","noteTag","transactionsToRender","showReconciled","renderRow","selectedItems","showBalances","balances","isMatched","isExpanded","transactionMap","get","isChildDeposit","hasSplitError","transactionsByParent","sortField","getNavigatorProps","onCheckNewEnter","newTransactions","editingId","onAddTemporary","Table","navigator","renderItem","loadMore","loadMoreTransactions","isSelected","onCheckEnter","TransactionTable","forwardRef","setNewTransactions","prevIsAdding","setPrevIsAdding","splitsExpanded","prevSplitsExpanded","mergedRef","useMergedRefs","transactionsWithExpandedSplits","anchor","setRowAnimation","Map","acc","fromEntries","isAnchored","unanchor","useTableNavigator","getFields","shouldAdd","latestState","savePending","afterSaveFunc","_","forceRerender","useSelectedItems","fields","f","afterSave","func","metaKey","getLastTransaction","lastTransaction","isSplit","updatedFieldName","groupedTransaction","groupTransaction","onApplyRules","newTrans","ungroupTransactions","updateTransaction","deleteTransaction","onBatchDelete","onBatchDuplicate","onBatchLinkSchedule","onBatchUnlinkSchedule","diff","splitTransaction","newId","addSplitTransaction","targetTransactions","parentTransaction","siblingTransactions","emptyTransactions","remainingAmount","amountPerTransaction","remainingCents","amounts","amountIndex","transactionIndex","words","word","i","arr","separator","lastEmptyTag","tag","ti","validTag","span","noteTagBackground","noteTagText","noteTagBackgroundHover","saveDiff","remoteUpdates","learnCategories","updates","saveDiffAndApply","changes","remoteDiff","applyTransactionDiff","applyChanges","TransactionList","headerContent","isFiltered","onRefetch","onApplyFilter","transactionsLatest","realizeTempTransactions","updated","sort_order","Date","now","afterRules","getChangedValues","st","selectedPayee","FilterMenu","filterId","onFilterMenuSelect","line","NameFilter","menuItem","setName","adding","onAddUpdate","err","inputRef","focus","Form","onSubmit","Stack","direction","justify","align","FormField","FormLabel","htmlFor","Input","defaultValue","onChangeValue","SavedFilterMenuButton","conditions","conditionsOp","onClearFilters","onReloadSavedFilter","savedFilters","nameOpen","setNameOpen","setAdding","setErr","setMenuItem","savedFilter","response","sendCatch","filters","newSavedFilter","updatedFilter","FiltersStack","onUpdateFilter","onDeleteFilter","onConditionsOpChange","spacing","AppliedFilters","SelectedTransactionsButton","getTransaction","onShow","onSetTransfer","showMakeTransfer","onMakeAsSplitTransaction","selectedIds","ambiguousDuplication","some","tx","canBeTransfer","fromTrans","toTrans","canMakeAsSplitTransaction","firstTransaction","areAllSameDateAndAccount","areNoSplitTransactions","areNoReconciledTransactions","areAllSplitTransactions","hotKeyOptions","SelectedItemsButton","count","DetailedBalance","isExactBalance","format","useFormat","pillText","pillBackground","PrivacyFilter","SelectedBalance","join","rows","useSheetValue","query","q","$oneof","select","r","finalIds","splits","calculate","$sum","scheduleBalance","previewIds","_amountOp","_account","_amount","FilteredBalance","filteredAmount","MoreBalances","balanceQuery","uncleared","Balances","showExtraBalances","onToggleExtraBalances","buttonRef","isButtonHovered","useHover","CellValue","binding","CellValueText","ReconcilingMessage","targetBalance","onDone","onCreateTransaction","targetDiff","clearedBalance","bankBalance","shadow","SvgCheckCircle1","br","ReconcileMenu","onReconcile","queries","inputValue","setInputValue","inputFocused","setInputFocused","currencyToInteger","InitialFocus","onEnter","AccountHeader","editingName","isNameEditable","workingHard","accountName","accountsSyncing","failedAccounts","showEmptyMessage","reconcileAmount","canCalculateBalance","isSorted","search","filterConditionsOp","onSearch","onAddTransaction","onShowTransactions","onDoneReconciling","onCreateReconciliationTransaction","onSaveName","saveNameError","onExposeName","onSync","onImport","onBatchEdit","reconcileOpen","setReconcileOpen","searchInput","reconcileRef","syncServerStatus","useSyncServerStatus","isUsingServer","isServerOffline","setExpandSplitsPref","canSync","account_id","onToggleSplits","getScrolledItem","enableOnFormTags","pageContent","bank","AccountSyncSidebar","AccountNameField","AnimatedRefresh","animating","closed","SvgAdd","FilterButton","onApply","AnimatedLoading","SvgLockClosed","MenuButton","AccountMenu","canShowBalances","sidebarItemBackgroundPending","sidebarItemBackgroundFailed","sidebarItemBackgroundPositive","Fragment","target","onEscape","SvgPencil1","isTransactionFilterEntity","EmptyMessage","autoFocus","tableTextLight","AllTransactions","filtered","collapseTransactions","prependTransactions","usePreviewTransactions","prependBalances","scheduledBalances","reverse","scheduledTransaction","groupById","allBalances","getField","AccountInternal","PureComponent","paged","rootQuery","currentQuery","constructor","loading","transactionCount","nameError","sort","componentDidMount","maybeRefetch","refetchTransactions","onUndo","messages","focusId","msg","dataset","column","focusableMsgs","row","edit","scrollTo","setLastUndoState","initiallyLoadPayees","fetchTransactions","lastUndoState","componentDidUpdate","prevProps","setState","modalShowing","componentWillUnmount","unsubscribe","fetchAllIds","runQuery","getQuery","makeRootQuery","applyFilters","updateQuery","markAccountRead","$eq","pagedQuery","prevData","firstLoad","splitsExpandedDispatch","expandSplits","getTotalCount","transactionsFiltered","calculateBalances","getFilteredAmount","scrollToTop","pageCount","onlySync","mapper","UNSAFE_componentWillReceiveProps","nextProps","onSearchDone","debounce","syncAndDownload","res","Actual","openFileDialog","extensions","filename","onImported","didChange","onExport","exportedTransactions","serialize","replace","saveFile","onTransactionsChange","optimisticUpdate","_deleted","updateNewTransactions","$sumOver","flag","accountNameError","validateAccountName","updateAccount","setShowExtraBalances","upgradingAccountId","onUnlink","unlinkAccount","openAccountCloseModal","reopenAccount","getAccountTitle","setShowBalances","setShowCleared","setShowReconciled","filterName","getBalanceQuery","matchedTransactions","trim","createPayee","lockTransactions","prevShowCleared","reconciliationTransactions","ruledTransactions","Promise","customName","queryFilter","onSuccess","updatedIds","uuidv4","total","makeChild","groupedTransactions","deleted","groupedTransactionsToUpdate","ungroupTransaction","makeAsNonChildTransactions","selectedChildTransactions","transactionsToSelect","checkForReconciledTransactions","a","ruleTransaction","payeeCondition","amountCondition","rule","stage","actions","splitIndex","flatMap","method","onConfirmTransfer","getPayees","fromPayee","p","toPayee","oldCondition","updatedCondition","condition","conditionOrSavedFilter","parts","customQueryFilters","cond","queryFilters","conditionsOpKey","applySort","prevField","prevAscDesc","sortAscDesc","sortPrevField","sortPrevAscDesc","sortCurrentQuery","that","orderBy","sortRootQuery","maybeSortByPreviousField","headerClicked","render","replaceModal","Navigate","SelectedProviderWithItems","registerDispatch","selectAllFilter","fetchNext","AccountHack","useTransactionBatchActions","Account","params","useParams","useAccounts","usePayees","useFailedAccounts","useDateFormat","hideCleared","setHideCleared","hideReconciled","setHideReconciled","modals","modalStack","savedFiters","useFilters","actionCreators","useDefaultSchedulesQueryTransform","SchedulesProvider","String","val","extraBalances"],"mappings":"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"}