{"version":3,"file":"narrow.fsUHmZZ7.chunk.js","sources":["../../../src/icons/v1/ArrowThickRight.tsx","../../../src/icons/v1/ArrowThinLeft.tsx","../../../src/components/SyncRefresh.tsx","../../../src/components/common/Card.tsx","../../../src/components/mobile/budget/ListItem.tsx","../../../src/components/mobile/budget/BudgetTable.jsx","../../../src/components/mobile/budget/index.tsx","../../../src/components/mobile/accounts/Accounts.jsx","../../../src/components/mobile/accounts/AccountTransactions.tsx","../../../src/components/mobile/accounts/Account.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgArrowThickRight = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path d=\"M10 7H2v6h8v5l8-8-8-8v5z\" fill=\"currentColor\" />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgArrowThinLeft = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      d=\"m3.828 9 6.071-6.071-1.414-1.414L0 10l.707.707 7.778 7.778 1.414-1.414L3.828 11H20V9H3.828z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import React, { type ReactNode, useState } from 'react';\n\ntype ChildrenProps = {\n  refreshing: boolean;\n  onRefresh: () => Promise<void>;\n};\ntype SyncRefreshProps = {\n  onSync: () => Promise<void>;\n  children: (props: ChildrenProps) => ReactNode;\n};\nexport function SyncRefresh({ onSync, children }: SyncRefreshProps) {\n  const [syncing, setSyncing] = useState(false);\n\n  async function onSync_() {\n    setSyncing(true);\n    await onSync();\n    setSyncing(false);\n  }\n\n  return <>{children({ refreshing: syncing, onRefresh: onSync_ })}</>;\n}\n","import { type ComponentProps, forwardRef } from 'react';\n\nimport { theme } from '../../style';\n\nimport { View } from './View';\n\ntype CardProps = ComponentProps<typeof View>;\n\nexport const Card = forwardRef<HTMLDivElement, CardProps>(\n  ({ children, ...props }, ref) => {\n    return (\n      <View\n        {...props}\n        ref={ref}\n        style={{\n          marginTop: 15,\n          marginLeft: 5,\n          marginRight: 5,\n          borderRadius: 6,\n          backgroundColor: theme.cardBackground,\n          borderColor: theme.cardBorder,\n          boxShadow: '0 1px 2px #9594A8',\n          ...props.style,\n        }}\n      >\n        <View\n          style={{\n            borderRadius: 6,\n            overflow: 'hidden',\n          }}\n        >\n          {children}\n        </View>\n      </View>\n    );\n  },\n);\n\nCard.displayName = 'Card';\n","import React, {\n  type ComponentProps,\n  type ReactNode,\n  type CSSProperties,\n} from 'react';\n\nimport { theme } from '../../../style';\nimport { View } from '../../common/View';\n\nconst ROW_HEIGHT = 50;\n\ntype ListItemProps = ComponentProps<typeof View> & {\n  children?: ReactNode;\n  style: CSSProperties;\n};\n\nexport const ListItem = ({ children, style, ...props }: ListItemProps) => {\n  return (\n    <View\n      style={{\n        height: ROW_HEIGHT,\n        borderBottomWidth: 1,\n        borderColor: theme.tableBorder,\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingLeft: 5,\n        paddingRight: 5,\n        zIndex: 1,\n        ...style,\n      }}\n      {...props}\n    >\n      {children}\n    </View>\n  );\n};\n","import React, { memo, useCallback, useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { css } from '@emotion/css';\r\nimport { AutoTextSize } from 'auto-text-size';\r\nimport memoizeOne from 'memoize-one';\r\n\r\nimport { collapseModals, pushModal } from 'loot-core/client/actions';\r\nimport { groupById, integerToCurrency } from 'loot-core/shared/util';\r\nimport {\r\n  envelopeBudget,\r\n  trackingBudget,\r\n  uncategorizedCount,\r\n} from 'loot-core/src/client/queries';\r\nimport * as monthUtils from 'loot-core/src/shared/months';\r\n\r\nimport { useCategories } from '../../../hooks/useCategories';\r\nimport { useFeatureFlag } from '../../../hooks/useFeatureFlag';\r\nimport { useLocalPref } from '../../../hooks/useLocalPref';\r\nimport { useNavigate } from '../../../hooks/useNavigate';\r\nimport { useNotes } from '../../../hooks/useNotes';\r\nimport { useSyncedPref } from '../../../hooks/useSyncedPref';\r\nimport { useUndo } from '../../../hooks/useUndo';\r\nimport { SvgLogo } from '../../../icons/logo';\r\nimport { SvgExpandArrow } from '../../../icons/v0';\r\nimport {\r\n  SvgArrowThinLeft,\r\n  SvgArrowThinRight,\r\n  SvgArrowThickRight,\r\n  SvgCheveronRight,\r\n} from '../../../icons/v1';\r\nimport { SvgViewShow } from '../../../icons/v2';\r\nimport { theme, styles } from '../../../style';\r\nimport { BalanceWithCarryover } from '../../budget/BalanceWithCarryover';\r\nimport { makeAmountGrey, makeBalanceAmountStyle } from '../../budget/util';\r\nimport { Button } from '../../common/Button2';\r\nimport { Card } from '../../common/Card';\r\nimport { Label } from '../../common/Label';\r\nimport { Link } from '../../common/Link';\r\nimport { Text } from '../../common/Text';\r\nimport { View } from '../../common/View';\r\nimport { MobilePageHeader, Page } from '../../Page';\r\nimport { PrivacyFilter } from '../../PrivacyFilter';\r\nimport { useResponsive } from '../../responsive/ResponsiveProvider';\r\nimport { CellValue } from '../../spreadsheet/CellValue';\r\nimport { useFormat } from '../../spreadsheet/useFormat';\r\nimport { useSheetValue } from '../../spreadsheet/useSheetValue';\r\nimport { MOBILE_NAV_HEIGHT } from '../MobileNavTabs';\r\nimport { PullToRefresh } from '../PullToRefresh';\r\n\r\nimport { ListItem } from './ListItem';\r\n\r\nconst PILL_STYLE = {\r\n  borderRadius: 16,\r\n  color: theme.pillText,\r\n  backgroundColor: theme.pillBackgroundLight,\r\n};\r\n\r\nfunction getColumnWidth({ show3Cols, isSidebar = false, offset = 0 } = {}) {\r\n  // If show3Cols = 35vw | 20vw | 20vw | 20vw,\r\n  // Else = 45vw | 25vw | 25vw,\r\n  if (!isSidebar) {\r\n    return show3Cols ? `${20 + offset}vw` : `${25 + offset}vw`;\r\n  }\r\n  return show3Cols ? `${35 + offset}vw` : `${45 + offset}vw`;\r\n}\r\n\r\nfunction ToBudget({ toBudget, onPress, show3Cols }) {\r\n  const amount = useSheetValue(toBudget);\r\n  const format = useFormat();\r\n  const sidebarColumnWidth = getColumnWidth({ show3Cols, isSidebar: true });\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center',\r\n        width: sidebarColumnWidth,\r\n      }}\r\n    >\r\n      <Button variant=\"bare\" onPress={onPress}>\r\n        <View>\r\n          <Label\r\n            title={amount < 0 ? 'Overbudgeted' : 'To Budget'}\r\n            style={{\r\n              ...(amount < 0 ? styles.smallText : {}),\r\n              color: theme.formInputText,\r\n              flexShrink: 0,\r\n              textAlign: 'left',\r\n            }}\r\n          />\r\n          <CellValue binding={toBudget} type=\"financial\">\r\n            {({ type, value }) => (\r\n              <View>\r\n                <PrivacyFilter>\r\n                  <AutoTextSize\r\n                    key={value}\r\n                    as={Text}\r\n                    minFontSizePx={6}\r\n                    maxFontSizePx={12}\r\n                    mode=\"oneline\"\r\n                    style={{\r\n                      fontSize: 12,\r\n                      fontWeight: '700',\r\n                      color: amount < 0 ? theme.errorText : theme.formInputText,\r\n                    }}\r\n                  >\r\n                    {format(value, type)}\r\n                  </AutoTextSize>\r\n                </PrivacyFilter>\r\n              </View>\r\n            )}\r\n          </CellValue>\r\n        </View>\r\n        <SvgCheveronRight\r\n          style={{\r\n            flexShrink: 0,\r\n            color: theme.mobileHeaderTextSubdued,\r\n            marginLeft: 5,\r\n          }}\r\n          width={14}\r\n          height={14}\r\n        />\r\n      </Button>\r\n    </View>\r\n  );\r\n}\r\n\r\nfunction Saved({ projected, onPress, show3Cols }) {\r\n  const binding = projected\r\n    ? trackingBudget.totalBudgetedSaved\r\n    : trackingBudget.totalSaved;\r\n\r\n  const saved = useSheetValue(binding) || 0;\r\n  const format = useFormat();\r\n  const isNegative = saved < 0;\r\n  const sidebarColumnWidth = getColumnWidth({ show3Cols, isSidebar: true });\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center',\r\n        width: sidebarColumnWidth,\r\n      }}\r\n    >\r\n      <Button variant=\"bare\" onPress={onPress}>\r\n        <View style={{ alignItems: 'flex-start' }}>\r\n          {projected ? (\r\n            <View>\r\n              <AutoTextSize\r\n                as={Label}\r\n                minFontSizePx={6}\r\n                maxFontSizePx={12}\r\n                mode=\"oneline\"\r\n                title=\"Projected Savings\"\r\n                style={{\r\n                  color: theme.formInputText,\r\n                  textAlign: 'left',\r\n                  fontSize: 12,\r\n                }}\r\n              />\r\n            </View>\r\n          ) : (\r\n            <Label\r\n              title={isNegative ? 'Overspent' : 'Saved'}\r\n              style={{\r\n                color: theme.formInputText,\r\n                textAlign: 'left',\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <CellValue binding={binding} type=\"financial\">\r\n            {({ type, value }) => (\r\n              <View>\r\n                <PrivacyFilter>\r\n                  <AutoTextSize\r\n                    key={value}\r\n                    as={Text}\r\n                    minFontSizePx={6}\r\n                    maxFontSizePx={12}\r\n                    mode=\"oneline\"\r\n                    style={{\r\n                      textAlign: 'left',\r\n                      fontSize: 12,\r\n                      fontWeight: '700',\r\n                      color: projected\r\n                        ? theme.warningText\r\n                        : isNegative\r\n                          ? theme.errorTextDark\r\n                          : theme.formInputText,\r\n                    }}\r\n                  >\r\n                    {format(value, type)}\r\n                  </AutoTextSize>\r\n                </PrivacyFilter>\r\n              </View>\r\n            )}\r\n          </CellValue>\r\n        </View>\r\n        <SvgCheveronRight\r\n          style={{\r\n            flexShrink: 0,\r\n            color: theme.mobileHeaderTextSubdued,\r\n            marginLeft: 5,\r\n          }}\r\n          width={14}\r\n          height={14}\r\n        />\r\n      </Button>\r\n    </View>\r\n  );\r\n}\r\n\r\nfunction BudgetCell({\r\n  name,\r\n  binding,\r\n  style,\r\n  category,\r\n  month,\r\n  onBudgetAction,\r\n  children,\r\n  ...props\r\n}) {\r\n  const columnWidth = getColumnWidth();\r\n  const dispatch = useDispatch();\r\n  const format = useFormat();\r\n  const { showUndoNotification } = useUndo();\r\n  const [budgetType = 'rollover'] = useSyncedPref('budgetType');\r\n  const modalBudgetType = budgetType === 'rollover' ? 'envelope' : 'tracking';\r\n\r\n  const categoryBudgetMenuModal = `${modalBudgetType}-budget-menu`;\r\n  const categoryNotes = useNotes(category.id);\r\n\r\n  const onOpenCategoryBudgetMenu = () => {\r\n    dispatch(\r\n      pushModal(categoryBudgetMenuModal, {\r\n        categoryId: category.id,\r\n        month,\r\n        onUpdateBudget: amount => {\r\n          onBudgetAction(month, 'budget-amount', {\r\n            category: category.id,\r\n            amount,\r\n          });\r\n        },\r\n        onCopyLastMonthAverage: () => {\r\n          onBudgetAction(month, 'copy-single-last', {\r\n            category: category.id,\r\n          });\r\n          showUndoNotification({\r\n            message: `${category.name} budget has been set last to month’s budgeted amount.`,\r\n          });\r\n        },\r\n        onSetMonthsAverage: numberOfMonths => {\r\n          if (\r\n            numberOfMonths !== 3 &&\r\n            numberOfMonths !== 6 &&\r\n            numberOfMonths !== 12\r\n          ) {\r\n            return;\r\n          }\r\n\r\n          onBudgetAction(month, `set-single-${numberOfMonths}-avg`, {\r\n            category: category.id,\r\n          });\r\n          showUndoNotification({\r\n            message: `${category.name} budget has been set to ${numberOfMonths === 12 ? 'yearly' : `${numberOfMonths} month`} average.`,\r\n          });\r\n        },\r\n        onApplyBudgetTemplate: () => {\r\n          onBudgetAction(month, 'apply-single-category-template', {\r\n            category: category.id,\r\n          });\r\n          showUndoNotification({\r\n            message: `${category.name} budget templates have been applied.`,\r\n            pre: categoryNotes,\r\n          });\r\n        },\r\n      }),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CellValue\r\n      binding={binding}\r\n      type=\"financial\"\r\n      aria-label={`Budgeted amount for ${category.name} category`}\r\n      {...props}\r\n    >\r\n      {({ type, name, value }) =>\r\n        children?.({\r\n          type,\r\n          name,\r\n          value,\r\n          onPress: onOpenCategoryBudgetMenu,\r\n        }) || (\r\n          <Button\r\n            variant=\"bare\"\r\n            style={{\r\n              ...PILL_STYLE,\r\n              maxWidth: columnWidth,\r\n              ...makeAmountGrey(value),\r\n            }}\r\n            onPress={onOpenCategoryBudgetMenu}\r\n            aria-label={`Open budget menu for ${category.name} category`}\r\n          >\r\n            <View>\r\n              <PrivacyFilter>\r\n                <AutoTextSize\r\n                  key={value}\r\n                  as={Text}\r\n                  minFontSizePx={6}\r\n                  maxFontSizePx={12}\r\n                  mode=\"oneline\"\r\n                  style={{\r\n                    maxWidth: columnWidth,\r\n                    textAlign: 'right',\r\n                    fontSize: 12,\r\n                  }}\r\n                >\r\n                  {format(value, type)}\r\n                </AutoTextSize>\r\n              </PrivacyFilter>\r\n            </View>\r\n          </Button>\r\n        )\r\n      }\r\n    </CellValue>\r\n  );\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nfunction ExpenseGroupPreview({ group, pending, style }) {\r\n  return (\r\n    <Card\r\n      style={{\r\n        marginTop: 7,\r\n        marginBottom: 7,\r\n        opacity: pending ? 1 : 0.4,\r\n      }}\r\n    >\r\n      <ExpenseGroupHeader group={group} blank={true} />\r\n\r\n      {group.categories.map((cat, index) => (\r\n        <ExpenseCategory\r\n          key={cat.id}\r\n          category={cat}\r\n          blank={true}\r\n          index={index}\r\n        />\r\n      ))}\r\n    </Card>\r\n  );\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nfunction ExpenseCategoryPreview({ name, pending, style }) {\r\n  return (\r\n    <ListItem\r\n      style={{\r\n        flex: 1,\r\n        borderColor: 'transparent',\r\n        borderRadius: 4,\r\n      }}\r\n    >\r\n      <Text style={styles.smallText}>{name}</Text>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nconst ExpenseCategory = memo(function ExpenseCategory({\r\n  type,\r\n  category,\r\n  isHidden,\r\n  goal,\r\n  longGoal,\r\n  budgeted,\r\n  spent,\r\n  balance,\r\n  carryover,\r\n  index,\r\n  // gestures,\r\n  blank,\r\n  style,\r\n  month,\r\n  onEdit,\r\n  onBudgetAction,\r\n  show3Cols,\r\n  showBudgetedCol,\r\n}) {\r\n  const opacity = blank ? 0 : 1;\r\n\r\n  const isGoalTemplatesEnabled = useFeatureFlag('goalTemplatesEnabled');\r\n  const goalTemp = useSheetValue(goal);\r\n  const goalValue = isGoalTemplatesEnabled ? goalTemp : null;\r\n\r\n  const [budgetType = 'rollover'] = useSyncedPref('budgetType');\r\n  const modalBudgetType = budgetType === 'rollover' ? 'envelope' : 'tracking';\r\n  const dispatch = useDispatch();\r\n  const { showUndoNotification } = useUndo();\r\n  const { list: categories } = useCategories();\r\n  const categoriesById = groupById(categories);\r\n\r\n  const onCarryover = useCallback(\r\n    carryover => {\r\n      onBudgetAction(month, 'carryover', {\r\n        category: category.id,\r\n        flag: carryover,\r\n      });\r\n      dispatch(collapseModals(`${modalBudgetType}-balance-menu`));\r\n    },\r\n    [modalBudgetType, category.id, dispatch, month, onBudgetAction],\r\n  );\r\n\r\n  const catBalance = useSheetValue(\r\n    type === 'rollover'\r\n      ? envelopeBudget.catBalance(category.id)\r\n      : trackingBudget.catBalance(category.id),\r\n  );\r\n  const budgetedtmp = useSheetValue(budgeted);\r\n  const balancetmp = useSheetValue(balance);\r\n  const isLongGoal = useSheetValue(longGoal) === 1;\r\n  const budgetedValue = isGoalTemplatesEnabled\r\n    ? isLongGoal\r\n      ? balancetmp\r\n      : budgetedtmp\r\n    : null;\r\n\r\n  const onTransfer = useCallback(() => {\r\n    dispatch(\r\n      pushModal('transfer', {\r\n        title: category.name,\r\n        categoryId: category.id,\r\n        month,\r\n        amount: catBalance,\r\n        onSubmit: (amount, toCategoryId) => {\r\n          onBudgetAction(month, 'transfer-category', {\r\n            amount,\r\n            from: category.id,\r\n            to: toCategoryId,\r\n          });\r\n          dispatch(collapseModals(`${modalBudgetType}-balance-menu`));\r\n          showUndoNotification({\r\n            message: `Transferred ${integerToCurrency(amount)} from ${category.name} to ${categoriesById[toCategoryId].name}.`,\r\n          });\r\n        },\r\n        showToBeBudgeted: true,\r\n      }),\r\n    );\r\n  }, [\r\n    modalBudgetType,\r\n    catBalance,\r\n    categoriesById,\r\n    category.id,\r\n    category.name,\r\n    dispatch,\r\n    month,\r\n    onBudgetAction,\r\n    showUndoNotification,\r\n  ]);\r\n\r\n  const onCover = useCallback(() => {\r\n    dispatch(\r\n      pushModal('cover', {\r\n        title: category.name,\r\n        month,\r\n        categoryId: category.id,\r\n        onSubmit: fromCategoryId => {\r\n          onBudgetAction(month, 'cover-overspending', {\r\n            to: category.id,\r\n            from: fromCategoryId,\r\n          });\r\n          dispatch(collapseModals(`${modalBudgetType}-balance-menu`));\r\n          showUndoNotification({\r\n            message: `Covered ${category.name} overspending from ${categoriesById[fromCategoryId].name}.`,\r\n          });\r\n        },\r\n      }),\r\n    );\r\n  }, [\r\n    modalBudgetType,\r\n    categoriesById,\r\n    category.id,\r\n    category.name,\r\n    dispatch,\r\n    month,\r\n    onBudgetAction,\r\n    showUndoNotification,\r\n  ]);\r\n\r\n  const onOpenBalanceMenu = useCallback(() => {\r\n    dispatch(\r\n      pushModal(`${modalBudgetType}-balance-menu`, {\r\n        categoryId: category.id,\r\n        month,\r\n        onCarryover,\r\n        ...(budgetType === 'rollover' && { onTransfer, onCover }),\r\n      }),\r\n    );\r\n  }, [\r\n    modalBudgetType,\r\n    budgetType,\r\n    category.id,\r\n    dispatch,\r\n    month,\r\n    onCarryover,\r\n    onCover,\r\n    onTransfer,\r\n  ]);\r\n\r\n  const listItemRef = useRef();\r\n  const format = useFormat();\r\n  const navigate = useNavigate();\r\n  const onShowActivity = useCallback(() => {\r\n    navigate(`/categories/${category.id}?month=${month}`);\r\n  }, [category.id, month, navigate]);\r\n\r\n  const sidebarColumnWidth = getColumnWidth({ show3Cols, isSidebar: true });\r\n  const columnWidth = getColumnWidth({ show3Cols });\r\n\r\n  const content = (\r\n    <ListItem\r\n      style={{\r\n        backgroundColor: 'transparent',\r\n        borderBottomWidth: 0,\r\n        borderTopWidth: index > 0 ? 1 : 0,\r\n        opacity: isHidden ? 0.5 : undefined,\r\n        ...style,\r\n      }}\r\n      data-testid=\"category-row\"\r\n      innerRef={listItemRef}\r\n    >\r\n      <View\r\n        style={{\r\n          flex: 1,\r\n          justifyContent: 'center',\r\n          alignItems: 'flex-start',\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"bare\"\r\n          style={{\r\n            maxWidth: sidebarColumnWidth,\r\n          }}\r\n          onPress={() => onEdit?.(category.id)}\r\n        >\r\n          <View\r\n            style={{\r\n              flexDirection: 'row',\r\n              alignItems: 'center',\r\n              justifyContent: 'flex-start',\r\n            }}\r\n          >\r\n            <Text\r\n              style={{\r\n                ...styles.lineClamp(2),\r\n                width: sidebarColumnWidth,\r\n                textAlign: 'left',\r\n                ...styles.smallText,\r\n              }}\r\n              data-testid=\"category-name\"\r\n            >\r\n              {category.name}\r\n            </Text>\r\n            <SvgCheveronRight\r\n              style={{ flexShrink: 0, color: theme.tableTextSubdued }}\r\n              width={14}\r\n              height={14}\r\n            />\r\n          </View>\r\n        </Button>\r\n      </View>\r\n      <View\r\n        style={{\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          flexDirection: 'row',\r\n          opacity,\r\n        }}\r\n      >\r\n        <View\r\n          style={{\r\n            ...(!show3Cols && !showBudgetedCol && { display: 'none' }),\r\n            width: columnWidth,\r\n            justifyContent: 'center',\r\n            alignItems: 'flex-end',\r\n          }}\r\n        >\r\n          <BudgetCell\r\n            key={`${show3Cols}|${showBudgetedCol}`}\r\n            binding={budgeted}\r\n            type=\"financial\"\r\n            category={category}\r\n            month={month}\r\n            onBudgetAction={onBudgetAction}\r\n          />\r\n        </View>\r\n        <View\r\n          style={{\r\n            ...(!show3Cols && showBudgetedCol && { display: 'none' }),\r\n            width: columnWidth,\r\n            justifyContent: 'center',\r\n            alignItems: 'flex-end',\r\n          }}\r\n        >\r\n          <CellValue\r\n            binding={spent}\r\n            type=\"financial\"\r\n            aria-label={`Spent amount for ${category.name} category`}\r\n          >\r\n            {({ type, value }) => (\r\n              <Button\r\n                variant=\"bare\"\r\n                style={{\r\n                  ...PILL_STYLE,\r\n                }}\r\n                onPress={onShowActivity}\r\n                aria-label={`Show transactions for ${category.name} category`}\r\n              >\r\n                <PrivacyFilter>\r\n                  <AutoTextSize\r\n                    key={`${value}|${show3Cols}|${showBudgetedCol}`}\r\n                    as={Text}\r\n                    minFontSizePx={6}\r\n                    maxFontSizePx={12}\r\n                    mode=\"oneline\"\r\n                    style={{\r\n                      ...makeAmountGrey(value),\r\n                      maxWidth: columnWidth,\r\n                      textAlign: 'right',\r\n                      fontSize: 12,\r\n                    }}\r\n                  >\r\n                    {format(value, type)}\r\n                  </AutoTextSize>\r\n                </PrivacyFilter>\r\n              </Button>\r\n            )}\r\n          </CellValue>\r\n        </View>\r\n        <View\r\n          style={{\r\n            width: columnWidth,\r\n            justifyContent: 'center',\r\n            alignItems: 'flex-end',\r\n          }}\r\n        >\r\n          <BalanceWithCarryover\r\n            aria-label={`Balance for ${category.name} category`}\r\n            type=\"financial\"\r\n            carryover={carryover}\r\n            balance={balance}\r\n            goal={goal}\r\n            budgeted={budgeted}\r\n            longGoal={longGoal}\r\n            CarryoverIndicator={({ style }) => (\r\n              <View\r\n                style={{\r\n                  position: 'absolute',\r\n                  right: '-3px',\r\n                  top: '-5px',\r\n                  borderRadius: '50%',\r\n                  backgroundColor: style?.color ?? theme.pillText,\r\n                }}\r\n              >\r\n                <SvgArrowThickRight\r\n                  width={11}\r\n                  height={11}\r\n                  style={{ color: theme.pillBackgroundLight }}\r\n                />\r\n              </View>\r\n            )}\r\n          >\r\n            {({ type, value }) => (\r\n              <Button\r\n                variant=\"bare\"\r\n                style={{\r\n                  ...PILL_STYLE,\r\n                  maxWidth: columnWidth,\r\n                }}\r\n                onPress={onOpenBalanceMenu}\r\n                aria-label={`Open balance menu for ${category.name} category`}\r\n              >\r\n                <PrivacyFilter>\r\n                  <AutoTextSize\r\n                    key={value}\r\n                    as={Text}\r\n                    minFontSizePx={6}\r\n                    maxFontSizePx={12}\r\n                    mode=\"oneline\"\r\n                    style={{\r\n                      maxWidth: columnWidth,\r\n                      ...makeBalanceAmountStyle(\r\n                        value,\r\n                        goalValue,\r\n                        budgetedValue,\r\n                      ),\r\n                      textAlign: 'right',\r\n                      fontSize: 12,\r\n                    }}\r\n                  >\r\n                    {format(value, type)}\r\n                  </AutoTextSize>\r\n                </PrivacyFilter>\r\n              </Button>\r\n            )}\r\n          </BalanceWithCarryover>\r\n        </View>\r\n      </View>\r\n    </ListItem>\r\n  );\r\n\r\n  return <View>{content}</View>;\r\n\r\n  // <Draggable\r\n  //   id={category.id}\r\n  //   type=\"category\"\r\n  //   preview={({ pending, style }) => (\r\n  //     <BudgetCategoryPreview\r\n  //       name={category.name}\r\n  //       pending={pending}\r\n  //       style={style}\r\n  //     />\r\n  //   )}\r\n  //   gestures={gestures}\r\n  // >\r\n  //   <Droppable\r\n  //     type=\"category\"\r\n  //     getActiveStatus={(x, y, { layout }, { id }) => {\r\n  //       let pos = (y - layout.y) / layout.height;\r\n  //       return pos < 0.5 ? 'top' : 'bottom';\r\n  //     }}\r\n  //     onDrop={(id, type, droppable, status) =>\r\n  //       props.onReorder(id.replace('category:', ''), {\r\n  //         aroundCategory: {\r\n  //           id: category.id,\r\n  //           position: status\r\n  //         }\r\n  //       })\r\n  //     }\r\n  //   >\r\n  //     {() => content}\r\n  //   </Droppable>\r\n  // </Draggable>\r\n});\r\n\r\nconst ExpenseGroupHeader = memo(function ExpenseGroupHeader({\r\n  group,\r\n  budgeted,\r\n  spent,\r\n  balance,\r\n  editMode,\r\n  onEdit,\r\n  blank,\r\n  show3Cols,\r\n  showBudgetedCol,\r\n  collapsed,\r\n  onToggleCollapse,\r\n}) {\r\n  const opacity = blank ? 0 : 1;\r\n  const listItemRef = useRef();\r\n  const format = useFormat();\r\n  const sidebarColumnWidth = getColumnWidth({\r\n    show3Cols,\r\n    isSidebar: true,\r\n    offset: -3.5,\r\n  });\r\n  const columnWidth = getColumnWidth({ show3Cols });\r\n\r\n  const amountStyle = {\r\n    width: columnWidth,\r\n    fontSize: 12,\r\n    fontWeight: '500',\r\n    paddingLeft: 5,\r\n    textAlign: 'right',\r\n  };\r\n\r\n  const content = (\r\n    <ListItem\r\n      style={{\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        backgroundColor: theme.tableRowHeaderBackground,\r\n        opacity: !!group.hidden ? 0.5 : undefined,\r\n        paddingLeft: 0,\r\n      }}\r\n      data-testid=\"category-group-row\"\r\n      innerRef={listItemRef}\r\n    >\r\n      <View\r\n        style={{\r\n          flex: 1,\r\n          flexDirection: 'row',\r\n          justifyContent: 'flex-start',\r\n          width: sidebarColumnWidth,\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"bare\"\r\n          className={css({\r\n            flexShrink: 0,\r\n            color: theme.pageTextSubdued,\r\n            '&[data-pressed]': {\r\n              backgroundColor: 'transparent',\r\n            },\r\n          })}\r\n          onPress={() => onToggleCollapse?.(group.id)}\r\n        >\r\n          <SvgExpandArrow\r\n            width={8}\r\n            height={8}\r\n            style={{\r\n              flexShrink: 0,\r\n              transition: 'transform .1s',\r\n              transform: collapsed ? 'rotate(-90deg)' : '',\r\n            }}\r\n          />\r\n        </Button>\r\n        <Button\r\n          variant=\"bare\"\r\n          style={{\r\n            maxWidth: sidebarColumnWidth,\r\n          }}\r\n          onPress={() => onEdit?.(group.id)}\r\n        >\r\n          <View\r\n            style={{\r\n              flexDirection: 'row',\r\n              alignItems: 'center',\r\n              justifyContent: 'flex-start',\r\n            }}\r\n          >\r\n            <Text\r\n              style={{\r\n                ...styles.lineClamp(2),\r\n                width: sidebarColumnWidth,\r\n                textAlign: 'left',\r\n                ...styles.smallText,\r\n                fontWeight: '500',\r\n              }}\r\n              data-testid=\"category-group-name\"\r\n            >\r\n              {group.name}\r\n            </Text>\r\n            <SvgCheveronRight\r\n              style={{ flexShrink: 0, color: theme.tableTextSubdued }}\r\n              width={14}\r\n              height={14}\r\n            />\r\n          </View>\r\n        </Button>\r\n      </View>\r\n      <View\r\n        style={{\r\n          flexDirection: 'row',\r\n          justifyContent: 'flex-end',\r\n          alignItems: 'center',\r\n          opacity,\r\n          paddingRight: 5,\r\n        }}\r\n      >\r\n        <View\r\n          style={{ ...(!show3Cols && !showBudgetedCol && { display: 'none' }) }}\r\n        >\r\n          <CellValue binding={budgeted} type=\"financial\">\r\n            {({ type, value }) => (\r\n              <View>\r\n                <PrivacyFilter>\r\n                  <AutoTextSize\r\n                    key={value}\r\n                    as={Text}\r\n                    minFontSizePx={6}\r\n                    maxFontSizePx={12}\r\n                    mode=\"oneline\"\r\n                    style={amountStyle}\r\n                  >\r\n                    {format(value, type)}\r\n                  </AutoTextSize>\r\n                </PrivacyFilter>\r\n              </View>\r\n            )}\r\n          </CellValue>\r\n        </View>\r\n        <View\r\n          style={{ ...(!show3Cols && showBudgetedCol && { display: 'none' }) }}\r\n        >\r\n          <CellValue binding={spent} type=\"financial\">\r\n            {({ type, value }) => (\r\n              <View>\r\n                <PrivacyFilter>\r\n                  <AutoTextSize\r\n                    key={value}\r\n                    as={Text}\r\n                    minFontSizePx={6}\r\n                    maxFontSizePx={12}\r\n                    mode=\"oneline\"\r\n                    style={amountStyle}\r\n                  >\r\n                    {format(value, type)}\r\n                  </AutoTextSize>\r\n                </PrivacyFilter>\r\n              </View>\r\n            )}\r\n          </CellValue>\r\n        </View>\r\n        <CellValue binding={balance} type=\"financial\">\r\n          {({ type, value }) => (\r\n            <View>\r\n              <PrivacyFilter>\r\n                <AutoTextSize\r\n                  key={value}\r\n                  as={Text}\r\n                  minFontSizePx={6}\r\n                  maxFontSizePx={12}\r\n                  mode=\"oneline\"\r\n                  style={amountStyle}\r\n                >\r\n                  {format(value, type)}\r\n                </AutoTextSize>\r\n              </PrivacyFilter>\r\n            </View>\r\n          )}\r\n        </CellValue>\r\n      </View>\r\n\r\n      {/* {editMode && (\r\n        <View>\r\n          <Button\r\n            onPointerUp={() => onAddCategory(group.id, group.is_income)}\r\n            style={{ padding: 10 }}\r\n          >\r\n            <Add width={15} height={15} />\r\n          </Button>\r\n        </View>\r\n      )} */}\r\n    </ListItem>\r\n  );\r\n\r\n  if (!editMode) {\r\n    return content;\r\n  }\r\n\r\n  return content;\r\n  // <Droppable\r\n  //   type=\"category\"\r\n  //   getActiveStatus={(x, y, { layout }, { id }) => {\r\n  //     return 'bottom';\r\n  //   }}\r\n  //   onDrop={(id, type, droppable, status) =>\r\n  //     props.onReorderCategory(id, { inGroup: group.id })\r\n  //   }\r\n  // >\r\n  //   {() => content}\r\n  // </Droppable>\r\n});\r\n\r\nconst IncomeGroupHeader = memo(function IncomeGroupHeader({\r\n  group,\r\n  budgeted,\r\n  balance,\r\n  onEdit,\r\n  collapsed,\r\n  onToggleCollapse,\r\n}) {\r\n  const listItemRef = useRef();\r\n  const format = useFormat();\r\n  const sidebarColumnWidth = getColumnWidth({ isSidebar: true, offset: -13.5 });\r\n  const columnWidth = getColumnWidth();\r\n\r\n  return (\r\n    <ListItem\r\n      style={{\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        backgroundColor: theme.tableRowHeaderBackground,\r\n        opacity: !!group.hidden ? 0.5 : undefined,\r\n        paddingLeft: 0,\r\n      }}\r\n      innerRef={listItemRef}\r\n      data-testid=\"category-group-row\"\r\n    >\r\n      <View\r\n        style={{\r\n          flex: 1,\r\n          flexDirection: 'row',\r\n          justifyContent: 'flex-start',\r\n          width: sidebarColumnWidth,\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"bare\"\r\n          className={css({\r\n            flexShrink: 0,\r\n            color: theme.pageTextSubdued,\r\n            '&[data-pressed]': {\r\n              backgroundColor: 'transparent',\r\n            },\r\n          })}\r\n          onPress={() => onToggleCollapse?.(group.id)}\r\n        >\r\n          <SvgExpandArrow\r\n            width={8}\r\n            height={8}\r\n            style={{\r\n              flexShrink: 0,\r\n              transition: 'transform .1s',\r\n              transform: collapsed ? 'rotate(-90deg)' : '',\r\n            }}\r\n          />\r\n        </Button>\r\n        <Button\r\n          variant=\"bare\"\r\n          style={{\r\n            maxWidth: sidebarColumnWidth,\r\n          }}\r\n          onPress={() => onEdit?.(group.id)}\r\n        >\r\n          <View\r\n            style={{\r\n              flexDirection: 'row',\r\n              alignItems: 'center',\r\n              justifyContent: 'flex-start',\r\n            }}\r\n          >\r\n            <Text\r\n              style={{\r\n                ...styles.lineClamp(2),\r\n                width: sidebarColumnWidth,\r\n                textAlign: 'left',\r\n                ...styles.smallText,\r\n              }}\r\n              data-testid=\"category-group-name\"\r\n            >\r\n              {group.name}\r\n            </Text>\r\n            <SvgCheveronRight\r\n              style={{ flexShrink: 0, color: theme.tableTextSubdued }}\r\n              width={14}\r\n              height={14}\r\n            />\r\n          </View>\r\n        </Button>\r\n      </View>\r\n      <View\r\n        style={{\r\n          flexDirection: 'row',\r\n          justifyContent: 'flex-end',\r\n          alignItems: 'center',\r\n          paddingRight: 5,\r\n        }}\r\n      >\r\n        {budgeted && (\r\n          <CellValue binding={budgeted} type=\"financial\">\r\n            {({ type, value }) => (\r\n              <View>\r\n                <PrivacyFilter>\r\n                  <AutoTextSize\r\n                    key={value}\r\n                    as={Text}\r\n                    minFontSizePx={6}\r\n                    maxFontSizePx={12}\r\n                    mode=\"oneline\"\r\n                    style={{\r\n                      width: columnWidth,\r\n                      justifyContent: 'center',\r\n                      alignItems: 'flex-end',\r\n                      paddingLeft: 5,\r\n                      textAlign: 'right',\r\n                      fontSize: 12,\r\n                      fontWeight: '500',\r\n                    }}\r\n                  >\r\n                    {format(value, type)}\r\n                  </AutoTextSize>\r\n                </PrivacyFilter>\r\n              </View>\r\n            )}\r\n          </CellValue>\r\n        )}\r\n        <CellValue binding={balance} type=\"financial\">\r\n          {({ type, value }) => (\r\n            <View>\r\n              <PrivacyFilter>\r\n                <AutoTextSize\r\n                  key={value}\r\n                  as={Text}\r\n                  minFontSizePx={6}\r\n                  maxFontSizePx={12}\r\n                  mode=\"oneline\"\r\n                  style={{\r\n                    width: columnWidth,\r\n                    justifyContent: 'center',\r\n                    alignItems: 'flex-end',\r\n                    paddingLeft: 5,\r\n                    textAlign: 'right',\r\n                    fontSize: 12,\r\n                    fontWeight: '500',\r\n                  }}\r\n                >\r\n                  {format(value, type)}\r\n                </AutoTextSize>\r\n              </PrivacyFilter>\r\n            </View>\r\n          )}\r\n        </CellValue>\r\n      </View>\r\n    </ListItem>\r\n  );\r\n});\r\n\r\nconst IncomeCategory = memo(function IncomeCategory({\r\n  index,\r\n  category,\r\n  budgeted,\r\n  balance,\r\n  month,\r\n  style,\r\n  onEdit,\r\n  onBudgetAction,\r\n}) {\r\n  const listItemRef = useRef();\r\n  const format = useFormat();\r\n  const sidebarColumnWidth = getColumnWidth({ isSidebar: true, offset: -10 });\r\n  const columnWidth = getColumnWidth();\r\n\r\n  return (\r\n    <ListItem\r\n      style={{\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        backgroundColor: 'transparent',\r\n        borderBottomWidth: 0,\r\n        borderTopWidth: index > 0 ? 1 : 0,\r\n        opacity: !!category.hidden ? 0.5 : undefined,\r\n        ...style,\r\n      }}\r\n      data-testid=\"category-row\"\r\n      innerRef={listItemRef}\r\n    >\r\n      <View\r\n        style={{\r\n          flex: 1,\r\n          justifyContent: 'center',\r\n          alignItems: 'flex-start',\r\n          width: sidebarColumnWidth,\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"bare\"\r\n          style={{\r\n            maxWidth: sidebarColumnWidth,\r\n          }}\r\n          onPress={() => onEdit?.(category.id)}\r\n        >\r\n          <View\r\n            style={{\r\n              flexDirection: 'row',\r\n              alignItems: 'center',\r\n              justifyContent: 'flex-start',\r\n            }}\r\n          >\r\n            <Text\r\n              style={{\r\n                ...styles.lineClamp(2),\r\n                width: sidebarColumnWidth,\r\n                textAlign: 'left',\r\n                ...styles.smallText,\r\n              }}\r\n              data-testid=\"category-name\"\r\n            >\r\n              {category.name}\r\n            </Text>\r\n            <SvgCheveronRight\r\n              style={{ flexShrink: 0, color: theme.tableTextSubdued }}\r\n              width={14}\r\n              height={14}\r\n            />\r\n          </View>\r\n        </Button>\r\n      </View>\r\n      <View\r\n        style={{\r\n          flexDirection: 'row',\r\n          justifyContent: 'flex-end',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        {budgeted && (\r\n          <View\r\n            style={{\r\n              width: columnWidth,\r\n              justifyContent: 'center',\r\n              alignItems: 'flex-end',\r\n            }}\r\n          >\r\n            <BudgetCell\r\n              binding={budgeted}\r\n              type=\"financial\"\r\n              category={category}\r\n              month={month}\r\n              onBudgetAction={onBudgetAction}\r\n            />\r\n          </View>\r\n        )}\r\n        <CellValue\r\n          binding={balance}\r\n          type=\"financial\"\r\n          aria-label={`Balance for ${category.name} category`}\r\n        >\r\n          {({ type, value }) => (\r\n            <View>\r\n              <PrivacyFilter>\r\n                <AutoTextSize\r\n                  key={value}\r\n                  as={Text}\r\n                  minFontSizePx={6}\r\n                  maxFontSizePx={12}\r\n                  mode=\"oneline\"\r\n                  style={{\r\n                    width: columnWidth,\r\n                    justifyContent: 'center',\r\n                    alignItems: 'flex-end',\r\n                    textAlign: 'right',\r\n                    fontSize: 12,\r\n                    paddingRight: 5,\r\n                  }}\r\n                >\r\n                  {format(value, type)}\r\n                </AutoTextSize>\r\n              </PrivacyFilter>\r\n            </View>\r\n          )}\r\n        </CellValue>\r\n      </View>\r\n    </ListItem>\r\n  );\r\n});\r\n\r\nconst ExpenseGroup = memo(function ExpenseGroup({\r\n  type,\r\n  group,\r\n  editMode,\r\n  onEditGroup,\r\n  onEditCategory,\r\n  // gestures,\r\n  month,\r\n  // onReorderCategory,\r\n  // onReorderGroup,\r\n  onAddCategory,\r\n  onBudgetAction,\r\n  showBudgetedCol,\r\n  show3Cols,\r\n  showHiddenCategories,\r\n  collapsed,\r\n  onToggleCollapse,\r\n}) {\r\n  function editable(content) {\r\n    if (!editMode) {\r\n      return content;\r\n    }\r\n\r\n    return content;\r\n    // <Draggable\r\n    //   id={group.id}\r\n    //   type=\"group\"\r\n    //   preview={({ pending, style }) => (\r\n    //     <BudgetGroupPreview group={group} pending={pending} style={style} />\r\n    //   )}\r\n    //   gestures={gestures}\r\n    // >\r\n    //   <Droppable\r\n    //     type=\"group\"\r\n    //     getActiveStatus={(x, y, { layout }, { id }) => {\r\n    //       let pos = (y - layout.y) / layout.height;\r\n    //       return pos < 0.5 ? 'top' : 'bottom';\r\n    //     }}\r\n    //     onDrop={(id, type, droppable, status) => {\r\n    //       onReorderGroup(id, group.id, status);\r\n    //     }}\r\n    //   >\r\n    //     {() => content}\r\n    //   </Droppable>\r\n    // </Draggable>\r\n  }\r\n\r\n  return editable(\r\n    <Card\r\n      style={{\r\n        marginTop: 4,\r\n        marginBottom: 4,\r\n      }}\r\n    >\r\n      <ExpenseGroupHeader\r\n        group={group}\r\n        showBudgetedCol={showBudgetedCol}\r\n        budgeted={\r\n          type === 'report'\r\n            ? trackingBudget.groupBudgeted(group.id)\r\n            : envelopeBudget.groupBudgeted(group.id)\r\n        }\r\n        spent={\r\n          type === 'report'\r\n            ? trackingBudget.groupSumAmount(group.id)\r\n            : envelopeBudget.groupSumAmount(group.id)\r\n        }\r\n        balance={\r\n          type === 'report'\r\n            ? trackingBudget.groupBalance(group.id)\r\n            : envelopeBudget.groupBalance(group.id)\r\n        }\r\n        show3Cols={show3Cols}\r\n        editMode={editMode}\r\n        onAddCategory={onAddCategory}\r\n        onEdit={onEditGroup}\r\n        collapsed={collapsed}\r\n        onToggleCollapse={onToggleCollapse}\r\n        // onReorderCategory={onReorderCategory}\r\n      />\r\n\r\n      {group.categories\r\n        .filter(\r\n          category => !collapsed && (!category.hidden || showHiddenCategories),\r\n        )\r\n        .map((category, index) => {\r\n          return (\r\n            <ExpenseCategory\r\n              key={category.id}\r\n              index={index}\r\n              show3Cols={show3Cols}\r\n              type={type}\r\n              category={category}\r\n              isHidden={!!category.hidden || group.hidden}\r\n              goal={\r\n                type === 'report'\r\n                  ? trackingBudget.catGoal(category.id)\r\n                  : envelopeBudget.catGoal(category.id)\r\n              }\r\n              longGoal={\r\n                type === 'report'\r\n                  ? trackingBudget.catLongGoal(category.id)\r\n                  : envelopeBudget.catLongGoal(category.id)\r\n              }\r\n              budgeted={\r\n                type === 'report'\r\n                  ? trackingBudget.catBudgeted(category.id)\r\n                  : envelopeBudget.catBudgeted(category.id)\r\n              }\r\n              spent={\r\n                type === 'report'\r\n                  ? trackingBudget.catSumAmount(category.id)\r\n                  : envelopeBudget.catSumAmount(category.id)\r\n              }\r\n              balance={\r\n                type === 'report'\r\n                  ? trackingBudget.catBalance(category.id)\r\n                  : envelopeBudget.catBalance(category.id)\r\n              }\r\n              carryover={\r\n                type === 'report'\r\n                  ? trackingBudget.catCarryover(category.id)\r\n                  : envelopeBudget.catCarryover(category.id)\r\n              }\r\n              style={{\r\n                backgroundColor: theme.tableBackground,\r\n              }}\r\n              showBudgetedCol={showBudgetedCol}\r\n              editMode={editMode}\r\n              onEdit={onEditCategory}\r\n              // gestures={gestures}\r\n              month={month}\r\n              // onReorder={onReorderCategory}\r\n              onBudgetAction={onBudgetAction}\r\n            />\r\n          );\r\n        })}\r\n    </Card>,\r\n  );\r\n});\r\n\r\nfunction IncomeGroup({\r\n  type,\r\n  group,\r\n  month,\r\n  onAddCategory,\r\n  showHiddenCategories,\r\n  editMode,\r\n  onEditGroup,\r\n  onEditCategory,\r\n  onBudgetAction,\r\n  collapsed,\r\n  onToggleCollapse,\r\n}) {\r\n  const columnWidth = getColumnWidth();\r\n  return (\r\n    <View>\r\n      <View\r\n        style={{\r\n          flexDirection: 'row',\r\n          alignItems: 'center',\r\n          justifyContent: 'flex-end',\r\n          marginTop: 50,\r\n          marginBottom: 5,\r\n          marginRight: 15,\r\n        }}\r\n      >\r\n        {type === 'report' && (\r\n          <Label title=\"Budgeted\" style={{ width: columnWidth }} />\r\n        )}\r\n        <Label title=\"Received\" style={{ width: columnWidth }} />\r\n      </View>\r\n\r\n      <Card style={{ marginTop: 0 }}>\r\n        <IncomeGroupHeader\r\n          group={group}\r\n          budgeted={\r\n            type === 'report' ? trackingBudget.groupBudgeted(group.id) : null\r\n          }\r\n          balance={\r\n            type === 'report'\r\n              ? trackingBudget.groupSumAmount(group.id)\r\n              : envelopeBudget.groupSumAmount(group.id)\r\n          }\r\n          onAddCategory={onAddCategory}\r\n          editMode={editMode}\r\n          onEdit={onEditGroup}\r\n          collapsed={collapsed}\r\n          onToggleCollapse={onToggleCollapse}\r\n        />\r\n\r\n        {group.categories\r\n          .filter(\r\n            category =>\r\n              !collapsed && (!category.hidden || showHiddenCategories),\r\n          )\r\n          .map((category, index) => {\r\n            return (\r\n              <IncomeCategory\r\n                key={category.id}\r\n                index={index}\r\n                category={category}\r\n                month={month}\r\n                type={type}\r\n                budgeted={\r\n                  type === 'report'\r\n                    ? trackingBudget.catBudgeted(category.id)\r\n                    : null\r\n                }\r\n                balance={\r\n                  type === 'report'\r\n                    ? trackingBudget.catSumAmount(category.id)\r\n                    : envelopeBudget.catSumAmount(category.id)\r\n                }\r\n                style={{\r\n                  backgroundColor: theme.tableBackground,\r\n                }}\r\n                editMode={editMode}\r\n                onEdit={onEditCategory}\r\n                onBudgetAction={onBudgetAction}\r\n              />\r\n            );\r\n          })}\r\n      </Card>\r\n    </View>\r\n  );\r\n}\r\n\r\nfunction UncategorizedButton() {\r\n  const count = useSheetValue(uncategorizedCount());\r\n  if (count === null || count <= 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        padding: 5,\r\n        paddingBottom: 2,\r\n      }}\r\n    >\r\n      <Link\r\n        variant=\"button\"\r\n        type=\"button\"\r\n        buttonVariant=\"primary\"\r\n        to=\"/accounts/uncategorized\"\r\n        style={{\r\n          border: 0,\r\n          justifyContent: 'flex-start',\r\n          padding: '1.25em',\r\n        }}\r\n      >\r\n        {count} uncategorized {count === 1 ? 'transaction' : 'transactions'}\r\n        <View style={{ flex: 1 }} />\r\n        <SvgArrowThinRight width=\"15\" height=\"15\" />\r\n      </Link>\r\n    </View>\r\n  );\r\n}\r\n\r\nfunction BudgetGroups({\r\n  type,\r\n  categoryGroups,\r\n  onEditGroup,\r\n  onEditCategory,\r\n  editMode,\r\n  gestures,\r\n  month,\r\n  onSaveCategory,\r\n  onDeleteCategory,\r\n  onAddCategory,\r\n  onReorderCategory,\r\n  onReorderGroup,\r\n  onBudgetAction,\r\n  showBudgetedCol,\r\n  show3Cols,\r\n  showHiddenCategories,\r\n}) {\r\n  const separateGroups = memoizeOne(groups => {\r\n    return {\r\n      incomeGroup: groups.find(group => group.is_income),\r\n      expenseGroups: groups.filter(group => !group.is_income),\r\n    };\r\n  });\r\n\r\n  const { incomeGroup, expenseGroups } = separateGroups(categoryGroups);\r\n  const [collapsedGroupIds = [], setCollapsedGroupIdsPref] =\r\n    useLocalPref('budget.collapsed');\r\n\r\n  const onToggleCollapse = id => {\r\n    setCollapsedGroupIdsPref(\r\n      collapsedGroupIds.includes(id)\r\n        ? collapsedGroupIds.filter(collapsedId => collapsedId !== id)\r\n        : [...collapsedGroupIds, id],\r\n    );\r\n  };\r\n\r\n  return (\r\n    <View\r\n      data-testid=\"budget-groups\"\r\n      style={{ flex: '1 0 auto', overflowY: 'auto', paddingBottom: 15 }}\r\n    >\r\n      {expenseGroups\r\n        .filter(group => !group.hidden || showHiddenCategories)\r\n        .map(group => {\r\n          return (\r\n            <ExpenseGroup\r\n              key={group.id}\r\n              type={type}\r\n              group={group}\r\n              showBudgetedCol={showBudgetedCol}\r\n              gestures={gestures}\r\n              month={month}\r\n              editMode={editMode}\r\n              onEditGroup={onEditGroup}\r\n              onEditCategory={onEditCategory}\r\n              onSaveCategory={onSaveCategory}\r\n              onDeleteCategory={onDeleteCategory}\r\n              onAddCategory={onAddCategory}\r\n              onReorderCategory={onReorderCategory}\r\n              onReorderGroup={onReorderGroup}\r\n              onBudgetAction={onBudgetAction}\r\n              show3Cols={show3Cols}\r\n              showHiddenCategories={showHiddenCategories}\r\n              collapsed={collapsedGroupIds.includes(group.id)}\r\n              onToggleCollapse={onToggleCollapse}\r\n            />\r\n          );\r\n        })}\r\n\r\n      {incomeGroup && (\r\n        <IncomeGroup\r\n          type={type}\r\n          group={incomeGroup}\r\n          month={month}\r\n          onAddCategory={onAddCategory}\r\n          onSaveCategory={onSaveCategory}\r\n          onDeleteCategory={onDeleteCategory}\r\n          showHiddenCategories={showHiddenCategories}\r\n          editMode={editMode}\r\n          onEditGroup={onEditGroup}\r\n          onEditCategory={onEditCategory}\r\n          onBudgetAction={onBudgetAction}\r\n          collapsed={collapsedGroupIds.includes(incomeGroup.id)}\r\n          onToggleCollapse={onToggleCollapse}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n\r\nexport function BudgetTable({\r\n  type,\r\n  categoryGroups,\r\n  month,\r\n  monthBounds,\r\n  // editMode,\r\n  onPrevMonth,\r\n  onNextMonth,\r\n  onSaveGroup,\r\n  onDeleteGroup,\r\n  onAddCategory,\r\n  onSaveCategory,\r\n  onDeleteCategory,\r\n  onReorderCategory,\r\n  onReorderGroup,\r\n  onShowBudgetSummary,\r\n  onBudgetAction,\r\n  onRefresh,\r\n  onEditGroup,\r\n  onEditCategory,\r\n  onOpenBudgetPageMenu,\r\n  onOpenBudgetMonthMenu,\r\n}) {\r\n  const { width } = useResponsive();\r\n  const show3Cols = width >= 360;\r\n\r\n  // let editMode = false; // neuter editMode -- sorry, not rewriting drag-n-drop right now\r\n\r\n  const [showSpentColumn = false, setShowSpentColumnPref] = useLocalPref(\r\n    'mobile.showSpentColumn',\r\n  );\r\n\r\n  function toggleSpentColumn() {\r\n    setShowSpentColumnPref(!showSpentColumn);\r\n  }\r\n\r\n  const [showHiddenCategories = false] = useLocalPref(\r\n    'budget.showHiddenCategories',\r\n  );\r\n\r\n  return (\r\n    <Page\r\n      padding={0}\r\n      header={\r\n        <MobilePageHeader\r\n          title={\r\n            <MonthSelector\r\n              month={month}\r\n              monthBounds={monthBounds}\r\n              onOpenMonthMenu={onOpenBudgetMonthMenu}\r\n              onPrevMonth={onPrevMonth}\r\n              onNextMonth={onNextMonth}\r\n            />\r\n          }\r\n          leftContent={\r\n            <Button\r\n              variant=\"bare\"\r\n              style={{ margin: 10 }}\r\n              onPress={onOpenBudgetPageMenu}\r\n              aria-label=\"Budget page menu\"\r\n            >\r\n              <SvgLogo\r\n                style={{ color: theme.mobileHeaderText }}\r\n                width=\"20\"\r\n                height=\"20\"\r\n              />\r\n              <SvgCheveronRight\r\n                style={{ flexShrink: 0, color: theme.mobileHeaderTextSubdued }}\r\n                width=\"14\"\r\n                height=\"14\"\r\n              />\r\n            </Button>\r\n          }\r\n        />\r\n      }\r\n    >\r\n      <BudgetTableHeader\r\n        type={type}\r\n        month={month}\r\n        show3Cols={show3Cols}\r\n        showSpentColumn={showSpentColumn}\r\n        toggleSpentColumn={toggleSpentColumn}\r\n        onShowBudgetSummary={onShowBudgetSummary}\r\n      />\r\n      <PullToRefresh onRefresh={onRefresh}>\r\n        <View\r\n          data-testid=\"budget-table\"\r\n          style={{\r\n            backgroundColor: theme.pageBackground,\r\n            paddingBottom: MOBILE_NAV_HEIGHT,\r\n          }}\r\n        >\r\n          <UncategorizedButton />\r\n          <BudgetGroups\r\n            type={type}\r\n            categoryGroups={categoryGroups}\r\n            showBudgetedCol={!showSpentColumn}\r\n            show3Cols={show3Cols}\r\n            showHiddenCategories={showHiddenCategories}\r\n            month={month}\r\n            // gestures={gestures}\r\n            // editMode={editMode}\r\n            onEditGroup={onEditGroup}\r\n            onEditCategory={onEditCategory}\r\n            onSaveCategory={onSaveCategory}\r\n            onDeleteCategory={onDeleteCategory}\r\n            onAddCategory={onAddCategory}\r\n            onSaveGroup={onSaveGroup}\r\n            onDeleteGroup={onDeleteGroup}\r\n            onReorderCategory={onReorderCategory}\r\n            onReorderGroup={onReorderGroup}\r\n            onBudgetAction={onBudgetAction}\r\n          />\r\n        </View>\r\n      </PullToRefresh>\r\n    </Page>\r\n  );\r\n}\r\n\r\nfunction BudgetTableHeader({\r\n  show3Cols,\r\n  type,\r\n  month,\r\n  onShowBudgetSummary,\r\n  showSpentColumn,\r\n  toggleSpentColumn,\r\n}) {\r\n  const format = useFormat();\r\n  const buttonStyle = {\r\n    padding: 0,\r\n    backgroundColor: 'transparent',\r\n    borderRadius: 'unset',\r\n  };\r\n  const sidebarColumnWidth = getColumnWidth({ show3Cols, isSidebar: true });\r\n  const columnWidth = getColumnWidth({ show3Cols });\r\n\r\n  const amountStyle = {\r\n    color: theme.formInputText,\r\n    textAlign: 'right',\r\n    fontSize: 12,\r\n    fontWeight: '500',\r\n  };\r\n\r\n  return (\r\n    <View\r\n      data-testid=\"budget-table-header\"\r\n      style={{\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        flexShrink: 0,\r\n        padding: '10px 15px',\r\n        paddingLeft: 10,\r\n        backgroundColor: theme.tableRowHeaderBackground,\r\n        borderBottomWidth: 1,\r\n        borderColor: theme.tableBorder,\r\n      }}\r\n    >\r\n      <View\r\n        style={{\r\n          width: sidebarColumnWidth,\r\n          flexDirection: 'row',\r\n          justifyContent: 'flex-start',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        {type === 'report' ? (\r\n          <Saved\r\n            projected={month >= monthUtils.currentMonth()}\r\n            onPress={onShowBudgetSummary}\r\n            show3Cols={show3Cols}\r\n          />\r\n        ) : (\r\n          <ToBudget\r\n            toBudget={envelopeBudget.toBudget}\r\n            onPress={onShowBudgetSummary}\r\n            show3Cols={show3Cols}\r\n          />\r\n        )}\r\n      </View>\r\n      <View\r\n        style={{\r\n          flexDirection: 'row',\r\n          justifyContent: 'flex-end',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        {(show3Cols || !showSpentColumn) && (\r\n          <CellValue\r\n            binding={\r\n              type === 'report'\r\n                ? trackingBudget.totalBudgetedExpense\r\n                : envelopeBudget.totalBudgeted\r\n            }\r\n            type=\"financial\"\r\n          >\r\n            {({ type: formatType, value }) => (\r\n              <Button\r\n                variant=\"bare\"\r\n                isDisabled={show3Cols}\r\n                onPress={toggleSpentColumn}\r\n                style={{\r\n                  ...buttonStyle,\r\n                  width: columnWidth,\r\n                }}\r\n              >\r\n                <View style={{ flex: 1, alignItems: 'flex-end' }}>\r\n                  <View style={{ flexDirection: 'row', alignItems: 'center' }}>\r\n                    {!show3Cols && (\r\n                      <SvgViewShow\r\n                        width={12}\r\n                        height={12}\r\n                        style={{\r\n                          flexShrink: 0,\r\n                          color: theme.pageTextSubdued,\r\n                          marginRight: 5,\r\n                        }}\r\n                      />\r\n                    )}\r\n                    <Label\r\n                      title=\"Budgeted\"\r\n                      style={{ color: theme.formInputText, paddingRight: 4 }}\r\n                    />\r\n                  </View>\r\n                  <View>\r\n                    <PrivacyFilter>\r\n                      <AutoTextSize\r\n                        key={value}\r\n                        as={Text}\r\n                        minFontSizePx={6}\r\n                        maxFontSizePx={12}\r\n                        mode=\"oneline\"\r\n                        style={{\r\n                          ...amountStyle,\r\n                          paddingRight: 4,\r\n                        }}\r\n                      >\r\n                        {format(type === 'report' ? value : -value, formatType)}\r\n                      </AutoTextSize>\r\n                    </PrivacyFilter>\r\n                  </View>\r\n                </View>\r\n              </Button>\r\n            )}\r\n          </CellValue>\r\n        )}\r\n        {(show3Cols || showSpentColumn) && (\r\n          <CellValue\r\n            binding={\r\n              type === 'report'\r\n                ? trackingBudget.totalSpent\r\n                : envelopeBudget.totalSpent\r\n            }\r\n            type=\"financial\"\r\n          >\r\n            {({ type, value }) => (\r\n              <Button\r\n                variant=\"bare\"\r\n                isDisabled={show3Cols}\r\n                onPress={toggleSpentColumn}\r\n                style={{\r\n                  ...buttonStyle,\r\n                  width: columnWidth,\r\n                }}\r\n              >\r\n                <View style={{ flex: 1, alignItems: 'flex-end' }}>\r\n                  <View style={{ flexDirection: 'row', alignItems: 'center' }}>\r\n                    {!show3Cols && (\r\n                      <SvgViewShow\r\n                        width={12}\r\n                        height={12}\r\n                        style={{\r\n                          flexShrink: 0,\r\n                          color: theme.pageTextSubdued,\r\n                          marginRight: 5,\r\n                        }}\r\n                      />\r\n                    )}\r\n                    <Label\r\n                      title=\"Spent\"\r\n                      style={{ color: theme.formInputText, paddingRight: 4 }}\r\n                    />\r\n                  </View>\r\n                  <View>\r\n                    <PrivacyFilter>\r\n                      <AutoTextSize\r\n                        key={value}\r\n                        as={Text}\r\n                        minFontSizePx={6}\r\n                        maxFontSizePx={12}\r\n                        mode=\"oneline\"\r\n                        style={{\r\n                          ...amountStyle,\r\n                          paddingRight: 4,\r\n                        }}\r\n                      >\r\n                        {format(value, type)}\r\n                      </AutoTextSize>\r\n                    </PrivacyFilter>\r\n                  </View>\r\n                </View>\r\n              </Button>\r\n            )}\r\n          </CellValue>\r\n        )}\r\n        <CellValue\r\n          binding={\r\n            type === 'report'\r\n              ? trackingBudget.totalLeftover\r\n              : envelopeBudget.totalBalance\r\n          }\r\n          type=\"financial\"\r\n        >\r\n          {({ type, value }) => (\r\n            <View style={{ width: columnWidth }}>\r\n              <View style={{ flex: 1, alignItems: 'flex-end' }}>\r\n                <Label title=\"Balance\" style={{ color: theme.formInputText }} />\r\n                <View>\r\n                  <PrivacyFilter>\r\n                    <AutoTextSize\r\n                      key={value}\r\n                      as={Text}\r\n                      minFontSizePx={6}\r\n                      maxFontSizePx={12}\r\n                      mode=\"oneline\"\r\n                      style={{\r\n                        ...amountStyle,\r\n                      }}\r\n                    >\r\n                      {format(value, type)}\r\n                    </AutoTextSize>\r\n                  </PrivacyFilter>\r\n                </View>\r\n              </View>\r\n            </View>\r\n          )}\r\n        </CellValue>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nfunction MonthSelector({\r\n  month,\r\n  monthBounds,\r\n  onOpenMonthMenu,\r\n  onPrevMonth,\r\n  onNextMonth,\r\n}) {\r\n  const prevEnabled = month > monthBounds.start;\r\n  const nextEnabled = month < monthUtils.subMonths(monthBounds.end, 1);\r\n\r\n  const arrowButtonStyle = {\r\n    padding: 10,\r\n    margin: 2,\r\n  };\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flexDirection: 'row',\r\n      }}\r\n    >\r\n      <Button\r\n        aria-label=\"Previous month\"\r\n        variant=\"bare\"\r\n        onPress={() => {\r\n          if (prevEnabled) {\r\n            onPrevMonth();\r\n          }\r\n        }}\r\n        style={{ ...arrowButtonStyle, opacity: prevEnabled ? 1 : 0.6 }}\r\n      >\r\n        <SvgArrowThinLeft width=\"15\" height=\"15\" style={{ margin: -5 }} />\r\n      </Button>\r\n      <Button\r\n        variant=\"bare\"\r\n        style={{\r\n          textAlign: 'center',\r\n          fontSize: 16,\r\n          fontWeight: 500,\r\n          margin: '0 5px',\r\n        }}\r\n        onPress={() => {\r\n          onOpenMonthMenu?.(month);\r\n        }}\r\n        data-month={month}\r\n      >\r\n        <Text style={styles.underlinedText}>\r\n          {monthUtils.format(month, 'MMMM ‘yy')}\r\n        </Text>\r\n      </Button>\r\n      <Button\r\n        aria-label=\"Next month\"\r\n        variant=\"bare\"\r\n        onPress={() => {\r\n          if (nextEnabled) {\r\n            onNextMonth();\r\n          }\r\n        }}\r\n        style={{ ...arrowButtonStyle, opacity: nextEnabled ? 1 : 0.6 }}\r\n      >\r\n        <SvgArrowThinRight width=\"15\" height=\"15\" style={{ margin: -5 }} />\r\n      </Button>\r\n    </View>\r\n  );\r\n}\r\n","// @ts-strict-ignore\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  applyBudgetAction,\n  collapseModals,\n  createCategory,\n  createGroup,\n  deleteCategory,\n  deleteGroup,\n  getCategories,\n  moveCategory,\n  moveCategoryGroup,\n  pushModal,\n  updateCategory,\n  updateGroup,\n  sync,\n} from 'loot-core/client/actions';\nimport { useSpreadsheet } from 'loot-core/src/client/SpreadsheetProvider';\nimport { send, listen } from 'loot-core/src/platform/client/fetch';\nimport * as monthUtils from 'loot-core/src/shared/months';\n\nimport { useCategories } from '../../../hooks/useCategories';\nimport { useLocalPref } from '../../../hooks/useLocalPref';\nimport { useSyncedPref } from '../../../hooks/useSyncedPref';\nimport { AnimatedLoading } from '../../../icons/AnimatedLoading';\nimport { theme } from '../../../style';\nimport { prewarmMonth } from '../../budget/util';\nimport { View } from '../../common/View';\nimport { NamespaceContext } from '../../spreadsheet/NamespaceContext';\nimport { SyncRefresh } from '../../SyncRefresh';\n\nimport { BudgetTable } from './BudgetTable';\n\nfunction isBudgetType(input?: string): input is 'rollover' | 'report' {\n  return ['rollover', 'report'].includes(input);\n}\n\nexport function Budget() {\n  const { list: categories, grouped: categoryGroups } = useCategories();\n  const [budgetTypePref] = useSyncedPref('budgetType');\n  const budgetType = isBudgetType(budgetTypePref) ? budgetTypePref : 'rollover';\n  const spreadsheet = useSpreadsheet();\n\n  const currMonth = monthUtils.currentMonth();\n  const [startMonth = currMonth, setStartMonthPref] =\n    useLocalPref('budget.startMonth');\n  const [bounds, setBounds] = useState({\n    start: startMonth,\n    end: startMonth,\n  });\n  // const [editMode, setEditMode] = useState(false);\n  const [initialized, setInitialized] = useState(false);\n  const [_numberFormat] = useSyncedPref('numberFormat');\n  const numberFormat = _numberFormat || 'comma-dot';\n  const [hideFraction] = useSyncedPref('hideFraction');\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    async function init() {\n      const { start, end } = await send('get-budget-bounds');\n      setBounds({ start, end });\n\n      await prewarmMonth(budgetType, spreadsheet, startMonth);\n\n      setInitialized(true);\n    }\n\n    init();\n\n    const unlisten = listen('sync-event', ({ type, tables }) => {\n      if (\n        type === 'success' &&\n        (tables.includes('categories') ||\n          tables.includes('category_mapping') ||\n          tables.includes('category_groups'))\n      ) {\n        // TODO: is this loading every time?\n        dispatch(getCategories());\n      }\n    });\n\n    return () => unlisten();\n  }, [budgetType, startMonth, dispatch, spreadsheet]);\n\n  const onBudgetAction = useCallback(\n    async (month, type, args) => {\n      dispatch(applyBudgetAction(month, type, args));\n    },\n    [dispatch],\n  );\n\n  const onShowBudgetSummary = useCallback(() => {\n    if (budgetType === 'report') {\n      dispatch(\n        pushModal('tracking-budget-summary', {\n          month: startMonth,\n        }),\n      );\n    } else {\n      dispatch(\n        pushModal('envelope-budget-summary', {\n          month: startMonth,\n          onBudgetAction,\n        }),\n      );\n    }\n  }, [budgetType, dispatch, onBudgetAction, startMonth]);\n\n  const onOpenNewCategoryGroupModal = useCallback(() => {\n    dispatch(\n      pushModal('new-category-group', {\n        onValidate: name => (!name ? 'Name is required.' : null),\n        onSubmit: async name => {\n          dispatch(collapseModals('budget-page-menu'));\n          dispatch(createGroup(name));\n        },\n      }),\n    );\n  }, [dispatch]);\n\n  const onOpenNewCategoryModal = useCallback(\n    (groupId, isIncome) => {\n      dispatch(\n        pushModal('new-category', {\n          onValidate: name => (!name ? 'Name is required.' : null),\n          onSubmit: async name => {\n            dispatch(collapseModals('category-group-menu'));\n            dispatch(createCategory(name, groupId, isIncome, false));\n          },\n        }),\n      );\n    },\n    [dispatch],\n  );\n\n  const onSaveGroup = useCallback(\n    group => {\n      dispatch(updateGroup(group));\n    },\n    [dispatch],\n  );\n\n  const onDeleteGroup = useCallback(\n    async groupId => {\n      const group = categoryGroups?.find(g => g.id === groupId);\n\n      if (!group) {\n        return;\n      }\n\n      let mustTransfer = false;\n      for (const category of group.categories ?? []) {\n        if (await send('must-category-transfer', { id: category.id })) {\n          mustTransfer = true;\n          break;\n        }\n      }\n\n      if (mustTransfer) {\n        dispatch(\n          pushModal('confirm-category-delete', {\n            group: groupId,\n            onDelete: transferCategory => {\n              dispatch(collapseModals('category-group-menu'));\n              dispatch(deleteGroup(groupId, transferCategory));\n            },\n          }),\n        );\n      } else {\n        dispatch(collapseModals('category-group-menu'));\n        dispatch(deleteGroup(groupId));\n      }\n    },\n    [categoryGroups, dispatch],\n  );\n\n  const onToggleGroupVisibility = useCallback(\n    groupId => {\n      const group = categoryGroups.find(g => g.id === groupId);\n      onSaveGroup({\n        ...group,\n        hidden: !!!group.hidden,\n      });\n      dispatch(collapseModals('category-group-menu'));\n    },\n    [categoryGroups, dispatch, onSaveGroup],\n  );\n\n  const onSaveCategory = useCallback(\n    category => {\n      dispatch(updateCategory(category));\n    },\n    [dispatch],\n  );\n\n  const onDeleteCategory = useCallback(\n    async categoryId => {\n      const mustTransfer = await send('must-category-transfer', {\n        id: categoryId,\n      });\n\n      if (mustTransfer) {\n        dispatch(\n          pushModal('confirm-category-delete', {\n            category: categoryId,\n            onDelete: transferCategory => {\n              if (categoryId !== transferCategory) {\n                dispatch(collapseModals('category-menu'));\n                dispatch(deleteCategory(categoryId, transferCategory));\n              }\n            },\n          }),\n        );\n      } else {\n        dispatch(collapseModals('category-menu'));\n        dispatch(deleteCategory(categoryId));\n      }\n    },\n    [dispatch],\n  );\n\n  const onToggleCategoryVisibility = useCallback(\n    categoryId => {\n      const category = categories.find(c => c.id === categoryId);\n      onSaveCategory({\n        ...category,\n        hidden: !!!category.hidden,\n      });\n      dispatch(collapseModals('category-menu'));\n    },\n    [categories, dispatch, onSaveCategory],\n  );\n\n  const onReorderCategory = useCallback(\n    (id, { inGroup, aroundCategory }) => {\n      let groupId, targetId;\n\n      if (inGroup) {\n        groupId = inGroup;\n      } else if (aroundCategory) {\n        const { id: originalCatId, position } = aroundCategory;\n\n        let catId = originalCatId;\n        const group = categoryGroups.find(group =>\n          group.categories?.find(cat => cat.id === catId),\n        );\n\n        if (position === 'bottom') {\n          const idx =\n            group?.categories?.findIndex(cat => cat.id === catId) ?? -1;\n          catId = group?.categories\n            ? idx < group.categories.length - 1\n              ? group.categories[idx + 1].id\n              : null\n            : null;\n        }\n\n        groupId = group?.id;\n        targetId = catId;\n      }\n\n      dispatch(moveCategory(id, groupId, targetId));\n    },\n    [categoryGroups, dispatch],\n  );\n\n  const onReorderGroup = useCallback(\n    (id, targetId, position) => {\n      if (position === 'bottom') {\n        const idx = categoryGroups.findIndex(group => group.id === targetId);\n        targetId =\n          idx < categoryGroups.length - 1 ? categoryGroups[idx + 1].id : null;\n      }\n\n      dispatch(moveCategoryGroup(id, targetId));\n    },\n    [categoryGroups, dispatch],\n  );\n\n  const onPrevMonth = useCallback(async () => {\n    const month = monthUtils.subMonths(startMonth, 1);\n    await prewarmMonth(budgetType, spreadsheet, month);\n    setStartMonthPref(month);\n    setInitialized(true);\n  }, [budgetType, setStartMonthPref, spreadsheet, startMonth]);\n\n  const onNextMonth = useCallback(async () => {\n    const month = monthUtils.addMonths(startMonth, 1);\n    await prewarmMonth(budgetType, spreadsheet, month);\n    setStartMonthPref(month);\n    setInitialized(true);\n  }, [budgetType, setStartMonthPref, spreadsheet, startMonth]);\n\n  // const onOpenMonthActionMenu = () => {\n  //   const options = [\n  //     'Copy last month’s budget',\n  //     'Set budgets to zero',\n  //     'Set budgets to 3 month average',\n  //     budgetType === 'report' && 'Apply to all future budgets',\n  //   ].filter(Boolean);\n\n  //   props.showActionSheetWithOptions(\n  //     {\n  //       options,\n  //       cancelButtonIndex: options.length - 1,\n  //       title: 'Actions',\n  //     },\n  //     idx => {\n  //       switch (idx) {\n  //         case 0:\n  //           setEditMode(true);\n  //           break;\n  //         case 1:\n  //           onBudgetAction('copy-last');\n  //           break;\n  //         case 2:\n  //           onBudgetAction('set-zero');\n  //           break;\n  //         case 3:\n  //           onBudgetAction('set-3-avg');\n  //           break;\n  //         case 4:\n  //           if (budgetType === 'report') {\n  //             onBudgetAction('set-all-future');\n  //           }\n  //           break;\n  //         default:\n  //       }\n  //     },\n  //   );\n  // };\n\n  const onSaveNotes = useCallback(async (id, notes) => {\n    await send('notes-save', { id, note: notes });\n  }, []);\n\n  const onOpenCategoryGroupNotesModal = useCallback(\n    id => {\n      const group = categoryGroups.find(g => g.id === id);\n      dispatch(\n        pushModal('notes', {\n          id,\n          name: group.name,\n          onSave: onSaveNotes,\n        }),\n      );\n    },\n    [categoryGroups, dispatch, onSaveNotes],\n  );\n\n  const onOpenCategoryNotesModal = useCallback(\n    id => {\n      const category = categories.find(c => c.id === id);\n      dispatch(\n        pushModal('notes', {\n          id,\n          name: category.name,\n          onSave: onSaveNotes,\n        }),\n      );\n    },\n    [categories, dispatch, onSaveNotes],\n  );\n\n  const onOpenCategoryGroupMenuModal = useCallback(\n    id => {\n      const group = categoryGroups.find(g => g.id === id);\n      dispatch(\n        pushModal('category-group-menu', {\n          groupId: group.id,\n          onSave: onSaveGroup,\n          onAddCategory: onOpenNewCategoryModal,\n          onEditNotes: onOpenCategoryGroupNotesModal,\n          onDelete: onDeleteGroup,\n          onToggleVisibility: onToggleGroupVisibility,\n        }),\n      );\n    },\n    [\n      categoryGroups,\n      dispatch,\n      onDeleteGroup,\n      onOpenCategoryGroupNotesModal,\n      onOpenNewCategoryModal,\n      onSaveGroup,\n      onToggleGroupVisibility,\n    ],\n  );\n\n  const onOpenCategoryMenuModal = useCallback(\n    id => {\n      const category = categories.find(c => c.id === id);\n      dispatch(\n        pushModal('category-menu', {\n          categoryId: category.id,\n          onSave: onSaveCategory,\n          onEditNotes: onOpenCategoryNotesModal,\n          onDelete: onDeleteCategory,\n          onToggleVisibility: onToggleCategoryVisibility,\n          onBudgetAction,\n        }),\n      );\n    },\n    [\n      categories,\n      dispatch,\n      onBudgetAction,\n      onDeleteCategory,\n      onOpenCategoryNotesModal,\n      onSaveCategory,\n      onToggleCategoryVisibility,\n    ],\n  );\n\n  const [showHiddenCategories, setShowHiddenCategoriesPref] = useLocalPref(\n    'budget.showHiddenCategories',\n  );\n\n  const onToggleHiddenCategories = useCallback(() => {\n    setShowHiddenCategoriesPref(!showHiddenCategories);\n    dispatch(collapseModals('budget-page-menu'));\n  }, [dispatch, setShowHiddenCategoriesPref, showHiddenCategories]);\n\n  const onOpenBudgetMonthNotesModal = useCallback(\n    month => {\n      dispatch(\n        pushModal('notes', {\n          id: `budget-${month}`,\n          name: monthUtils.format(month, 'MMMM ‘yy'),\n          onSave: onSaveNotes,\n        }),\n      );\n    },\n    [dispatch, onSaveNotes],\n  );\n\n  const onSwitchBudgetFile = useCallback(() => {\n    dispatch(pushModal('budget-list'));\n  }, [dispatch]);\n\n  const onOpenBudgetMonthMenu = useCallback(\n    month => {\n      dispatch(\n        pushModal(\n          `${budgetType === 'report' ? 'tracking' : 'envelope'}-budget-month-menu`,\n          {\n            month,\n            onBudgetAction,\n            onEditNotes: onOpenBudgetMonthNotesModal,\n          },\n        ),\n      );\n    },\n    [budgetType, dispatch, onBudgetAction, onOpenBudgetMonthNotesModal],\n  );\n\n  const onOpenBudgetPageMenu = useCallback(() => {\n    dispatch(\n      pushModal('budget-page-menu', {\n        onAddCategoryGroup: onOpenNewCategoryGroupModal,\n        onToggleHiddenCategories,\n        onSwitchBudgetFile,\n      }),\n    );\n  }, [\n    dispatch,\n    onOpenNewCategoryGroupModal,\n    onSwitchBudgetFile,\n    onToggleHiddenCategories,\n  ]);\n\n  if (!categoryGroups || !initialized) {\n    return (\n      <View\n        style={{\n          flex: 1,\n          backgroundColor: theme.mobilePageBackground,\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginBottom: 25,\n        }}\n      >\n        <AnimatedLoading width={25} height={25} />\n      </View>\n    );\n  }\n\n  return (\n    <NamespaceContext.Provider value={monthUtils.sheetForMonth(startMonth)}>\n      <SyncRefresh\n        onSync={async () => {\n          dispatch(sync());\n        }}\n      >\n        {({ onRefresh }) => (\n          <BudgetTable\n            // This key forces the whole table rerender when the number\n            // format changes\n            key={`${numberFormat}${hideFraction}`}\n            categoryGroups={categoryGroups}\n            type={budgetType}\n            month={startMonth}\n            monthBounds={bounds}\n            // editMode={editMode}\n            onShowBudgetSummary={onShowBudgetSummary}\n            onPrevMonth={onPrevMonth}\n            onNextMonth={onNextMonth}\n            onSaveGroup={onSaveGroup}\n            onDeleteGroup={onDeleteGroup}\n            onAddCategory={onOpenNewCategoryModal}\n            onSaveCategory={onSaveCategory}\n            onDeleteCategory={onDeleteCategory}\n            onReorderCategory={onReorderCategory}\n            onReorderGroup={onReorderGroup}\n            onBudgetAction={onBudgetAction}\n            onRefresh={onRefresh}\n            onEditGroup={onOpenCategoryGroupMenuModal}\n            onEditCategory={onOpenCategoryMenuModal}\n            onOpenBudgetPageMenu={onOpenBudgetPageMenu}\n            onOpenBudgetMonthMenu={onOpenBudgetMonthMenu}\n          />\n        )}\n      </SyncRefresh>\n    </NamespaceContext.Provider>\n  );\n}\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { replaceModal, syncAndDownload } from 'loot-core/src/client/actions';\r\nimport * as queries from 'loot-core/src/client/queries';\r\n\r\nimport { useAccounts } from '../../../hooks/useAccounts';\r\nimport { useFailedAccounts } from '../../../hooks/useFailedAccounts';\r\nimport { useNavigate } from '../../../hooks/useNavigate';\r\nimport { useSyncedPref } from '../../../hooks/useSyncedPref';\r\nimport { SvgAdd } from '../../../icons/v1';\r\nimport { theme, styles } from '../../../style';\r\nimport { makeAmountFullStyle } from '../../budget/util';\r\nimport { Button } from '../../common/Button2';\r\nimport { Text } from '../../common/Text';\r\nimport { TextOneLine } from '../../common/TextOneLine';\r\nimport { View } from '../../common/View';\r\nimport { MobilePageHeader, Page } from '../../Page';\r\nimport { CellValue, CellValueText } from '../../spreadsheet/CellValue';\r\nimport { MOBILE_NAV_HEIGHT } from '../MobileNavTabs';\r\nimport { PullToRefresh } from '../PullToRefresh';\r\n\r\nfunction AccountHeader({ name, amount, style = {} }) {\r\n  return (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        flexDirection: 'row',\r\n        marginTop: 10,\r\n        marginRight: 10,\r\n        color: theme.pageTextLight,\r\n        width: '100%',\r\n        ...style,\r\n      }}\r\n    >\r\n      <View style={{ flex: 1 }}>\r\n        <Text\r\n          style={{\r\n            ...styles.text,\r\n            fontSize: 14,\r\n          }}\r\n          data-testid=\"name\"\r\n        >\r\n          {name}\r\n        </Text>\r\n      </View>\r\n      <CellValue binding={amount} type=\"financial\">\r\n        {props => (\r\n          <CellValueText {...props} style={{ ...styles.text, fontSize: 14 }} />\r\n        )}\r\n      </CellValue>\r\n    </View>\r\n  );\r\n}\r\n\r\nfunction AccountCard({\r\n  account,\r\n  updated,\r\n  connected,\r\n  pending,\r\n  failed,\r\n  getBalanceQuery,\r\n  onSelect,\r\n}) {\r\n  return (\r\n    <Button\r\n      onPress={() => onSelect(account.id)}\r\n      style={{\r\n        border: `1px solid ${theme.pillBorder}`,\r\n        borderRadius: 6,\r\n        boxShadow: `0 1px 1px ${theme.mobileAccountShadow}`,\r\n        marginTop: 10,\r\n      }}\r\n      data-testid=\"account\"\r\n    >\r\n      <View\r\n        style={{\r\n          flex: 1,\r\n          margin: '10px 0',\r\n        }}\r\n      >\r\n        <View\r\n          style={{\r\n            flexDirection: 'row',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          {account.bankId && (\r\n            <View\r\n              style={{\r\n                backgroundColor: pending\r\n                  ? theme.sidebarItemBackgroundPending\r\n                  : failed\r\n                    ? theme.sidebarItemBackgroundFailed\r\n                    : theme.sidebarItemBackgroundPositive,\r\n                marginRight: '8px',\r\n                width: 8,\r\n                flexShrink: 0,\r\n                height: 8,\r\n                borderRadius: 8,\r\n                opacity: connected ? 1 : 0,\r\n              }}\r\n            />\r\n          )}\r\n          <TextOneLine\r\n            style={{\r\n              ...styles.text,\r\n              fontSize: 17,\r\n              fontWeight: 600,\r\n              color: updated ? theme.mobileAccountText : theme.pillText,\r\n              paddingRight: 30,\r\n            }}\r\n            data-testid=\"account-name\"\r\n          >\r\n            {account.name}\r\n          </TextOneLine>\r\n        </View>\r\n      </View>\r\n      <CellValue binding={getBalanceQuery(account)} type=\"financial\">\r\n        {props => (\r\n          <CellValueText\r\n            {...props}\r\n            style={{\r\n              fontSize: 16,\r\n              color: 'inherit',\r\n              ...makeAmountFullStyle(props.value),\r\n            }}\r\n            data-testid=\"account-balance\"\r\n          />\r\n        )}\r\n      </CellValue>\r\n    </Button>\r\n  );\r\n}\r\n\r\nfunction EmptyMessage() {\r\n  return (\r\n    <View style={{ flex: 1, padding: 30 }}>\r\n      <Text style={styles.text}>\r\n        For Actual to be useful, you need to add an account. You can link an\r\n        account to automatically download transactions, or manage it locally\r\n        yourself.\r\n      </Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nfunction AccountList({\r\n  accounts,\r\n  updatedAccounts,\r\n  getBalanceQuery,\r\n  getOnBudgetBalance,\r\n  getOffBudgetBalance,\r\n  onAddAccount,\r\n  onSelectAccount,\r\n  onSync,\r\n}) {\r\n  const failedAccounts = useFailedAccounts();\r\n  const syncingAccountIds = useSelector(state => state.account.accountsSyncing);\r\n  const budgetedAccounts = accounts.filter(account => account.offbudget === 0);\r\n  const offbudgetAccounts = accounts.filter(account => account.offbudget === 1);\r\n\r\n  return (\r\n    <Page\r\n      header={\r\n        <MobilePageHeader\r\n          title=\"Accounts\"\r\n          rightContent={\r\n            <Button\r\n              variant=\"bare\"\r\n              aria-label=\"Add account\"\r\n              style={{ margin: 10 }}\r\n              onPress={onAddAccount}\r\n            >\r\n              <SvgAdd width={20} height={20} />\r\n            </Button>\r\n          }\r\n        />\r\n      }\r\n      padding={0}\r\n      style={{\r\n        paddingBottom: MOBILE_NAV_HEIGHT,\r\n      }}\r\n    >\r\n      {accounts.length === 0 && <EmptyMessage />}\r\n      <PullToRefresh onRefresh={onSync}>\r\n        <View style={{ margin: 10 }}>\r\n          {budgetedAccounts.length > 0 && (\r\n            <AccountHeader name=\"For Budget\" amount={getOnBudgetBalance()} />\r\n          )}\r\n          {budgetedAccounts.map(acct => (\r\n            <AccountCard\r\n              account={acct}\r\n              key={acct.id}\r\n              updated={updatedAccounts && updatedAccounts.includes(acct.id)}\r\n              connected={!!acct.bank}\r\n              pending={syncingAccountIds.includes(acct.id)}\r\n              failed={failedAccounts && failedAccounts.has(acct.id)}\r\n              getBalanceQuery={getBalanceQuery}\r\n              onSelect={onSelectAccount}\r\n            />\r\n          ))}\r\n\r\n          {offbudgetAccounts.length > 0 && (\r\n            <AccountHeader\r\n              name=\"Off Budget\"\r\n              amount={getOffBudgetBalance()}\r\n              style={{ marginTop: 30 }}\r\n            />\r\n          )}\r\n          {offbudgetAccounts.map(acct => (\r\n            <AccountCard\r\n              account={acct}\r\n              key={acct.id}\r\n              updated={updatedAccounts && updatedAccounts.includes(acct.id)}\r\n              connected={!!acct.bank}\r\n              pending={syncingAccountIds.includes(acct.id)}\r\n              failed={failedAccounts && failedAccounts.has(acct.id)}\r\n              getBalanceQuery={getBalanceQuery}\r\n              onSelect={onSelectAccount}\r\n            />\r\n          ))}\r\n        </View>\r\n      </PullToRefresh>\r\n    </Page>\r\n  );\r\n}\r\n\r\nexport function Accounts() {\r\n  const dispatch = useDispatch();\r\n  const accounts = useAccounts();\r\n  const updatedAccounts = useSelector(state => state.queries.updatedAccounts);\r\n  const [_numberFormat] = useSyncedPref('numberFormat');\r\n  const numberFormat = _numberFormat || 'comma-dot';\r\n  const [hideFraction] = useSyncedPref('hideFraction');\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const onSelectAccount = id => {\r\n    navigate(`/accounts/${id}`);\r\n  };\r\n\r\n  const onAddAccount = () => {\r\n    dispatch(replaceModal('add-account'));\r\n  };\r\n\r\n  const onSync = () => {\r\n    dispatch(syncAndDownload());\r\n  };\r\n\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <AccountList\r\n        // This key forces the whole table rerender when the number\r\n        // format changes\r\n        key={numberFormat + hideFraction}\r\n        accounts={accounts.filter(account => !account.closed)}\r\n        updatedAccounts={updatedAccounts}\r\n        getBalanceQuery={queries.accountBalance}\r\n        getOnBudgetBalance={queries.budgetedAccountBalance}\r\n        getOffBudgetBalance={queries.offbudgetAccountBalance}\r\n        onAddAccount={onAddAccount}\r\n        onSelectAccount={onSelectAccount}\r\n        onSync={onSync}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n","import React, {\n  type CSSProperties,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { useDebounceCallback } from 'usehooks-ts';\n\nimport {\n  collapseModals,\n  getPayees,\n  markAccountRead,\n  openAccountCloseModal,\n  pushModal,\n  reopenAccount,\n  syncAndDownload,\n  updateAccount,\n} from 'loot-core/client/actions';\nimport {\n  SchedulesProvider,\n  useDefaultSchedulesQueryTransform,\n} from 'loot-core/client/data-hooks/schedules';\nimport * as queries from 'loot-core/client/queries';\nimport { type PagedQuery, pagedQuery } from 'loot-core/client/query-helpers';\nimport { listen, send } from 'loot-core/platform/client/fetch';\nimport { type Query } from 'loot-core/shared/query';\nimport { isPreviewId } from 'loot-core/shared/transactions';\nimport {\n  type AccountEntity,\n  type TransactionEntity,\n} from 'loot-core/types/models';\n\nimport { useDateFormat } from '../../../hooks/useDateFormat';\nimport { useFailedAccounts } from '../../../hooks/useFailedAccounts';\nimport { useNavigate } from '../../../hooks/useNavigate';\nimport { usePreviewTransactions } from '../../../hooks/usePreviewTransactions';\nimport { styles, theme } from '../../../style';\nimport { Button } from '../../common/Button2';\nimport { Text } from '../../common/Text';\nimport { View } from '../../common/View';\nimport { MobilePageHeader, Page } from '../../Page';\nimport { MobileBackButton } from '../MobileBackButton';\nimport { AddTransactionButton } from '../transactions/AddTransactionButton';\nimport { TransactionListWithBalances } from '../transactions/TransactionListWithBalances';\n\nexport function AccountTransactions({\n  account,\n  accountId,\n  accountName,\n}: {\n  readonly account?: AccountEntity;\n  readonly accountId?: string;\n  readonly accountName: string;\n}) {\n  const schedulesTransform = useDefaultSchedulesQueryTransform(accountId);\n  return (\n    <Page\n      header={\n        <MobilePageHeader\n          title={\n            account ? (\n              <AccountHeader account={account} />\n            ) : (\n              <NameOnlyHeader accountName={accountName} />\n            )\n          }\n          leftContent={<MobileBackButton />}\n          rightContent={<AddTransactionButton accountId={accountId} />}\n        />\n      }\n      padding={0}\n    >\n      <SchedulesProvider transform={schedulesTransform}>\n        <TransactionListWithPreviews\n          account={account}\n          accountName={accountName}\n          accountId={accountId}\n        />\n      </SchedulesProvider>\n    </Page>\n  );\n}\n\nfunction AccountHeader({ account }: { readonly account: AccountEntity }) {\n  const failedAccounts = useFailedAccounts();\n  const syncingAccountIds = useSelector(state => state.account.accountsSyncing);\n  const pending = useMemo(\n    () => syncingAccountIds.includes(account.id),\n    [syncingAccountIds, account.id],\n  );\n  const failed = useMemo(\n    () => failedAccounts.has(account.id),\n    [failedAccounts, account.id],\n  );\n\n  const dispatch = useDispatch();\n\n  const onSave = (account: AccountEntity) => {\n    dispatch(updateAccount(account));\n  };\n\n  const onSaveNotes = async (id: string, notes: string) => {\n    await send('notes-save', { id, note: notes });\n  };\n\n  const onEditNotes = (id: string) => {\n    dispatch(\n      pushModal('notes', {\n        id: `account-${id}`,\n        name: account.name,\n        onSave: onSaveNotes,\n      }),\n    );\n  };\n\n  const onCloseAccount = () => {\n    dispatch(openAccountCloseModal(account.id));\n  };\n\n  const onReopenAccount = () => {\n    dispatch(reopenAccount(account.id));\n  };\n\n  const onClick = () => {\n    dispatch(\n      pushModal('account-menu', {\n        accountId: account.id,\n        onSave,\n        onEditNotes,\n        onCloseAccount,\n        onReopenAccount,\n      }),\n    );\n  };\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n      }}\n    >\n      {account.bank && (\n        <div\n          style={{\n            margin: 'auto',\n            marginRight: 5,\n            width: 8,\n            height: 8,\n            borderRadius: 8,\n            flexShrink: 0,\n            backgroundColor: pending\n              ? theme.sidebarItemBackgroundPending\n              : failed\n                ? theme.sidebarItemBackgroundFailed\n                : theme.sidebarItemBackgroundPositive,\n            transition: 'transform .3s',\n          }}\n        />\n      )}\n      <Button variant=\"bare\" onPress={onClick}>\n        <Text\n          style={{\n            fontSize: 17,\n            fontWeight: 500,\n            ...styles.underlinedText,\n            ...(styles.lineClamp(2) as CSSProperties),\n          }}\n        >\n          {`${account.closed ? 'Closed: ' : ''}${account.name}`}\n        </Text>\n      </Button>\n    </View>\n  );\n}\n\nfunction NameOnlyHeader({ accountName }: { readonly accountName: string }) {\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n      }}\n    >\n      <Text style={{ ...(styles.lineClamp(2) as CSSProperties) }}>\n        {accountName}\n      </Text>\n    </View>\n  );\n}\n\nfunction TransactionListWithPreviews({\n  account,\n  accountId,\n  accountName,\n}: {\n  readonly account?: AccountEntity;\n  readonly accountId?: string;\n  readonly accountName: string;\n}) {\n  const [currentQuery, setCurrentQuery] = useState<Query>();\n  const [isSearching, setIsSearching] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [transactions, setTransactions] = useState<\n    ReadonlyArray<TransactionEntity>\n  >([]);\n  const prependTransactions = usePreviewTransactions();\n  const allTransactions = useMemo(\n    () =>\n      !isSearching ? prependTransactions.concat(transactions) : transactions,\n    [isSearching, prependTransactions, transactions],\n  );\n\n  const dateFormat = useDateFormat() || 'MM/dd/yyyy';\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const onRefresh = () => {\n    dispatch(syncAndDownload(accountId));\n  };\n\n  const makeRootQuery = useCallback(\n    () => queries.makeTransactionsQuery(accountId).options({ splits: 'none' }),\n    [accountId],\n  );\n\n  const paged = useRef<PagedQuery>();\n\n  const updateQuery = useCallback((query: Query) => {\n    paged.current?.unsubscribe();\n    setIsLoading(true);\n    paged.current = pagedQuery(\n      query.options({ splits: 'none' }).select('*'),\n      (data: ReadonlyArray<TransactionEntity>) => {\n        setTransactions(data);\n        setIsLoading(false);\n      },\n      { pageCount: 50 },\n    );\n  }, []);\n\n  const fetchTransactions = useCallback(() => {\n    const query = makeRootQuery();\n    setCurrentQuery(query);\n    updateQuery(query);\n  }, [makeRootQuery, updateQuery]);\n\n  const refetchTransactions = () => {\n    paged.current?.run();\n  };\n\n  useEffect(() => {\n    const unlisten = listen('sync-event', ({ type, tables }) => {\n      if (type === 'applied') {\n        if (\n          tables.includes('transactions') ||\n          tables.includes('category_mapping') ||\n          tables.includes('payee_mapping')\n        ) {\n          refetchTransactions();\n        }\n\n        if (tables.includes('payees') || tables.includes('payee_mapping')) {\n          dispatch(getPayees());\n        }\n      }\n    });\n\n    fetchTransactions();\n    dispatch(markAccountRead(accountId));\n    return () => unlisten();\n  }, [accountId, dispatch, fetchTransactions]);\n\n  const updateSearchQuery = useDebounceCallback(\n    useCallback(\n      searchText => {\n        if (searchText === '' && currentQuery) {\n          updateQuery(currentQuery);\n        } else if (searchText && currentQuery) {\n          updateQuery(\n            queries.makeTransactionSearchQuery(\n              currentQuery,\n              searchText,\n              dateFormat,\n            ),\n          );\n        }\n\n        setIsSearching(searchText !== '');\n      },\n      [currentQuery, dateFormat, updateQuery],\n    ),\n    150,\n  );\n\n  const onSearch = (text: string) => {\n    updateSearchQuery(text);\n  };\n\n  const onOpenTransaction = (transaction: TransactionEntity) => {\n    if (!isPreviewId(transaction.id)) {\n      navigate(`/transactions/${transaction.id}`);\n    } else {\n      dispatch(\n        pushModal('scheduled-transaction-menu', {\n          transactionId: transaction.id,\n          onPost: async transactionId => {\n            const parts = transactionId.split('/');\n            await send('schedule/post-transaction', { id: parts[1] });\n            dispatch(collapseModals('scheduled-transaction-menu'));\n          },\n          onSkip: async transactionId => {\n            const parts = transactionId.split('/');\n            await send('schedule/skip-next-date', { id: parts[1] });\n            dispatch(collapseModals('scheduled-transaction-menu'));\n          },\n        }),\n      );\n    }\n  };\n\n  const onLoadMore = () => {\n    paged.current?.fetchNext();\n  };\n\n  const balanceQueries = useMemo(\n    () => queriesFromAccountId(accountId, account),\n    [accountId, account],\n  );\n\n  return (\n    <TransactionListWithBalances\n      isLoading={isLoading}\n      transactions={allTransactions}\n      balance={balanceQueries.balance}\n      balanceCleared={balanceQueries.cleared}\n      balanceUncleared={balanceQueries.uncleared}\n      onLoadMore={onLoadMore}\n      searchPlaceholder={`Search ${accountName}`}\n      onSearch={onSearch}\n      onOpenTransaction={onOpenTransaction}\n      onRefresh={onRefresh}\n    />\n  );\n}\n\nfunction queriesFromAccountId(\n  id: string | undefined,\n  entity: AccountEntity | undefined,\n) {\n  switch (id) {\n    case 'budgeted':\n      return {\n        balance: queries.budgetedAccountBalance(),\n      };\n    case 'offbudget':\n      return {\n        balance: queries.offbudgetAccountBalance(),\n      };\n    case 'uncategorized':\n      return {\n        balance: queries.uncategorizedBalance(),\n      };\n    default:\n      return entity\n        ? {\n            balance: queries.accountBalance(entity),\n            cleared: queries.accountBalanceCleared(entity),\n            uncleared: queries.accountBalanceUncleared(entity),\n          }\n        : { balance: queries.allAccountBalance() };\n  }\n}\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { useAccount } from '../../../hooks/useAccount';\nimport { useSyncedPref } from '../../../hooks/useSyncedPref';\n\nimport { AccountTransactions } from './AccountTransactions';\n\nexport function Account() {\n  const [_numberFormat] = useSyncedPref('numberFormat');\n  const numberFormat = _numberFormat || 'comma-dot';\n  const [hideFraction] = useSyncedPref('hideFraction');\n\n  const { id: accountId } = useParams();\n\n  const account = useAccount(accountId!);\n\n  return (\n    <AccountTransactions\n      // This key forces the whole table rerender when the number\n      // format changes\n      key={numberFormat + hideFraction}\n      account={account}\n      accountId={accountId}\n      accountName={account ? account.name : accountNameFromId(accountId)}\n    />\n  );\n}\n\nfunction accountNameFromId(id: string | undefined) {\n  switch (id) {\n    case 'budgeted':\n      return 'Budgeted Accounts';\n    case 'offbudget':\n      return 'Off Budget Accounts';\n    case 'uncategorized':\n      return 'Uncategorized';\n    default:\n      return 'All Accounts';\n  }\n}\n"],"names":["SvgArrowThickRight","props","_jsx","svg","xmlns","viewBox","style","color","path","d","fill","SvgArrowThinLeft","SyncRefresh","onSync","children","syncing","setSyncing","useState","onSync_","_Fragment","refreshing","onRefresh","Card","ref","View","marginTop","marginLeft","marginRight","borderRadius","backgroundColor","theme","cardBackground","borderColor","cardBorder","boxShadow","overflow","displayName","ROW_HEIGHT","ListItem","height","borderBottomWidth","tableBorder","flexDirection","alignItems","paddingLeft","paddingRight","zIndex","PILL_STYLE","pillText","pillBackgroundLight","getColumnWidth","show3Cols","isSidebar","offset","ToBudget","toBudget","onPress","amount","useSheetValue","format","useFormat","sidebarColumnWidth","justifyContent","width","Button","variant","Label","title","styles","smallText","formInputText","flexShrink","textAlign","CellValue","binding","type","value","PrivacyFilter","AutoTextSize","as","Text","minFontSizePx","maxFontSizePx","mode","fontSize","fontWeight","errorText","SvgCheveronRight","mobileHeaderTextSubdued","Saved","projected","trackingBudget","totalBudgetedSaved","totalSaved","saved","isNegative","warningText","errorTextDark","BudgetCell","name","category","month","onBudgetAction","columnWidth","dispatch","useDispatch","showUndoNotification","useUndo","budgetType","useSyncedPref","categoryBudgetMenuModal","modalBudgetType","categoryNotes","useNotes","id","onOpenCategoryBudgetMenu","pushModal","categoryId","onUpdateBudget","onCopyLastMonthAverage","message","onSetMonthsAverage","numberOfMonths","onApplyBudgetTemplate","pre","aria-label","maxWidth","makeAmountGrey","ExpenseCategory","memo","isHidden","goal","longGoal","budgeted","spent","balance","carryover","index","blank","onEdit","showBudgetedCol","opacity","isGoalTemplatesEnabled","useFeatureFlag","goalTemp","goalValue","list","categories","useCategories","categoriesById","groupById","onCarryover","useCallback","flag","collapseModals","catBalance","envelopeBudget","budgetedtmp","balancetmp","isLongGoal","budgetedValue","onTransfer","onSubmit","toCategoryId","from","to","integerToCurrency","showToBeBudgeted","onCover","fromCategoryId","onOpenBalanceMenu","listItemRef","useRef","navigate","useNavigate","onShowActivity","content","borderTopWidth","undefined","data-testid","innerRef","flex","lineClamp","tableTextSubdued","display","BalanceWithCarryover","CarryoverIndicator","position","right","top","makeBalanceAmountStyle","ExpenseGroupHeader","group","editMode","collapsed","onToggleCollapse","amountStyle","tableRowHeaderBackground","hidden","className","css","pageTextSubdued","SvgExpandArrow","transition","transform","IncomeGroupHeader","IncomeCategory","ExpenseGroup","onEditGroup","onEditCategory","onAddCategory","showHiddenCategories","editable","marginBottom","groupBudgeted","groupSumAmount","groupBalance","filter","map","catGoal","catLongGoal","catBudgeted","catSumAmount","catCarryover","tableBackground","IncomeGroup","UncategorizedButton","count","uncategorizedCount","padding","paddingBottom","Link","buttonVariant","border","SvgArrowThinRight","BudgetGroups","categoryGroups","gestures","onSaveCategory","onDeleteCategory","onReorderCategory","onReorderGroup","separateGroups","memoizeOne","groups","incomeGroup","find","is_income","expenseGroups","collapsedGroupIds","setCollapsedGroupIdsPref","useLocalPref","includes","collapsedId","overflowY","BudgetTable","monthBounds","onPrevMonth","onNextMonth","onSaveGroup","onDeleteGroup","onShowBudgetSummary","onOpenBudgetPageMenu","onOpenBudgetMonthMenu","useResponsive","showSpentColumn","setShowSpentColumnPref","toggleSpentColumn","Page","header","MobilePageHeader","MonthSelector","onOpenMonthMenu","leftContent","margin","SvgLogo","mobileHeaderText","BudgetTableHeader","PullToRefresh","pageBackground","MOBILE_NAV_HEIGHT","buttonStyle","monthUtils","totalBudgetedExpense","totalBudgeted","formatType","isDisabled","SvgViewShow","totalSpent","totalLeftover","totalBalance","prevEnabled","start","nextEnabled","end","arrowButtonStyle","data-month","underlinedText","isBudgetType","input","Budget","grouped","budgetTypePref","spreadsheet","useSpreadsheet","currMonth","startMonth","setStartMonthPref","bounds","setBounds","initialized","setInitialized","_numberFormat","numberFormat","hideFraction","useEffect","init","send","prewarmMonth","unlisten","listen","tables","getCategories","args","applyBudgetAction","onOpenNewCategoryGroupModal","onValidate","createGroup","onOpenNewCategoryModal","groupId","isIncome","createCategory","updateGroup","g","mustTransfer","onDelete","transferCategory","deleteGroup","onToggleGroupVisibility","updateCategory","deleteCategory","onToggleCategoryVisibility","c","inGroup","aroundCategory","targetId","originalCatId","catId","cat","idx","findIndex","length","moveCategory","moveCategoryGroup","onSaveNotes","notes","note","onOpenCategoryGroupNotesModal","onSave","onOpenCategoryNotesModal","onOpenCategoryGroupMenuModal","onEditNotes","onToggleVisibility","onOpenCategoryMenuModal","setShowHiddenCategoriesPref","onToggleHiddenCategories","onOpenBudgetMonthNotesModal","onSwitchBudgetFile","onAddCategoryGroup","mobilePageBackground","AnimatedLoading","NamespaceContext","Provider","sync","AccountHeader","pageTextLight","text","CellValueText","AccountCard","account","updated","connected","pending","failed","getBalanceQuery","onSelect","pillBorder","mobileAccountShadow","bankId","sidebarItemBackgroundPending","sidebarItemBackgroundFailed","sidebarItemBackgroundPositive","TextOneLine","mobileAccountText","makeAmountFullStyle","EmptyMessage","AccountList","accounts","updatedAccounts","getOnBudgetBalance","getOffBudgetBalance","onAddAccount","onSelectAccount","failedAccounts","useFailedAccounts","syncingAccountIds","useSelector","state","accountsSyncing","budgetedAccounts","offbudget","offbudgetAccounts","rightContent","SvgAdd","acct","bank","has","Accounts","useAccounts","queries","replaceModal","syncAndDownload","closed","AccountTransactions","accountId","accountName","schedulesTransform","useDefaultSchedulesQueryTransform","NameOnlyHeader","MobileBackButton","AddTransactionButton","SchedulesProvider","TransactionListWithPreviews","useMemo","updateAccount","onCloseAccount","openAccountCloseModal","onReopenAccount","reopenAccount","onClick","div","currentQuery","setCurrentQuery","isSearching","setIsSearching","isLoading","setIsLoading","transactions","setTransactions","prependTransactions","usePreviewTransactions","allTransactions","concat","dateFormat","useDateFormat","makeRootQuery","options","splits","paged","updateQuery","query","current","unsubscribe","pagedQuery","select","data","pageCount","fetchTransactions","refetchTransactions","run","getPayees","markAccountRead","updateSearchQuery","useDebounceCallback","searchText","onSearch","onOpenTransaction","transaction","isPreviewId","transactionId","onPost","parts","split","onSkip","onLoadMore","fetchNext","balanceQueries","queriesFromAccountId","TransactionListWithBalances","balanceCleared","cleared","balanceUncleared","uncleared","searchPlaceholder","entity","Account","useParams","useAccount","accountNameFromId"],"mappings":"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"}