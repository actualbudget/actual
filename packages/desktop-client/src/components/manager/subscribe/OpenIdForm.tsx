import { ReactNode, useState } from 'react';
import { theme, styles } from '../../../style';
import { ButtonWithLoading } from '../../common/Button';
import { Input } from '../../common/Input';
import { Stack } from '../../common/Stack';
import { FormField, FormLabel } from '../../forms';
import { useServerURL } from '../../ServerContext';
import { Select } from '../../common/Select';
import { Menu } from '../../common/Menu';
import { useLocation } from 'react-router-dom';
import { Text } from '../../common/Text';
import { Link } from '../../common/Link';

export type OpenIdConfig = {
  issuer: string;
  client_id: string;
  client_secret: string;
  server_hostname: string;
};

type OpenIdCallback = (config: OpenIdConfig) => Promise<void>;

type OpenIdFormProps = {
  onSetOpenId: OpenIdCallback;
  otherButtons?: ReactNode[];
};

type OpenIdProviderOption = {
  label: string;
  value: string;
  issuer: string | ((location: Location, serverUrl: string) => string);
  clientId?: string | ((location: Location, serverUrl: string) => string);
  clientSecret?: string | ((location: Location, serverUrl: string) => string);
  clientIdRequired: boolean;
  clientSecretRequired: boolean;
  clientSecretDisabled: boolean;
  tip: string | ReactNode;
};

export function OpenIdForm({ onSetOpenId, otherButtons }: OpenIdFormProps) {
  const [issuer, setIssuer] = useState('');
  const [clientId, setClientId] = useState('');
  const [clientSecret, setClientSecret] = useState('');
  const [clientIdRequired, setClientIdRequired] = useState(true);
  const [clientSecretRequired, setClientSecretRequired] = useState(true);
  const [clientSecretDisabled, setClientSecretDisabled] = useState(false);
  const serverUrl = useServerURL();
  const location = useLocation();
  const [tip, setTip] = useState(null);

  const [loading, setLoading] = useState(false);

  const handleProviderChange = provider => {
    if (provider) {
      const newIssuer =
        typeof provider.issuer === 'function'
          ? provider.issuer(location, serverUrl)
          : provider.issuer;

      setIssuer(newIssuer ?? '');

      const newClientId =
        typeof provider.clientId === 'function'
          ? provider.clientId(location, serverUrl)
          : provider.clientId;

      setClientId(newClientId ?? '');

      const newclientSecret =
        typeof provider.clientSecret === 'function'
          ? provider.clientSecret(location, serverUrl)
          : provider.clientSecret;

      setClientSecret(newclientSecret ?? '');

      setClientIdRequired(provider.clientIdRequired);
      setClientSecretRequired(provider.clientSecretRequired);
      setClientSecretDisabled(provider.clientSecretDisabled);

      setTip(provider.tip);
    }
  };

  async function onSubmit() {
    if (loading) {
      return;
    }

    setLoading(true);
    await onSetOpenId({
      issuer: issuer ?? '',
      client_id: clientId ?? '',
      client_secret: clientSecret ?? '',
      server_hostname: serverUrl ?? '',
    });
    setLoading(false);
  }

  return (
    <Stack direction="column" style={{ marginTop: 10 }}>
      <OpenIdProviderSelector onProviderChange={handleProviderChange} />

      <FormField style={{ flex: 1 }}>
        <Input
          type="text"
          value={issuer}
          onChangeValue={newValue => setIssuer(newValue)}
        />
        <label
          style={{
            ...styles.verySmallText,
            color: theme.pageTextLight,
            marginTop: 5,
          }}
        >
          The OpenID provider URL. {tip}
        </label>
      </FormField>
      <FormField style={{ flex: 1 }}>
        <FormLabel title="Client ID" htmlFor="clientid-field" />
        <Input
          type="text"
          value={clientId}
          onChangeValue={newValue => setClientId(newValue)}
          required={clientIdRequired}
        />
        <label
          style={{
            ...styles.verySmallText,
            color: theme.pageTextLight,
            marginTop: 5,
          }}
        >
          The Client ID generated by the OpenID provider.
        </label>
      </FormField>
      <FormField style={{ flex: 1 }}>
        <FormLabel title="Client secret" htmlFor="clientsecret-field" />
        <Input
          type="text"
          value={clientSecret}
          onChangeValue={newValue => setClientSecret(newValue)}
          disabled={clientSecretDisabled}
          required={clientSecretRequired}
        />
        <label
          style={{
            ...styles.verySmallText,
            color: theme.pageTextLight,
            marginTop: 5,
          }}
        >
          The client secret associated with the ID generated by the OpenID
          provider.
        </label>
      </FormField>

      <Stack
        direction="row"
        justify="flex-end"
        align="center"
        style={{ marginTop: 20 }}
      >
        {otherButtons}
        <ButtonWithLoading type="primary" loading={loading} onClick={onSubmit}>
          OK
        </ButtonWithLoading>
      </Stack>
    </Stack>
  );
}

const openIdProviders: (OpenIdProviderOption | typeof Menu.line)[] = [
  ...[
    {
      label: 'Google',
      value: 'google',
      issuer: 'https://accounts.google.com',
      clientIdRequired: true,
      clientSecretRequired: true,
      clientSecretDisabled: false,
      tip: (
        <Link
          variant="external"
          to="https://developers.google.com/identity/sign-in/web/sign-in"
        >
          Integrating Google Sign-In into your web app
        </Link>
      ),
    },
    {
      label: 'Passwordless.id',
      value: 'passwordless',
      issuer: 'https://api.passwordless.id',
      clientId: (location: Location, serverUrl: string) =>
        serverUrl
          ? serverUrl
          : window.location.href.replace(location.pathname, ''),
      clientIdRequired: true,
      clientSecretRequired: true,
      clientSecretDisabled: true,
      tip: <Link
      variant='external'
      to="https://passwordless.id/"
      >
        Get started with passwordless.id
      </Link>,
    },
  ].sort((a, b) => a.label.localeCompare(b.label)),
  Menu.line,
  {
    label: 'Other',
    value: 'other',
    issuer: '',
    clientIdRequired: true,
    clientSecretRequired: true,
    clientSecretDisabled: true,
    tip: 'Use any OpenId provider of your preference',
  },
];

function OpenIdProviderSelector({ onProviderChange }) {
  const [value, setValue] = useState('');
  const handleProviderChange = newValue => {
    const selectedProvider = openIdProviders.find(provider =>
      provider != Menu.line ? provider.value === newValue : false,
    );
    onProviderChange(selectedProvider);
    setValue(newValue);
  };

  return (
    <FormField style={{ flex: 1 }}>
      <FormLabel title="OpenID Provider" htmlFor="provider-selector" />
      <Select
        options={openIdProviders.map(provider =>
          provider === Menu.line ? Menu.line : [provider.value, provider.label],
        )}
        defaultLabel="Select Provider"
        value={value}
        onChange={handleProviderChange}
      ></Select>
    </FormField>
  );
}
