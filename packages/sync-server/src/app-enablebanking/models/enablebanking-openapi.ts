/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Start user authorization
     * @description Start authorization by getting a redirect link and redirecting a PSU to that link
     */
    post: operations['initialize_session_auth_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sessions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Authorize user session
     * @description Authorize user session by provided authorization code
     */
    post: operations['authorize_session_sessions_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sessions/{session_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get session data
     * @description Get session data by session ID
     */
    get: operations['get_session_sessions__session_id__get'];
    put?: never;
    post?: never;
    /**
     * Delete session
     * @description Delete session by session ID. PSU's bank consent will be closed automatically if possible
     */
    delete: operations['delete_session_sessions__session_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/accounts/{account_id}/details': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get account details
     * @description Fetching account details from ASPSP for an account by its ID
     */
    get: operations['get_account_accounts__account_id__details_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/accounts/{account_id}/balances': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get account balances
     * @description Fetching account balances from ASPSP for an account by its ID
     */
    get: operations['get_account_balances_accounts__account_id__balances_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/accounts/{account_id}/transactions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get account transactions
     * @description Fetching account transactions from ASPSP for an account by its ID
     */
    get: operations['get_account_transactions_accounts__account_id__transactions_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/accounts/{account_id}/transactions/{transaction_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get transaction details
     * @description Fetching transaction details from ASPSP for an account transaction by its ID
     */
    get: operations['get_transaction_accounts__account_id__transactions__transaction_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/payments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create payment
     * @description Creating a payment consisting of one or multiple payment transactions
     */
    post: operations['create_payment_payments_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/payments/{payment_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get payment
     * @description Fetching payment status and details
     */
    get: operations['get_payment_payments__payment_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/payments/{payment_id}/transactions/{transaction_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get payment transaction
     * @description Fetching transaction details for a single transaction within a bulk payment
     */
    get: operations['get_payment_transaction_payments__payment_id__transactions__transaction_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/aspsps': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get list of ASPSPs
     * @description Get list of ASPSPs with their meta information
     */
    get: operations['get_aspsps_aspsps_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/application': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get application
     * @description Get application associated with provided JWT key ID
     */
    get: operations['get_application_application_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** ASPSP */
    ASPSP: {
      /**
       * Name
       * @description Name of the ASPSP (i.e. a bank or a similar financial institution)
       * @example Nordea
       */
      name: string;
      /**
       * Country
       * @description Two-letter ISO 3166 code of the country, in which ASPSP operates
       * @example FI
       */
      country: string;
    };
    /**
     * ASPSPData
     * @example {
     *       "auth_methods": [
     *         {
     *           "approach": "REDIRECT",
     *           "credentials": [
     *             {
     *               "description": "Business identity code (Y-tunnus) in 1234567-8 format",
     *               "name": "companyId",
     *               "required": true,
     *               "template": "^\\d{7}-\\d$",
     *               "title": "Company ID"
     *             }
     *           ],
     *           "hidden_method": false,
     *           "name": "MTA",
     *           "psu_type": "business"
     *         }
     *       ],
     *       "beta": false,
     *       "bic": "NDEAFIHH",
     *       "country": "FI",
     *       "logo": "https://enablebanking.com/brands/FI/Nordea/",
     *       "maximum_consent_validity": 15552000,
     *       "name": "Nordea",
     *       "payments": [
     *         {
     *           "allowed_auth_methods": [
     *             "MTA"
     *           ],
     *           "charge_bearer_values": [
     *             "SLEV"
     *           ],
     *           "creditor_account_schemas": [
     *             "IBAN"
     *           ],
     *           "creditor_agent_bic_fi_required": false,
     *           "creditor_agent_clearing_system_member_id_required": false,
     *           "creditor_country_required": false,
     *           "creditor_name_required": false,
     *           "creditor_postal_address_required": false,
     *           "currencies": [
     *             "EUR"
     *           ],
     *           "debtor_account_required": true,
     *           "debtor_account_schemas": [
     *             "IBAN"
     *           ],
     *           "debtor_contact_email_required": false,
     *           "debtor_contact_phone_required": false,
     *           "debtor_currency_required": false,
     *           "max_transactions": 1,
     *           "payment_type": "SEPA",
     *           "priority_codes": [
     *             "NORM"
     *           ],
     *           "psu_type": "business",
     *           "reference_number_schemas": [
     *             "FIRF",
     *             "INTL"
     *           ],
     *           "reference_number_supported": true,
     *           "regulatory_reporting_code_required": false,
     *           "remittance_information_lines": [
     *             {
     *               "max_length": 140,
     *               "min_length": 1,
     *               "pattern": "^.{1,140}$"
     *             }
     *           ],
     *           "remittance_information_required": true,
     *           "requested_execution_date_max_period": 365,
     *           "requested_execution_date_supported": true
     *         }
     *       ],
     *       "psu_types": [
     *         "business"
     *       ],
     *       "required_psu_headers": [
     *         "Psu-Ip-Address"
     *       ]
     *     }
     */
    ASPSPData: {
      /**
       * Name
       * @description Name of the ASPSP (i.e. a bank or a similar financial institution)
       * @example Nordea
       */
      name: string;
      /**
       * Country
       * @description Two-letter ISO 3166 code of the country, in which ASPSP operates
       * @example FI
       */
      country: string;
      /**
       * Logo
       * Format: uri
       * @description ASPSP logo URL. It is possible to transform (e.g. resize) the logo by adding special suffixes at the end of the URL. For example, `-/resize/500x/`. For full list of possible transformations, please refer to https://uploadcare.com/docs/transformations/image/
       * @example https://enablebanking.com/brands/FI/Nordea/
       */
      logo: string;
      /**
       * Psu Types
       * @description List of PSU types supported by ASPSP
       * @example [
       *       "personal",
       *       "business"
       *     ]
       */
      psu_types: components['schemas']['PSUType'][];
      /**
       * Auth Methods
       * @description List of available authentication methods. Provided in case multiple methods are available or it is possible to supply authentication credentials while initiating authorization.
       */
      auth_methods: components['schemas']['AuthMethod'][];
      /**
       * Maximum Consent Validity
       * @description Maximum consent validity which bank supports in seconds
       */
      maximum_consent_validity: number;
      /** @description Applicable only to sandbox environment. Additional information necessary to use sandbox environment. */
      sandbox?: components['schemas']['SandboxInfo'];
      /**
       * Beta
       * @description Flag showing whether implementation is in beta mode
       */
      beta: boolean;
      /**
       * Bic
       * @description BIC of the ASPSP
       */
      bic?: string;
      /**
       * Required Psu Headers
       * @description List of the headers required to indicate to data retrieval endpoints that PSU is online. Either all required PSU headers or none of them are to be provided, otherwise PSU_HEADER_NOT_PROVIDED error will be returned.
       */
      required_psu_headers?: string[];
      /**
       * Payments
       * @description Supported payment types by country and their properties
       */
      payments?: components['schemas']['ResponsePaymentType'][];
      /** @description Group, which the ASPSP belongs to */
      group?: components['schemas']['ASPSPGroup'];
    };
    /** ASPSPGroup */
    ASPSPGroup: {
      /**
       * Name
       * @description Name of the group, which the ASPSP belongs to
       * @example Volksbanken Raiffeisenbanken
       */
      name: string;
      /**
       * Logo
       * Format: uri
       * @description URL of the logo for the group to which the ASPSP belongs. This URL supports the same transformation postfixes as ASPSP logo URLs.
       * @example https://enablebanking.com/brands/DE/Volksbanken%20Raiffeisenbanken/
       */
      logo: string;
    };
    /**
     * Access
     * @example {
     *       "valid_until": "2019-08-24T14:15:22Z"
     *     }
     */
    Access: {
      /**
       * Accounts
       * @description List of accounts access to which is requested. If not set behaviour depends on the
       *     bank: some banks allow users to choose list of accessible accounts through their
       *     access consent UI, while other may provide access to all accounts or just access to
       *     the list of accounts.
       * @example [
       *       {
       *         "iban": "FI1737631867613465"
       *       }
       *     ]
       */
      accounts?: components['schemas']['AccountIdentification'][];
      /**
       * Balances
       * @description Request consent with balances access
       * @default true
       */
      balances: boolean;
      /**
       * Transactions
       * @description Request consent with transactions access
       * @default true
       */
      transactions: boolean;
      /**
       * Valid Until
       * Format: date-time
       * @description This parameter specifies the date and time until which the authorised session
       *     remains valid. The value must be in the RFC3339 date-time format with a timezone
       *     offset, e.g. `2025-12-01T12:00:00.000000+00:00`. The provided value cannot exceed
       *     the date and time, calculated as "now" + `maximum_consent_validity` (provided in
       *     seconds for each ASPSP in response to the GET /aspsps request). The provided value
       *     is subject to adjustment to comply with the ASPSP's requirements. Specifically, if
       *     the provided value is less than the minimum consent validity allowed by the ASPSP
       *     (e.g., some ASPSPs require a minimum of 1 hour or 1 day), the consent validity will
       *     be adjusted to meet these requirements. However, the session validity will remain
       *     exactly as specified. This means that even if the consent remains valid on the
       *     ASPSP's side, the session will expire based on the initially provided value.
       */
      valid_until: string;
    };
    /**
     * AccountIdentification
     * @example {
     *       "iban": "FI0455231152453547"
     *     }
     */
    AccountIdentification: {
      /**
       * Iban
       * @description International Bank Account Number (IBAN) - identification used internationally by financial institutions to uniquely identify the account of a customer. Further specifications of the format and content of the IBAN can be found in the standard ISO 13616 "Banking and related financial services - International Bank Account Number (IBAN)" version 1997-10-01, or later revisions.
       * @example FI8821291587733472
       */
      iban?: string;
      /**
       * @description Other identification if iban is not provided
       * @example {
       *       "identification": "123456",
       *       "scheme_name": "BBAN"
       *     }
       */
      other?: components['schemas']['GenericIdentification'];
    };
    /** AccountResource */
    AccountResource: {
      /** @description Primary account identifier */
      account_id?: components['schemas']['AccountIdentification'];
      /**
       * All Account Ids
       * @description All account identifiers provided by ASPSPs (including primary identifier available in the accountId field)
       */
      all_account_ids?: components['schemas']['GenericIdentification'][];
      /** @description Information about the financial institution servicing the account */
      account_servicer?: components['schemas']['FinancialInstitutionIdentification'];
      /**
       * Name
       * @description Account holder(s) name
       */
      name?: string;
      /**
       * Details
       * @description Account description set by PSU or provided by ASPSP
       */
      details?: string;
      /** @description Specifies the usage of the account */
      usage?: components['schemas']['Usage'];
      /** @description Specifies the type of the account */
      cash_account_type: components['schemas']['CashAccountType'];
      /**
       * Product
       * @description Product Name of the Bank for this account, proprietary definition
       */
      product?: string;
      /**
       * Currency
       * @description Specifies the currency of the account
       */
      currency: string;
      /**
       * Psu Status
       * @description Relationship between the PSU and the account - Account Holder - Co-account Holder - Attorney
       */
      psu_status?: string;
      /** @description Specifies credit limit of the account */
      credit_limit?: components['schemas']['AmountType'];
      /**
       * Legal Age
       * @description Specifies whether Enable Banking is confident that the account holder is of legal age or is a minor. The field takes the following values:
       *     true if the account holder is of legal age;
       *     false if the account holder is a minor;
       *     null (or the field is not set) if it is not possible to determine whether the account holder is of legal age or a minor or if the legal age check is not applicable (in cases such as if the account holder is a legal entity or there are multiple account co-holders)
       */
      legal_age?: boolean;
      /** @description Postal address of the account holder */
      postal_address?: components['schemas']['PostalAddress'];
      /**
       * Uid
       * Format: uuid
       * @description Unique account identificator used for fetching account balances and transactions. It is valid only until the session to which the account belongs is in the AUTHORIZED status. It can be not set in case it is know that it is not possible to fetch balances and transactions for the account (for example, in case the account is blocked or closed at the ASPSP side).
       */
      uid?: string;
      /**
       * Identification Hash
       * @description Primary account identification hash. It can be used for matching accounts between multiple sessions (even in case the sessions are authorized by different PSUs).
       * @example WwpbCiJhY2NvdW50IiwKImFjY291bnRfaWQiLAoiaWJhbiIKXQpd.E8GzhnnsFC7K+4e3YMYYKpyM83Zx6toXrjgcvPP/Lqc=
       */
      identification_hash: string;
      /**
       * Identification Hashes
       * @description List of possible account identification hashes. Identification hash is based on the account number. Some accounts may have multiple account numbers (e.g. IBAN and BBAN). This field contains all possible hashes. Not all of these hashes can be used to uniquely identify an account and that the primary goal of them is to be able to fuzzy matching of accounts by certain properties. Primary hash is included in this list.
       * @example [
       *       "WwpbCiJhY2NvdW50IiwKImFjY291bnRfaWQiLAoiaWJhbiIKXQpd.E8GzhnnsFC7K+4e3YMYYKpyM83Zx6toXrjgcvPP/Lqc=",
       *       "WwpbCiJhc3BzcF9uYW1lIgpdLApbCiJhc3BzcF9jb3VudHJ5IgpdLApbCiJhY2NvdW50IiwKImFjY291bnRfaWQiLAoib3RoZXIiLAoic2NoZW1lX25hbWUiCl0sClsKImFjY291bnQiLAoiYWNjb3VudF9pZCIsCiJvdGhlciIsCiJpZGVudGlmaWNhdGlvbiIKXQpd.AOm/TULGPD4a4GdcWhR9xh0GPlPUZuB2O1S9SYFWEz0="
       *     ]
       */
      identification_hashes: string[];
    };
    /**
     * AddressType
     * @example Business
     * @enum {string}
     */
    AddressType:
      | 'Business'
      | 'Correspondence'
      | 'DeliveryTo'
      | 'MailTo'
      | 'POBox'
      | 'Postal'
      | 'Residential'
      | 'Statement';
    /** AmountType */
    AmountType: {
      /**
       * Currency
       * @description ISO 4217 code of the currency of the amount
       * @example EUR
       */
      currency: string;
      /**
       * Amount
       * @description Numerical value or monetary figure associated with a particular transaction, representing balance on an account, a fee or similar. Represented as a decimal number, using . (dot) as a decimal separator. Allowed precision (number of digits after the decimal separator) varies depending on the currency and is validated differently depending on the context.
       * @example 1.23
       */
      amount: string;
    };
    /** AuthMethod */
    AuthMethod: {
      /**
       * Name
       * @description Internal name of the authentication method
       */
      name?: string;
      /**
       * Title
       * @description Human-readable title of the authentication method
       */
      title?: string;
      /** @description PSU type to which the authentication method is applicable */
      psu_type: components['schemas']['PSUType'];
      /**
       * Credentials
       * @description List of credentials which are possible to supply while initiating authorization
       */
      credentials?: components['schemas']['Credential'][];
      /** @description Authentication approach used in the current authentication method */
      approach: components['schemas']['AuthenticationApproach'];
      /**
       * Hidden Method
       * @description Flag showing whether the current authentication method is hidden from the user. If `true` then the user will not be able to select this authentication method. It is only possible to select this authentication method via API.
       */
      hidden_method: boolean;
    };
    /**
     * AuthenticationApproach
     * @example REDIRECT
     * @enum {string}
     */
    AuthenticationApproach: 'REDIRECT' | 'DECOUPLED' | 'EMBEDDED';
    /** AuthorizeSessionRequest */
    AuthorizeSessionRequest: {
      /**
       * Code
       * @description Authorization code returned when redirecting PSU
       */
      code: string;
    };
    /** AuthorizeSessionResponse */
    AuthorizeSessionResponse: {
      /**
       * Session Id
       * Format: uuid4
       * @description ID of the PSU session
       */
      session_id: string;
      /**
       * Accounts
       * @description List of authorized accounts
       */
      accounts: components['schemas']['AccountResource'][];
      /** @description ASPSP used with the session */
      aspsp: components['schemas']['ASPSP'];
      /** @description PSU type used with the session */
      psu_type: components['schemas']['PSUType'];
      /**
       * @description Scope of access requested from ASPSP and confirmed by PSU
       * @example {
       *       "valid_until": "2021-01-01T00:00:00Z"
       *     }
       */
      access: components['schemas']['Access'];
    };
    /** BalanceResource */
    BalanceResource: {
      /**
       * Name
       * @description Label of the balance
       * @example Booked balance
       */
      name: string;
      /** @description Structure aiming to embed the amount and the currency to be used */
      balance_amount: components['schemas']['AmountType'];
      /**
       * @description Available balance type values
       * @example CLBD
       */
      balance_type: components['schemas']['BalanceStatus'];
      /**
       * Last Change Date Time
       * Format: date-time
       * @description Timestamp of the last change of the balance amount
       */
      last_change_date_time?: string;
      /**
       * Reference Date
       * Format: date
       * @description Reference date for the balance
       */
      reference_date?: string;
      /**
       * Last Committed Transaction
       * @description Entry reference of the last transaction contributing to the balance value
       * @example 4604aa90f8a8418092d80c3270846f0a
       */
      last_committed_transaction?: string;
    };
    /**
     * BalanceStatus
     * @example CLAV
     * @enum {string}
     */
    BalanceStatus:
      | 'CLAV'
      | 'CLBD'
      | 'FWAV'
      | 'INFO'
      | 'ITAV'
      | 'ITBD'
      | 'OPAV'
      | 'OPBD'
      | 'PRCD'
      | 'OTHR'
      | 'VALU'
      | 'XPCD';
    /** BankTransactionCode */
    BankTransactionCode: {
      /**
       * Description
       * @description Arbitrary transaction categorization description
       * @example Utlandsbetalning
       */
      description?: string;
      /**
       * Code
       * @description Specifies the family of a transaction within the domain
       * @example 12
       */
      code?: string;
      /**
       * Sub Code
       * @description Specifies the sub-product family of a transaction within a specific family
       * @example 32
       */
      sub_code?: string;
    };
    /**
     * Beneficiary
     * @example {
     *       "creditor": {
     *         "name": "Organisation/Person Name"
     *       },
     *       "creditor_account": {
     *         "identification": "FI0455231152453547",
     *         "scheme_name": "IBAN"
     *       }
     *     }
     */
    Beneficiary: {
      /** @description Identification of the financial institution where the account receiving funds is held */
      creditor_agent?: components['schemas']['FinancialInstitutionIdentification'];
      /** @description Identification of the party receiving funds */
      creditor?: components['schemas']['PartyIdentification'];
      /** @description Identification of the account receiving funds */
      creditor_account: components['schemas']['GenericIdentification'];
      /**
       * Creditor Currency
       * @description ISO 4217 currency code, in which the account receiving funds is held
       */
      creditor_currency?: string;
    };
    /**
     * CashAccountType
     * @example CACC
     * @enum {string}
     */
    CashAccountType: 'CACC' | 'CASH' | 'CARD' | 'LOAN' | 'SVGS' | 'OTHR';
    /**
     * CategoryPurposeCode
     * @example BONU
     * @enum {string}
     */
    CategoryPurposeCode:
      | 'BONU'
      | 'CASH'
      | 'CBLK'
      | 'CCRD'
      | 'CORT'
      | 'DCRD'
      | 'DIVI'
      | 'DVPM'
      | 'EPAY'
      | 'FCOL'
      | 'GOVT'
      | 'HEDG'
      | 'ICCP'
      | 'IDCP'
      | 'INTC'
      | 'INTE'
      | 'LOAN'
      | 'MP2B'
      | 'MP2P'
      | 'OTHR'
      | 'PENS'
      | 'RPRE'
      | 'RRCT'
      | 'RVPM'
      | 'SALA'
      | 'SECU'
      | 'SSBE'
      | 'SUPP'
      | 'TAXS'
      | 'TRAD'
      | 'TREA'
      | 'VATX'
      | 'WHLD';
    /**
     * ChargeBearerCode
     * @example SLEV
     * @enum {string}
     */
    ChargeBearerCode: 'SLEV' | 'SHAR' | 'DEBT' | 'CRED';
    /** ClearingSystemMemberIdentification */
    ClearingSystemMemberIdentification: {
      /**
       * Clearing System Id
       * @description Specification of a pre-agreed offering between clearing agents or the channel through which the payment instruction is processed.
       * @example NZNCC
       */
      clearing_system_id?: string;
      /**
       * Member Id
       * @description Identification of a member of a clearing system.
       * @example 20368
       */
      member_id?: string;
    };
    /** ContactDetails */
    ContactDetails: {
      /**
       * Email Address
       * @description Email address of a person
       */
      email_address?: string;
      /**
       * Phone Number
       * @description Phone number of a person
       */
      phone_number?: string;
    };
    /**
     * CreatePaymentRequest
     * @example {
     *       "aspsp": {
     *         "country": "FI",
     *         "name": "S-Pankki"
     *       },
     *       "payment_request": {
     *         "credit_transfer_transaction": [
     *           {
     *             "beneficiary": {
     *               "creditor": {
     *                 "name": "Organisation/Person Name"
     *               },
     *               "creditor_account": {
     *                 "identification": "FI0455231152453547",
     *                 "scheme_name": "IBAN"
     *               }
     *             },
     *             "instructed_amount": {
     *               "amount": "10.33",
     *               "currency": "EUR"
     *             }
     *           }
     *         ]
     *       },
     *       "payment_type": "SEPA",
     *       "psu_type": "personal",
     *       "redirect_url": "https://google.com/",
     *       "state": "b463a960-9616-4df6-909f-f80884190c22"
     *     }
     */
    CreatePaymentRequest: {
      /** @description Specifies the type of payment used */
      payment_type: components['schemas']['PaymentType'];
      /** @description Specifies the details required to initiate a payment */
      payment_request: components['schemas']['PaymentRequestResource'];
      /**
       * @description ASPSP that PSU is going to be authenticated to
       * @example {
       *       "country": "FI",
       *       "name": "Nordea"
       *     }
       */
      aspsp: components['schemas']['ASPSP'];
      /**
       * State
       * @description Arbitrary string. Same string will be returned in query parameter when redirecting to the URL passed via redirect_url parameter
       * @example 3a57e2d3-2e0c-4336-af9b-7fa94f0606a3
       */
      state: string;
      /**
       * Redirect Url
       * Format: uri
       * @description URL that PSU will be redirected to after authorization
       */
      redirect_url: string;
      /** @description PSU type which consent is created for */
      psu_type: components['schemas']['PSUType'];
      /**
       * Credentials
       * @description PSU credentials (User ID, company ID etc.) If not provided, then those are going to be asked from a PSU during authorization
       * @example {
       *       "userId": "MyUsername"
       *     }
       */
      credentials?: Record<string, never>;
      /**
       * Auth Method
       * @description Desired authorization method (in case ASPSP supports multiple). Supported methods can be obtained from ASPSP auth_methods
       */
      auth_method?: string;
      /**
       * Language
       * @description Preferred PSU language. Two-letter lowercase language code
       * @example fi
       */
      language?: string;
      /**
       * Webhook Url
       * Format: uri
       * @description URL that will receive POST requests notifying about payment changes
       * @example https://app.com/payment-webhook-handler
       */
      webhook_url?: string;
    };
    /**
     * CreatePaymentResponse
     * @example {
     *       "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
     *       "status": "PDNG",
     *       "url": "https://sandbox.tilisy.com/pis/start?payment_id=9bbd806c-f144-4eb5-8eb7-48650ff4d56b"
     *     }
     */
    CreatePaymentResponse: {
      /**
       * Payment Id
       * Format: uuid
       * @description Payment ID
       */
      payment_id: string;
      /** @description Payment status */
      status: components['schemas']['PaymentStatus'];
      /**
       * Url
       * Format: uri
       * @description URL to redirect a PSU to
       */
      url: string;
    };
    /** Credential */
    Credential: {
      /**
       * Name
       * @description Internal name of the credential. The name is to be used when passing credentials to the "start user authorization" request
       * @example userId
       */
      name: string;
      /**
       * Title
       * @description Title for the credential to be displayed to PSU
       * @example User ID
       */
      title: string;
      /**
       * Required
       * @description Indication whether the credential is required
       * @example true
       */
      required: boolean;
      /**
       * Description
       * @description Description of the credential to be displayed to PSU
       * @example Your identifier used for logging in to online banking
       */
      description?: string;
      /**
       * Template
       * @description Perl compatible regular expression used for check of the credential format
       * @example ^\d{8}$
       */
      template?: string;
    };
    /**
     * CreditDebitIndicator
     * @example CRDT
     * @enum {string}
     */
    CreditDebitIndicator: 'CRDT' | 'DBIT';
    /**
     * CreditTransferTransaction
     * @description Payment instruction to be executed by the ASPSP
     */
    CreditTransferTransaction: {
      /** @description Structure aiming to embed the amount and the currency to be used */
      instructed_amount: components['schemas']['AmountType'];
      /** @description Specification of a beneficiary */
      beneficiary: components['schemas']['Beneficiary'];
      /** @description Set of elements used to reference a payment instruction */
      payment_id?: components['schemas']['PaymentIdentification'];
      requested_execution_date?: components['schemas']['RequestedExecutionDate'];
      reference_number?: components['schemas']['ReferenceNumber'];
      end_date?: components['schemas']['EndDate'];
      /** @description Execution date shifting rule for standing orders */
      execution_rule?: components['schemas']['ExecutionRule'];
      /** @description Frequency rule for standing orders */
      frequency?: components['schemas']['FrequencyCode'];
      /** @description Identifies the original party from whom the funds originate in the payment transaction */
      ultimate_debtor?: components['schemas']['PartyIdentification'];
      /** @description Identifies the final party receiving the funds in the payment transaction */
      ultimate_creditor?: components['schemas']['PartyIdentification'];
      /**
       * Regulatory Reporting
       * @description List of needed regulatory reporting codes for international payments
       */
      regulatory_reporting?: components['schemas']['RegulatoryReporting'][];
      remittance_information?: components['schemas']['UnstructuredRemittanceInformation'];
    };
    /**
     * CreditTransferTransactionDetails
     * @description Details of the payment instruction executed (to be executed) by the ASPSP
     */
    CreditTransferTransactionDetails: {
      /** @description Structure aiming to embed the amount and the currency to be used */
      instructed_amount: components['schemas']['AmountType'];
      /** @description Specification of a beneficiary */
      beneficiary: components['schemas']['Beneficiary'];
      /** @description Set of elements used to reference a payment instruction */
      payment_id?: components['schemas']['PaymentIdentification'];
      requested_execution_date?: components['schemas']['RequestedExecutionDate'];
      reference_number?: components['schemas']['ReferenceNumber'];
      end_date?: components['schemas']['EndDate'];
      /** @description Execution date shifting rule for standing orders */
      execution_rule?: components['schemas']['ExecutionRule'];
      /** @description Frequency rule for standing orders */
      frequency?: components['schemas']['FrequencyCode'];
      /** @description Identifies the original party from whom the funds originate in the payment transaction */
      ultimate_debtor?: components['schemas']['PartyIdentification'];
      /** @description Identifies the final party receiving the funds in the payment transaction */
      ultimate_creditor?: components['schemas']['PartyIdentification'];
      /**
       * Regulatory Reporting
       * @description List of needed regulatory reporting codes for international payments
       */
      regulatory_reporting?: components['schemas']['RegulatoryReporting'][];
      remittance_information?: components['schemas']['UnstructuredRemittanceInformation'];
      /**
       * Transaction Id
       * @description Unique identifier of the payment transaction, which can be used for fetching details through the get payment transaction endpoint
       */
      transaction_id?: string;
      /** @description Status of the payment transaction */
      transaction_status?: components['schemas']['PaymentStatus'];
    };
    /**
     * CurrencyCode
     * @description Specifies the currency of the amount or of the account according the ISO 4217 standard
     * @example EUR
     */
    CurrencyCode: string;
    /**
     * EndDate
     * Format: date
     * @description The last applicable day of execution for a given standing order.
     *     If not given, the standing order is considered as endless.
     *
     */
    EndDate: string;
    /**
     * Environment
     * @example SANDBOX
     * @enum {string}
     */
    Environment: 'SANDBOX' | 'PRODUCTION';
    /**
     * ErrorCode
     * @example PSU_HEADER_NOT_PROVIDED
     * @enum {string}
     */
    ErrorCode:
      | 'ACCESS_DENIED'
      | 'ACCOUNT_DOES_NOT_EXIST'
      | 'ALREADY_AUTHORIZED'
      | 'ASPSP_ACCOUNT_NOT_ACCESSIBLE'
      | 'ASPSP_ERROR'
      | 'ASPSP_TIMEOUT'
      | 'ASPSP_RATE_LIMIT_EXCEEDED'
      | 'AUTHORIZATION_NOT_PROVIDED'
      | 'CLOSED_SESSION'
      | 'DATE_TO_WITHOUT_DATE_FROM'
      | 'DATE_FROM_IN_FUTURE'
      | 'EXPIRED_AUTHORIZATION_CODE'
      | 'EXPIRED_SESSION'
      | 'INVALID_ACCOUNT_ID'
      | 'INVALID_HOST'
      | 'UNAUTHORIZED_IP'
      | 'NO_ACCOUNTS_ADDED'
      | 'PAYMENT_NOT_FOUND'
      | 'PSU_HEADER_NOT_PROVIDED'
      | 'REDIRECT_URI_NOT_ALLOWED'
      | 'REVOKED_SESSION'
      | 'SESSION_DOES_NOT_EXIST'
      | 'UNAUTHORIZED_ACCESS'
      | 'UNTRUSTED_PAYMENT_PARTY'
      | 'WEBHOOK_URI_NOT_ALLOWED'
      | 'WRONG_ASPSP_PROVIDED'
      | 'WRONG_AUTHORIZATION_CODE'
      | 'WRONG_DATE_INTERVAL'
      | 'WRONG_CREDENTIALS_PROVIDED'
      | 'WRONG_REQUEST_PARAMETERS'
      | 'WRONG_SESSION_STATUS'
      | 'WRONG_TRANSACTIONS_PERIOD'
      | 'WRONG_CONTINUATION_KEY'
      | 'TRANSACTION_DOES_NOT_EXIST'
      | 'PAYMENT_LIMIT_EXCEEDED'
      | 'ASPSP_PAYMENT_NOT_ACCESSIBLE'
      | 'INVALID_PAYMENT'
      | 'ASPSP_PSU_ACTION_REQUIRED';
    /** ErrorResponse */
    ErrorResponse: {
      /**
       * Message
       * @description Error message
       * @example Required PSU header not provided
       */
      message: string;
      /**
       * Code
       * @description Error code, identical to the http response code
       * @example 422
       */
      code?: number;
      /**
       * @description Text error code
       * @example PSU_HEADER_NOT_PROVIDED
       */
      error?: components['schemas']['ErrorCode'];
      /**
       * Detail
       * @description Detailed explanation of an error
       * @example PSU header psuIpAddress is not provided
       */
      detail?: unknown;
    };
    /** ExchangeRate */
    ExchangeRate: {
      /** @description ISO 4217 code of the currency, in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP. */
      unit_currency?: components['schemas']['CurrencyCode'];
      /**
       * Exchange Rate
       * @description The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
       */
      exchange_rate?: string;
      /** @description Specifies the type of exchange rate applied to the transaction */
      rate_type?: components['schemas']['RateType'];
      /**
       * Contract Identification
       * @description Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
       */
      contract_identification?: string;
      /** @description Original amount, in which transaction was initiated. In particular, for cross-currency card transactions, the value represents original value of a purchase or a withdrawal in a currency different from the card's native or default currency. */
      instructed_amount?: components['schemas']['AmountType'];
    };
    /**
     * ExecutionRule
     * @example FWNG
     * @enum {string}
     */
    ExecutionRule: 'FWNG' | 'PREC';
    /** FinancialInstitutionIdentification */
    FinancialInstitutionIdentification: {
      /**
       * Bic Fi
       * @description Code allocated to a financial institution by the ISO 9362 Registration Authority as described in ISO 9362 "Banking - Banking telecommunication messages - Business identification code (BIC)".
       */
      bic_fi?: string;
      /** @description Information used to identify a member within a clearing system. */
      clearing_system_member_id?: components['schemas']['ClearingSystemMemberIdentification'];
      /**
       * Name
       * @description Name of the financial institution
       */
      name?: string;
    };
    /**
     * FrequencyCode
     * @example DAIL
     * @enum {string}
     */
    FrequencyCode:
      | 'DAIL'
      | 'WEEK'
      | 'TOWK'
      | 'MNTH'
      | 'TOMN'
      | 'QUTR'
      | 'SEMI'
      | 'YEAR';
    /**
     * GenericIdentification
     * @example {
     *       "identification": "123456",
     *       "scheme_name": "BBAN"
     *     }
     */
    GenericIdentification: {
      /**
       * Identification
       * @description An identifier
       * @example 12345678
       */
      identification: string;
      /**
       * @description Name of the identification scheme. Partially based on ISO20022 external code list
       * @example BBAN
       */
      scheme_name: components['schemas']['SchemeName'];
      /**
       * Issuer
       * @description Entity that assigns the identification. This could be a country code or any organisation name or identifier that can be recognized by both parties
       * @example FR
       */
      issuer?: string;
    };
    /** GetApplicationResponse */
    GetApplicationResponse: {
      /**
       * Name
       * @description Application name
       */
      name: string;
      /**
       * Description
       * @description Application description
       */
      description?: string;
      /**
       * Kid
       * Format: uuid4
       * @description Application key id
       */
      kid: string;
      /** @description Application environment */
      environment: components['schemas']['Environment'];
      /**
       * Redirect Urls
       * @description List of allowed redirect urls
       */
      redirect_urls: string[];
      /**
       * Active
       * @description Indication whether the application is active
       */
      active: boolean;
      /**
       * Countries
       * @description List of supported countries
       */
      countries: string[];
      /**
       * Services
       * @description List of supported services
       */
      services: components['schemas']['Service'][];
    };
    /** GetAspspsResponse */
    GetAspspsResponse: {
      /**
       * Aspsps
       * @description List of available ASPSPs and countries
       */
      aspsps: components['schemas']['ASPSPData'][];
    };
    /** GetPaymentResponse */
    GetPaymentResponse: {
      /**
       * Payment Id
       * Format: uuid
       * @description Payment ID
       */
      payment_id: string;
      /** @description Payment status */
      status: components['schemas']['PaymentStatus'];
      /** @description Payment request */
      payment_details: components['schemas']['PaymentRequestResourceDetails'];
      /**
       * Final Status
       * @description Indicates whether the payment has reached the status expected to be final (i.e. if the value of the field is `true`, the payment status is not expected to change on later requests)
       */
      final_status: boolean;
      /** @description Details explaining the payment status, provided when the cause can be determined unambiguously, mainly for rejected payments */
      status_reason_information?: components['schemas']['StatusReasonInformation'];
    };
    /** GetPaymentTransactionResponse */
    GetPaymentTransactionResponse: {
      /**
       * Payment Id
       * Format: uuid
       * @description Payment ID
       */
      payment_id: string;
      /** @description Payment transaction details */
      transaction_details: components['schemas']['CreditTransferTransactionDetails'];
    };
    /**
     * GetSessionResponse
     * @example {
     *       "access": {
     *         "valid_until": "2020-12-01T12:00:00.000000+00:00"
     *       },
     *       "accounts": [
     *         "497f6eca-6276-4993-bfeb-53cbbbba6f08"
     *       ],
     *       "accounts_data": [
     *         {
     *           "identification_hash": "WwpbCiJhY2NvdW50IiwKImFjY291bnRfaWQiLAoiaWJhbiIKXQpd.E8GzhnnsFC7K+4e3YMYYKpyM83Zx6toXrjgcvPP/Lqc=",
     *           "uid": "497f6eca-6276-4993-bfeb-53cbbbba6f08"
     *         }
     *       ],
     *       "aspsp": {
     *         "country": "FI",
     *         "name": "Nordea"
     *       },
     *       "authorized": "2020-12-01T12:00:00.000000+00:00",
     *       "created": "2020-12-01T12:00:00.000000+00:00",
     *       "psu_type": "business",
     *       "status": "AUTHORIZED"
     *     }
     */
    GetSessionResponse: {
      /**
       * @description Session status
       * @example AUTHORIZED
       */
      status: components['schemas']['SessionStatus'];
      /**
       * Accounts
       * @description List of account ids available in the session
       */
      accounts: string[];
      /**
       * Accounts Data
       * @description Accounts data stored in the session
       */
      accounts_data: components['schemas']['SessionAccount'][];
      /** @description ASPSP used with the session */
      aspsp: components['schemas']['ASPSP'];
      /** @description PSU type used with the session */
      psu_type: components['schemas']['PSUType'];
      /**
       * Psu Id Hash
       * @description Hashed unique identification of a PSU used by the client application. In case PSU ID is not passed by the client application, the hash is calculated based on a random value. The hash also inherits the application ID, so different hashes will be calculated when using the same PSU ID with different applications.
       */
      psu_id_hash: string;
      /**
       * @description Scope of access requested from ASPSP and confirmed by PSU
       * @example {
       *       "valid_until": "2020-12-01T12:00:00.000000+00:00"
       *     }
       */
      access: components['schemas']['Access'];
      /**
       * Created
       * Format: date-time
       * @description Date and time when the session was created
       * @example 2020-12-01T12:00:00.000000+00:00
       */
      created: string;
      /**
       * Authorized
       * Format: date-time
       * @description Date and time when the session was authorized
       * @example 2020-12-01T12:00:00.000000+00:00
       */
      authorized?: string;
      /**
       * Closed
       * Format: date-time
       * @description Date and time when the session was closed
       */
      closed?: string;
    };
    /** HalBalances */
    HalBalances: {
      /**
       * Balances
       * @description List of account balances
       */
      balances: components['schemas']['BalanceResource'][];
    };
    /** HalTransactions */
    HalTransactions: {
      /**
       * Transactions
       * @description List of transactions
       */
      transactions: components['schemas']['Transaction'][];
      /**
       * Continuation Key
       * @description Value to retrieve next page of transactions. Null if there are no more pages. Only valid in current session.
       */
      continuation_key?: string;
    };
    /**
     * PSUType
     * @example business
     * @enum {string}
     */
    PSUType: 'business' | 'personal';
    /**
     * PartyIdentification
     * @example {
     *       "name": "MyPreferredAisp",
     *       "postal_address": {
     *         "address_line": [
     *           "Mr Asko Teirila PO Box 511",
     *           "39140 AKDENMAA FINLAND"
     *         ],
     *         "address_type": "Business",
     *         "building_number": "4",
     *         "country": "FI",
     *         "country_sub_division": "Uusimaa",
     *         "department": "Department of resources",
     *         "post_code": "00123",
     *         "street_name": "Vasavagen",
     *         "sub_department": "Sub Department of resources",
     *         "town_name": "Helsinki"
     *       }
     *     }
     */
    PartyIdentification: {
      /**
       * Name
       * @description Name by which a party is known and which is usually used to identify that party.
       * @example MyPreferredAisp
       */
      name?: string;
      /** @description Information that locates and identifies a specific address, as defined by postal services */
      postal_address?: components['schemas']['PostalAddress'];
      /** @description Unique identification of an account, a person or an organisation, as assigned by an issuer */
      organisation_id?: components['schemas']['GenericIdentification'];
      /** @description Unique identification of an account, a person or an organisation, as assigned by an issuer */
      private_id?: components['schemas']['GenericIdentification'];
      /** @description Specifies the contact details associated with a person or an organisation */
      contact_details?: components['schemas']['ContactDetails'];
    };
    /** PaymentIdentification */
    PaymentIdentification: {
      /**
       * Instruction Id
       * @description Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
       *
       *     API: Unique identification shared between the PISP and the ASPSP
       *
       */
      instruction_id?: string;
      /**
       * End To End Id
       * @description Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
       *
       *     API: Unique identification shared between the merchant and the PSU
       *
       */
      end_to_end_id?: string;
    };
    /**
     * PaymentInformationId
     * @description Reference assigned by a sending party to unambiguously identify the payment information block within the message.
     *
     */
    PaymentInformationId: string;
    /**
     * PaymentRequestResource
     * @example {
     *       "credit_transfer_transaction": [
     *         {
     *           "beneficiary": {
     *             "creditor": {
     *               "name": "Organisation/Person Name"
     *             },
     *             "creditor_account": {
     *               "identification": "FI0455231152453547",
     *               "scheme_name": "IBAN"
     *             }
     *           },
     *           "instructed_amount": {
     *             "amount": "10.33",
     *             "currency": "EUR"
     *           }
     *         }
     *       ],
     *       "debtor_account": {
     *         "identification": "FI7727551317119265",
     *         "scheme_name": "IBAN"
     *       }
     *     }
     */
    PaymentRequestResource: {
      /** @description Reference assigned by a sending party to unambiguously identify the payment information block within the message */
      payment_information_id?: components['schemas']['PaymentInformationId'];
      /** @description Set of elements used to further specify the type of payment */
      payment_type_information?: components['schemas']['PaymentTypeInformation'];
      /** @description Identification of the party sending funds */
      debtor?: components['schemas']['PartyIdentification'];
      /** @description Identification of the account from which funds are sent when the payment is executed. When the debtor account is not provided it is to be chosen by the PSU during payment authorisation flow. */
      debtor_account?: components['schemas']['GenericIdentification'];
      /** @description Identification of the financial institution where the debtor account is held. To be provided only in case the financial institution can not be unambiguously identified the ASPSP name towards which the payment is initiated. */
      debtor_agent?: components['schemas']['FinancialInstitutionIdentification'];
      /**
       * Debtor Currency
       * @description ISO 4217 code, in which debtor account is held
       * @default XXX
       */
      debtor_currency: string;
      /** @description Underlying reason for the payment */
      purpose?: components['schemas']['PurposeCode'];
      /** @description Specifies which party/parties will bear the charges associated with the processing of the payment */
      charge_bearer?: components['schemas']['ChargeBearerCode'];
      /**
       * Credit Transfer Transaction
       * @description Payment instructions to be executed towards one or multiple beneficiaries in the payment process. Maximum number of transactions depend on the ASPSP and type of the payment taking into accounts its specificities about payment request handling.
       */
      credit_transfer_transaction: components['schemas']['CreditTransferTransaction'][];
    };
    /**
     * PaymentRequestResourceDetails
     * @example {
     *       "credit_transfer_transaction": [
     *         {
     *           "beneficiary": {
     *             "creditor": {
     *               "name": "Organisation/Person Name"
     *             },
     *             "creditor_account": {
     *               "identification": "FI0455231152453547",
     *               "scheme_name": "IBAN"
     *             }
     *           },
     *           "instructed_amount": {
     *             "amount": "10.33",
     *             "currency": "EUR"
     *           }
     *         }
     *       ],
     *       "debtor_account": {
     *         "identification": "FI7727551317119265",
     *         "scheme_name": "IBAN"
     *       }
     *     }
     */
    PaymentRequestResourceDetails: {
      /** @description Reference assigned by a sending party to unambiguously identify the payment information block within the message */
      payment_information_id?: components['schemas']['PaymentInformationId'];
      /** @description Set of elements used to further specify the type of payment */
      payment_type_information?: components['schemas']['PaymentTypeInformation'];
      /** @description Identification of the party sending funds */
      debtor?: components['schemas']['PartyIdentification'];
      /** @description Identification of the account from which funds are sent when the payment is executed. When the debtor account is not provided it is to be chosen by the PSU during payment authorisation flow. */
      debtor_account?: components['schemas']['GenericIdentification'];
      /** @description Identification of the financial institution where the debtor account is held. To be provided only in case the financial institution can not be unambiguously identified the ASPSP name towards which the payment is initiated. */
      debtor_agent?: components['schemas']['FinancialInstitutionIdentification'];
      /**
       * Debtor Currency
       * @description ISO 4217 code, in which debtor account is held
       * @default XXX
       */
      debtor_currency: string;
      /** @description Underlying reason for the payment */
      purpose?: components['schemas']['PurposeCode'];
      /** @description Specifies which party/parties will bear the charges associated with the processing of the payment */
      charge_bearer?: components['schemas']['ChargeBearerCode'];
      /** Credit Transfer Transaction */
      credit_transfer_transaction?: components['schemas']['CreditTransferTransactionDetails'][];
    };
    /**
     * PaymentStatus
     * @example ACCC
     * @enum {string}
     */
    PaymentStatus:
      | 'ACCC'
      | 'ACCP'
      | 'ACSC'
      | 'ACSP'
      | 'ACTC'
      | 'ACWC'
      | 'ACWP'
      | 'PART'
      | 'RCVD'
      | 'PDNG'
      | 'RJCT'
      | 'ACPT'
      | 'ACCR'
      | 'RJCR'
      | 'PACR'
      | 'PDCR'
      | 'CNCL'
      | 'NULL';
    /**
     * PaymentType
     * @example SEPA
     * @enum {string}
     */
    PaymentType:
      | 'SEPA'
      | 'INST_SEPA'
      | 'DOMESTIC'
      | 'CROSSBORDER'
      | 'DOMESTIC_SE_GIRO'
      | 'INTERNAL'
      | 'BULK_SEPA'
      | 'BULK_DOMESTIC';
    /** PaymentTypeInformation */
    PaymentTypeInformation: {
      /** @description Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply */
      instruction_priority?: components['schemas']['PriorityCode'];
      /** @description Agreement under which or rules under which the transaction should be processed. Specifies a pre-agreed service or level of service between the parties, as published in an external service level code list */
      service_level?: components['schemas']['ServiceLevelCode'];
      /** @description Specifies the high level purpose of the instruction based on a set of pre-defined categories. This is used by the initiating party to provide information concerning the processing of the payment. It is likely to trigger special processing by any of the agents involved in the payment chain. */
      category_purpose?: components['schemas']['CategoryPurposeCode'];
      /**
       * Local Instrument
       * @description User community specific instrument
       */
      local_instrument?: string;
    };
    /** PostalAddress */
    PostalAddress: {
      /**
       * @description Available address type values
       * @example DeliveryTo
       */
      address_type?: components['schemas']['AddressType'];
      /**
       * Department
       * @description Identification of a division of a large organisation or building.
       * @example Department of resources
       */
      department?: string;
      /**
       * Sub Department
       * @description Identification of a sub-division of a large organisation or building.
       * @example Sub Department of resources
       */
      sub_department?: string;
      /**
       * Street Name
       * @description Name of a street or thoroughfare.
       * @example Vasavagen
       */
      street_name?: string;
      /**
       * Building Number
       * @description Number that identifies the position of a building on a street.
       * @example 4
       */
      building_number?: string;
      /**
       * Post Code
       * @description Identifier consisting of a group of letters and/or numbers that is
       *     added to a postal address to assist the sorting of mail.
       * @example 00123
       */
      post_code?: string;
      /**
       * Town Name
       * @description Name of a built-up area, with defined boundaries, and a local government.
       * @example Helsinki
       */
      town_name?: string;
      /**
       * Country Sub Division
       * @description Identifies a subdivision of a country such as state, region, county.
       * @example Uusimaa
       */
      country_sub_division?: string;
      /**
       * Country
       * @description Two-letter ISO 3166 code of the country in which a person resides (the place of a person's home). In the case of a company, it is the country from which the affairs of that company are directed.
       * @example FI
       */
      country?: string;
      /**
       * Address Line
       * @description Unstructured address. The two lines must embed zip code and town name
       * @example [
       *       "Mr Asko Teirila PO Box 511",
       *       "39140 AKDENMAA FINLAND"
       *     ]
       */
      address_line?: string[];
    };
    /**
     * PriorityCode
     * @example HIGH
     * @enum {string}
     */
    PriorityCode: 'HIGH' | 'NORM' | 'EXPR';
    /**
     * PurposeCode
     * @example ACCT
     * @enum {string}
     */
    PurposeCode: 'ACCT' | 'CASH' | 'COMC' | 'CPKC' | 'TRPT';
    /**
     * RateType
     * @example SPOT
     * @enum {string}
     */
    RateType: 'SPOT' | 'SALE' | 'AGRD';
    /**
     * ReferenceNumber
     * @description This field specifies the reference assigned by the sender to unambiguously identify the message.
     *
     */
    ReferenceNumber: string;
    /**
     * ReferenceNumberScheme
     * @example SEBG
     * @enum {string}
     */
    ReferenceNumberScheme: 'SEBG' | 'NORF' | 'FIRF' | 'INTL' | 'BERF' | 'SDDM';
    /** RegulatoryAuthority */
    RegulatoryAuthority: {
      /**
       * Country
       * @description Two-letter ISO 3166 code of the country in which the regulatory authority operates
       */
      country: string;
      /**
       * Name
       * @description Name of the regulatory authority
       */
      name: string;
    };
    /** RegulatoryReporting */
    RegulatoryReporting: {
      /** @description Regulatory authority to which reporting shall be made */
      authority?: components['schemas']['RegulatoryAuthority'];
      /** @description Details to provide on the regulatory reporting information */
      details: components['schemas']['RegulatoryReportingDetails'];
    };
    /** RegulatoryReportingCode */
    RegulatoryReportingCode: {
      /**
       * Value
       * @description Value of the code, i.e. what needs to be passed as a code when filling in regulatory reporting details.
       */
      value: string;
      /**
       * Description
       * @description Regulatory authority to which reporting shall be made
       */
      description: string;
    };
    /** RegulatoryReportingDetails */
    RegulatoryReportingDetails: {
      /** @description Amount of money to be reported. If not provided the total instructed amount of the transaction is assumed. */
      amount?: components['schemas']['AmountType'];
      /**
       * Code
       * @description A code specifying the nature, purpose, and/or reason for the transaction. Codes to be used depend on the regulatory authority, to which they are being reported.
       */
      code?: string;
      /**
       * Information
       * @description Additional details that cater for specific domestic regulatory requirements.
       */
      information: string;
    };
    /** RemittanceInformationLineInfo */
    RemittanceInformationLineInfo: {
      /**
       * Min Length
       * @description Minimum length of remittance information line
       */
      min_length?: number;
      /**
       * Max Length
       * @description Maximum length of remittance information line
       */
      max_length?: number;
      /**
       * Pattern
       * @description Specifies a regexp pattern for the remittance information line
       */
      pattern?: string;
    };
    /**
     * RequestedExecutionDate
     * Format: date
     * @description Date at which the initiating party requests the clearing agent to process the payment.
     *     API:
     *     This date can be used in the following cases:
     *     - the single requested execution date for a payment having several instructions. In this case, this field must be set at the payment level.
     *     - the requested execution date for a given instruction within a payment. In this case, this field must be set at each instruction level.
     *     - The first date of execution for a standing order.
     *     When the payment cannot be processed at this date, the ASPSP is allowed to shift the applied execution date to the next possible execution date for non-standing orders.
     *     For standing orders, the [executionRule] parameter helps to compute the execution date to be applied.
     *
     */
    RequestedExecutionDate: string;
    /**
     * ResponsePaymentType
     * @example {
     *       "allowed_auth_methods": [
     *         "string"
     *       ],
     *       "charge_bearer_values": [
     *         "SLEV"
     *       ],
     *       "creditor_account_schemas": [
     *         "IBAN"
     *       ],
     *       "creditor_agent_bic_fi_required": false,
     *       "creditor_agent_clearing_system_member_id_required": false,
     *       "creditor_country_required": false,
     *       "creditor_name_required": false,
     *       "creditor_postal_address_required": false,
     *       "currencies": [
     *         "EUR"
     *       ],
     *       "debtor_account_required": false,
     *       "debtor_account_schemas": [
     *         "IBAN"
     *       ],
     *       "debtor_contact_email_required": false,
     *       "debtor_contact_phone_required": false,
     *       "debtor_currency_required": false,
     *       "max_transactions": 1,
     *       "payment_type": "SEPA",
     *       "priority_codes": [
     *         "NORM"
     *       ],
     *       "psu_type": "business",
     *       "reference_number_schemas": [
     *         "FIRF",
     *         "INTL"
     *       ],
     *       "reference_number_supported": true,
     *       "regulatory_reporting_code_required": false,
     *       "remittance_information_lines": [
     *         {
     *           "max_length": 140,
     *           "min_length": 1,
     *           "pattern": "^.{1,140}$"
     *         }
     *       ],
     *       "remittance_information_required": false,
     *       "requested_execution_date_max_period": 365,
     *       "requested_execution_date_supported": true
     *     }
     */
    ResponsePaymentType: {
      /** @description Payment type name */
      payment_type: components['schemas']['PaymentType'];
      /**
       * Max Transactions
       * @description Maximum number of transactions per payment
       */
      max_transactions?: number;
      /**
       * Currencies
       * @description List of supported currencies
       */
      currencies?: string[];
      /**
       * Debtor Account Required
       * @description States if debtor account is required for payment initiation request. When the debtor account is not provided it is to be chosen by the PSU during payment authorisation flow. Create payment body field: `payment_request.debtor_account`
       * @default false
       */
      debtor_account_required: boolean;
      /**
       * Debtor Account Schemas
       * @description List of supported debtor account schemas
       */
      debtor_account_schemas?: components['schemas']['SchemeName'][];
      /**
       * Creditor Account Schemas
       * @description List of supported creditor account schemas
       */
      creditor_account_schemas?: components['schemas']['SchemeName'][];
      /**
       * Priority Codes
       * @description List of supported priority codes
       */
      priority_codes?: components['schemas']['PriorityCode'][];
      /**
       * Charge Bearer Values
       * @description List of supported charge bearer codes
       */
      charge_bearer_values?: components['schemas']['ChargeBearerCode'][];
      /**
       * Creditor Country Required
       * @description States if creditor country is required. Create payment body field: `payment_request.credit_transfer_transaction[*].beneficiary.creditor.postal_address.country`
       * @default false
       */
      creditor_country_required: boolean;
      /**
       * Creditor Name Required
       * @description States if creditor name is required.  Create payment body field: `payment_request.credit_transfer_transaction[*].beneficiary.creditor.postal_address.country`
       * @default false
       */
      creditor_name_required: boolean;
      /**
       * Creditor Postal Address Required
       * @description States if creditor postal address is required. Create payment body field: `payment_request.credit_transfer_transaction[*].beneficiary.creditor.postal_address`
       * @default false
       */
      creditor_postal_address_required: boolean;
      /**
       * Remittance Information Required
       * @description States if remittance information is required. Create payment body field: `payment_request.credit_transfer_transaction[*].remittance_information`
       * @default false
       */
      remittance_information_required: boolean;
      /**
       * Remittance Information Lines
       * @description Properties of remittance information. Each item of the array correspond to the remittance information line with the same index. When provided, the number of lines in the remittance information should be the same as the length of this array.
       */
      remittance_information_lines?: components['schemas']['RemittanceInformationLineInfo'][];
      /**
       * Debtor Currency Required
       * @description States if debtor currency is required. Create payment body field: `payment_request.debtor_currency`
       * @default false
       */
      debtor_currency_required: boolean;
      /**
       * Debtor Contact Email Required
       * @description States if debtor's contact email is required when a payment this type is being initiated. Create payment body field: `payment_request.debtor.contact_details.email_address`
       * @default false
       */
      debtor_contact_email_required: boolean;
      /**
       * Debtor Contact Phone Required
       * @description States if debtor's contact phone is required when a payment this type is being initiated. Create payment body field: `payment_request.debtor.contact_details.phone_number`
       * @default false
       */
      debtor_contact_phone_required: boolean;
      /**
       * Creditor Agent Bic Fi Required
       * @description States if creditor agent bicFi is required. Create payment body field: `payment_request.credit_transfer_transaction[*].beneficiary.creditor_agent.bic_fi`
       * @default false
       */
      creditor_agent_bic_fi_required: boolean;
      /**
       * Creditor Agent Clearing System Member Id Required
       * @description States if creditor agent clearing system member ID is required. Create payment body field: `payment_request.credit_transfer_transaction[*].beneficiary.creditor_agent.clearing_system_member_id`
       * @default false
       */
      creditor_agent_clearing_system_member_id_required: boolean;
      /**
       * Allowed Auth Methods
       * @description List of supported auth methods for this payment type
       */
      allowed_auth_methods?: string[];
      /**
       * Regulatory Reporting Codes
       * @description List of supported codes for regulatory reporting details
       */
      regulatory_reporting_codes?: components['schemas']['RegulatoryReportingCode'][];
      /**
       * Regulatory Reporting Code Required
       * @description States if regulatory reporting shall be provided for credit transfer transactions. Create payment body field: `payment_request.credit_transfer_transaction[*].regulatory_reporting.details.code`
       * @default false
       */
      regulatory_reporting_code_required: boolean;
      /**
       * Reference Number Supported
       * @description States if reference number can be provided for credit transfer transactions
       * @default false
       */
      reference_number_supported: boolean;
      /**
       * Reference Number Schemas
       * @description List of reference number schemas supported by a payment method
       */
      reference_number_schemas?: components['schemas']['ReferenceNumberScheme'][];
      /**
       * Requested Execution Date Supported
       * @description States if requested execution date supported by a payment method
       * @default false
       */
      requested_execution_date_supported: boolean;
      /**
       * Requested Execution Date Max Period
       * @description Maximum requested execution date interval in the future
       */
      requested_execution_date_max_period?: number;
      /**
       * Remittance Reference Supported
       * @description States if both reference number and remittance information can be provided simultaneously
       * @default false
       */
      remittance_reference_supported: boolean;
      /**
       * Final Successful Statuses
       * @description List of the final successful statuses for the payment type. Please note that when a payment reaches one of the statuses provided in this list, it is not yet guaranteed that the funds will be credited to the creditor's account specified in the payment request. It is up to the application that created the payment to conclude whether the funds are (or will be) received, depending on the actual payment status and other factors.
       */
      final_successful_statuses?: components['schemas']['PaymentStatus'][];
      /** @description PSU type */
      psu_type: components['schemas']['PSUType'];
    };
    /** SandboxInfo */
    SandboxInfo: {
      /**
       * Users
       * @description List of sandbox users which can be used to test sandbox environment
       */
      users?: components['schemas']['SandboxUser'][];
    };
    /** SandboxUser */
    SandboxUser: {
      /**
       * Username
       * @description Username
       * @example MyUsername
       */
      username?: string;
      /**
       * Password
       * @description Password
       * @example MySecretPassword
       */
      password?: string;
      /**
       * Otp
       * @description One time password
       * @example 123456
       */
      otp?: string;
    };
    /**
     * SchemeName
     * @example CHID
     * @enum {string}
     */
    SchemeName:
      | 'CHID'
      | 'GS1G'
      | 'DUNS'
      | 'BANK'
      | 'TXID'
      | 'CUST'
      | 'EMPL'
      | 'OTHC'
      | 'DRLC'
      | 'CUSI'
      | 'SOSE'
      | 'ARNU'
      | 'CCPT'
      | 'OTHI'
      | 'COID'
      | 'SREN'
      | 'SRET'
      | 'NIDN'
      | 'OAUT'
      | 'CPAN'
      | 'BBAN'
      | 'IBAN'
      | 'MIBN'
      | 'BGNR'
      | 'PGNR';
    /**
     * Service
     * @example AIS
     * @enum {string}
     */
    Service: 'AIS' | 'PIS';
    /**
     * ServiceLevelCode
     * @example BKTR
     * @enum {string}
     */
    ServiceLevelCode:
      | 'BKTR'
      | 'G001'
      | 'G002'
      | 'G003'
      | 'G004'
      | 'NUGP'
      | 'NURG'
      | 'PRPT'
      | 'SDVA'
      | 'SEPA'
      | 'SVDE'
      | 'URGP'
      | 'URNS';
    /** SessionAccount */
    SessionAccount: {
      /**
       * Uid
       * Format: uuid
       * @description Account identificator within the session
       */
      uid: string;
      /**
       * Identification Hash
       * @description Global account identification hash
       */
      identification_hash: string;
      /**
       * Identification Hashes
       * @description List of possible account identification hashes. Identification hash is based on the account number. Some accounts may have multiple account numbers (e.g. IBAN and BBAN). This field contains all possible hashes.
       */
      identification_hashes: string[];
    };
    /**
     * SessionStatus
     * @example INVALID
     * @enum {string}
     */
    SessionStatus:
      | 'INVALID'
      | 'PENDING_AUTHORIZATION'
      | 'RETURNED_FROM_BANK'
      | 'AUTHORIZED'
      | 'EXPIRED'
      | 'CLOSED'
      | 'REVOKED'
      | 'CANCELLED';
    /** StartAuthorizationRequest */
    StartAuthorizationRequest: {
      /**
       * @description Scope of access to be request from ASPSP and to be confirmed by PSU
       * @example {
       *       "valid_until": "2020-12-01T12:00:00.000000+00:00"
       *     }
       */
      access: components['schemas']['Access'];
      /**
       * @description ASPSP that PSU is going to be authenticated to
       * @example {
       *       "country": "FI",
       *       "name": "Nordea"
       *     }
       */
      aspsp: components['schemas']['ASPSP'];
      /**
       * State
       * @description Arbitrary string. Same string will be returned in query parameter when redirecting to the URL passed via redirect_url parameter
       * @example 3a57e2d3-2e0c-4336-af9b-7fa94f0606a3
       */
      state: string;
      /**
       * Redirect Url
       * Format: uri
       * @description URL that PSU will be redirected to after authorization
       */
      redirect_url: string;
      /** @description PSU type which consent is created for */
      psu_type?: components['schemas']['PSUType'];
      /**
       * Auth Method
       * @description Desired authorization method (in case ASPSP supports multiple). Supported methods can be obtained from ASPSP auth_methods
       * @example methodName
       */
      auth_method?: string;
      /**
       * Credentials
       * @description PSU credentials (User ID, company ID etc.) If not provided, then those are going to be asked from a PSU during authorization
       * @example {
       *       "userId": "MyUsername"
       *     }
       */
      credentials?: Record<string, never>;
      /**
       * Credentials Autosubmit
       * @description Controls whether user credentials will be autosubmitted (if passed). If set to `false` then credentials form will be prefilled with passed credentials
       * @default true
       */
      credentials_autosubmit: boolean;
      /**
       * Language
       * @description Preferred PSU language. Two-letter lowercase language code
       * @example fi
       */
      language?: string;
      /**
       * Psu Id
       * @description Unique identification of a PSU used by the client application. It can be used to match sessions of the same user. Although only hashed value is stored, it is recommended to use anonymised identifiers (i.e. digital ID instead of email or social security number). In case the parameter is not passed by the application, random value will be used.
       */
      psu_id?: string;
    };
    /** StartAuthorizationResponse */
    StartAuthorizationResponse: {
      /**
       * Url
       * Format: uri
       * @description URL to redirect PSU to
       * @example https://tilisy.enablebanking.com/welcome?sessionid=73100c65-c54d-46a1-87d1-aa3effde435a
       */
      url: string;
      /**
       * Authorization Id
       * Format: uuid
       * @description PSU authorisation ID, a value used to identify an authorisation session. Please note that another session ID will used to fetch account data.
       * @example 73100c65-c54d-46a1-87d1-aa3effde435a
       */
      authorization_id: string;
      /**
       * Psu Id Hash
       * @description Hashed unique identification of a PSU used by the client application. In case PSU ID is not passed by the client application, the hash is calculated based on a random value. The hash also inherits the application ID, so different hashes will be calculated when using the same PSU ID with different applications.
       */
      psu_id_hash: string;
    };
    /** StatusReasonInformation */
    StatusReasonInformation: {
      /**
       * Status Reason Code
       * @description ISO20022 status reason code
       */
      status_reason_code: string;
      /**
       * Status Reason Description
       * @description Status reason description
       */
      status_reason_description: string;
    };
    /** SuccessResponse */
    SuccessResponse: {
      /**
       * Message
       * @description Returns "OK" in case of successful request
       * @default OK
       */
      message: string;
    };
    /** Transaction */
    Transaction: {
      /**
       * Entry Reference
       * @description Unique transaction identifier provided by ASPSP. This identifier is both unique and immutable for accounts with the same identification hashes and can be used for matching transactions across multiple PSU authentication sessions. Usually the same identifier is available for transactions in ASPSP's online/mobile interface and is called archive ID or similarly. Please note that this identifier is not globally unique and same entry references are likely to occur for transactions belonging to different accounts.
       * @example 5561990681
       */
      entry_reference?: string;
      /**
       * Merchant Category Code
       * @description Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction
       * @example 5511
       */
      merchant_category_code?: string;
      /** @description Monetary sum of the transaction */
      transaction_amount: components['schemas']['AmountType'];
      /** @description Identification of the party receiving funds in the transaction */
      creditor?: components['schemas']['PartyIdentification'];
      /**
       * @description Identification of the account on which the transaction is credited
       * @example {
       *       "iban": "FI1737631867613465"
       *     }
       */
      creditor_account?: components['schemas']['AccountIdentification'];
      /** @description Identification of the creditor agent */
      creditor_agent?: components['schemas']['FinancialInstitutionIdentification'];
      /** @description Identification of the party sending funds in the transaction */
      debtor?: components['schemas']['PartyIdentification'];
      /**
       * @description Identification of the account on which the transaction is debited
       * @example {
       *       "iban": "FI8638798819867751"
       *     }
       */
      debtor_account?: components['schemas']['AccountIdentification'];
      /** @description Identification of the debtor agent */
      debtor_agent?: components['schemas']['FinancialInstitutionIdentification'];
      /** @description Allows the account servicer to correctly report a transaction, which in its turn will help account holders to perform their cash management and reconciliation operations. */
      bank_transaction_code?: components['schemas']['BankTransactionCode'];
      /**
       * @description Accounting flow of the transaction
       * @example CRDT
       */
      credit_debit_indicator: components['schemas']['CreditDebitIndicator'];
      /**
       * @description Available transaction status values
       * @example BOOK
       */
      status: components['schemas']['TransactionStatus'];
      /**
       * Booking Date
       * Format: date
       * @description Booking date of the transaction on the account, i.e. the date at which the transaction has been recorded on books
       * @example 2020-01-03
       */
      booking_date?: string;
      /**
       * Value Date
       * Format: date
       * @description Value date of the transaction on the account, i.e. the date at which funds become available to the account holder (in case of a credit transaction), or cease to be available to the account holder (in case of a debit transaction)
       * @example 2020-01-02
       */
      value_date?: string;
      /**
       * Transaction Date
       * Format: date
       * @description Date used for specific purposes:
       *     - for card transaction: date of the transaction
       *     - for credit transfer: acquiring date of the transaction
       *     - for direct debit: receiving date of the transaction
       * @example 2020-01-01
       */
      transaction_date?: string;
      /** @description Funds on the account after execution of the transaction */
      balance_after_transaction?: components['schemas']['AmountType'];
      /**
       * Reference Number
       * @description Credit transfer reference number (also known as the creditor reference or the structured creditor reference). The value is set when it is known that the transaction data contains a reference number (in either ISO 11649 or another format). If the format is known it is provided in the reference_number_schema field.
       * @example RF07850352502356628678117
       */
      reference_number?: string;
      /**
       * @description Indicates what kind of reference number is used.
       * @example SDDM
       */
      reference_number_schema?: components['schemas']['ReferenceNumberScheme'];
      /**
       * Remittance Information
       * @description Payment details. For credit transfers may contain free text, reference number or both at the same time (in case Extended Remittance Information is supported). When it is known that remittance information contains a reference number (either based on ISO 11649 or a local scheme), the reference number is also available via the `reference_number` field.
       * @example [
       *       "RF07850352502356628678117",
       *       "Gift for Alex"
       *     ]
       */
      remittance_information?: string[];
      /**
       * Debtor Account Additional Identification
       * @description All other debtor account identifiers provided by ASPSPs
       * @example {
       *       "identification": "12345678",
       *       "scheme_name": "CPAN"
       *     }
       */
      debtor_account_additional_identification?: components['schemas']['GenericIdentification'][];
      /**
       * Creditor Account Additional Identification
       * @description All other creditor account identifiers provided by ASPSPs
       * @example {
       *       "identification": "12345678",
       *       "scheme_name": "BBAN"
       *     }
       */
      creditor_account_additional_identification?: components['schemas']['GenericIdentification'][];
      /** @description Provides details on the currency exchange rate and contract. */
      exchange_rate?: components['schemas']['ExchangeRate'];
      /**
       * Note
       * @description The internal note made by PSU
       */
      note?: string;
      /**
       * Transaction Id
       * @description Identification used for fetching transaction details.This value can not be used to uniquely identify transactions and may change if the list of transactions is retrieved again. Null if fetching transaction details is not supported.
       */
      transaction_id?: string;
    };
    /**
     * TransactionStatus
     * @example BOOK
     * @enum {string}
     */
    TransactionStatus:
      | 'BOOK'
      | 'CNCL'
      | 'HOLD'
      | 'OTHR'
      | 'PDNG'
      | 'RJCT'
      | 'SCHD';
    /**
     * TransactionsFetchStrategy
     * @example default
     * @enum {string}
     */
    TransactionsFetchStrategy: 'default' | 'longest';
    /**
     * UnstructuredRemittanceInformation
     * @description Payment details. For credit transfers may contain free text, reference number or both at the same time (in case Extended Remittance Information is supported). When it is known that remittance information contains a reference number (either based on ISO 11649 or a local scheme), the reference number is also available via the `referenceNumber` field of the `Transaction` data structure.
     *
     */
    UnstructuredRemittanceInformation: string[];
    /**
     * Usage
     * @example PRIV
     * @enum {string}
     */
    Usage: 'PRIV' | 'ORGA';
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  initialize_session_auth_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['StartAuthorizationRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StartAuthorizationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Request Timeout */
      408: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  authorize_session_sessions_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AuthorizeSessionRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthorizeSessionResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Request Timeout */
      408: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  get_session_sessions__session_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Previously authorized session ID */
        session_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetSessionResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Request Timeout */
      408: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  delete_session_sessions__session_id__delete: {
    parameters: {
      query?: never;
      header?: {
        /** @description PSU IP address */
        'Psu-Ip-Address'?: string;
        /** @description PSU browser User Agent */
        'Psu-User-Agent'?: string;
        /** @description PSU Referer */
        'Psu-Referer'?: string;
        /** @description PSU accept header */
        'Psu-Accept'?: string;
        /** @description PSU charset */
        'Psu-Accept-Charset'?: string;
        /** @description PSU accept encoding */
        'Psu-Accept-Encoding'?: string;
        /** @description PSU accept language */
        'Psu-Accept-language'?: string;
        /** @description Comma separated latitude and longitude coordinates without spaces */
        'Psu-Geo-Location'?: string;
      };
      path: {
        /** @description Previously authorized session ID */
        session_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SuccessResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Request Timeout */
      408: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  get_account_accounts__account_id__details_get: {
    parameters: {
      query?: never;
      header?: {
        /** @description PSU IP address */
        'Psu-Ip-Address'?: string;
        /** @description PSU browser User Agent */
        'Psu-User-Agent'?: string;
        /** @description PSU Referer */
        'Psu-Referer'?: string;
        /** @description PSU accept header */
        'Psu-Accept'?: string;
        /** @description PSU charset */
        'Psu-Accept-Charset'?: string;
        /** @description PSU accept encoding */
        'Psu-Accept-Encoding'?: string;
        /** @description PSU accept language */
        'Psu-Accept-language'?: string;
        /** @description Comma separated latitude and longitude coordinates without spaces */
        'Psu-Geo-Location'?: string;
      };
      path: {
        /** @description Account ID */
        account_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AccountResource'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Request Timeout */
      408: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  get_account_balances_accounts__account_id__balances_get: {
    parameters: {
      query?: never;
      header?: {
        /** @description PSU IP address */
        'Psu-Ip-Address'?: string;
        /** @description PSU browser User Agent */
        'Psu-User-Agent'?: string;
        /** @description PSU Referer */
        'Psu-Referer'?: string;
        /** @description PSU accept header */
        'Psu-Accept'?: string;
        /** @description PSU charset */
        'Psu-Accept-Charset'?: string;
        /** @description PSU accept encoding */
        'Psu-Accept-Encoding'?: string;
        /** @description PSU accept language */
        'Psu-Accept-language'?: string;
        /** @description Comma separated latitude and longitude coordinates without spaces */
        'Psu-Geo-Location'?: string;
      };
      path: {
        /** @description PSU account ID accessible in the provided session */
        account_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HalBalances'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Request Timeout */
      408: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  get_account_transactions_accounts__account_id__transactions_get: {
    parameters: {
      query?: {
        /** @description Date to fetch transactions from (including the date, UTC timezone is assumed) */
        date_from?: string;
        /** @description Date to fetch transactions to (including the date, UTC timezone is assumed) */
        date_to?: string;
        /** @description Key, allowing iterate over multiple API pages of transactions */
        continuation_key?: string;
        /** @description Filter transactions by provided status */
        transaction_status?: components['schemas']['TransactionStatus'];
        /** @description Strategy how transaction are fetched */
        strategy?: components['schemas']['TransactionsFetchStrategy'];
      };
      header?: {
        /** @description PSU IP address */
        'Psu-Ip-Address'?: string;
        /** @description PSU browser User Agent */
        'Psu-User-Agent'?: string;
        /** @description PSU Referer */
        'Psu-Referer'?: string;
        /** @description PSU accept header */
        'Psu-Accept'?: string;
        /** @description PSU charset */
        'Psu-Accept-Charset'?: string;
        /** @description PSU accept encoding */
        'Psu-Accept-Encoding'?: string;
        /** @description PSU accept language */
        'Psu-Accept-language'?: string;
        /** @description Comma separated latitude and longitude coordinates without spaces */
        'Psu-Geo-Location'?: string;
      };
      path: {
        /** @description PSU account ID accessible in the provided session */
        account_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HalTransactions'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Request Timeout */
      408: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  get_transaction_accounts__account_id__transactions__transaction_id__get: {
    parameters: {
      query?: never;
      header?: {
        /** @description PSU IP address */
        'Psu-Ip-Address'?: string;
        /** @description PSU browser User Agent */
        'Psu-User-Agent'?: string;
        /** @description PSU Referer */
        'Psu-Referer'?: string;
        /** @description PSU accept header */
        'Psu-Accept'?: string;
        /** @description PSU charset */
        'Psu-Accept-Charset'?: string;
        /** @description PSU accept encoding */
        'Psu-Accept-Encoding'?: string;
        /** @description PSU accept language */
        'Psu-Accept-language'?: string;
        /** @description Comma separated latitude and longitude coordinates without spaces */
        'Psu-Geo-Location'?: string;
      };
      path: {
        /** @description Account ID */
        account_id: string;
        /** @description Transaction ID */
        transaction_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Transaction'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Request Timeout */
      408: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  create_payment_payments_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePaymentRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CreatePaymentResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Request Timeout */
      408: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  get_payment_payments__payment_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Payment ID */
        payment_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetPaymentResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Request Timeout */
      408: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  get_payment_transaction_payments__payment_id__transactions__transaction_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Payment ID */
        payment_id: string;
        /** @description Transaction ID */
        transaction_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetPaymentTransactionResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Request Timeout */
      408: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  get_aspsps_aspsps_get: {
    parameters: {
      query?: {
        /** @description Display only ASPSPs from specified country */
        country?: string;
        /** @description Display only ASPSPs which support specified psu type */
        psu_type?: components['schemas']['PSUType'];
        /** @description Display only ASPSPs which support specified service */
        service?: components['schemas']['Service'];
        /** @description Display only ASPSPs which support specified payment type */
        payment_type?: components['schemas']['PaymentType'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetAspspsResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Request Timeout */
      408: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  get_application_application_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetApplicationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Request Timeout */
      408: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
}
