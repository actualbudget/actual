#!/bin/bash -e

cd `dirname "$0"`
ROOT=`pwd -P`

DATA_DIR="$ROOT"/../../desktop-client/public/data
mkdir -p "$DATA_DIR"
"$ROOT"/copy-migrations "$DATA_DIR"

cd "$DATA_DIR"
find * -type f | sort > ../data-file-index.txt
cd "$ROOT"

OUTPUT_HASH="[hash]"
if [[ $NODE_ENV == 'development' ]]; then
    # Use a constant filename in development mode to make it easier to
    # rebuild the backend without having to rebuild the frontend
    OUTPUT_HASH="dev"
fi

# Clean out previous build files
rm -f "$ROOT"/../lib-dist/browser/*
rm -rf "$ROOT/../../desktop-client/public/kcab"

if [[ $NODE_ENV == 'development' ]]; then
  # In dev mode, symlink the build files.
  # Make sure to do this before starting the build since watch mode
  # will block
  if [[ "$OSTYPE" == "msys" ]]; then
    # Ensure symlinks are created as native Windows symlinks.
    export MSYS=winsymlinks:nativestrict
  fi
  ln -snf "$ROOT/../lib-dist/browser" "$ROOT/../../desktop-client/public/kcab"
fi

echo "Building node-libofx"
(cd "$ROOT/../../node-libofx" ; OUTFILE="$ROOT/../lib-dist/browser/node-libofx.js" node build.mjs)
# In dev mode, watch mode is used.
echo "Building loot-core"
(cd "$ROOT/.." ; OUTFMT="[dir]/[name].$OUTPUT_HASH" BUILD_ENV="$NODE_ENV" node build.mjs)

if [[ $NODE_ENV == 'production' ]]; then
  # In production, just copy the built files
  mkdir "$ROOT/../../desktop-client/public/kcab"
  cp -r "$ROOT"/../lib-dist/browser/* "$ROOT/../../desktop-client/public/kcab"
fi
