import { CategoryEntity, CategoryGroupEntity } from '../../types/models';
export { toDateRepr, fromDateRepr } from '../models';
export declare function getDatabasePath(): any;
export declare function openDatabase(id?: any): Promise<void>;
export declare function reopenDatabase(): Promise<void>;
export declare function closeDatabase(): Promise<void>;
export declare function setDatabase(db_: any): void;
export declare function getDatabase(): any;
export declare function loadClock(): Promise<void>;
export declare function runQuery(sql: string, params?: Array<string | number>, fetchAll?: false): any;
export declare function runQuery(sql: string, params: Array<string | number> | undefined, fetchAll: true): any;
export declare function execQuery(sql: any): void;
export declare function cache(sql: any): any;
export declare function transaction(fn: () => void): void;
export declare function asyncTransaction(fn: () => Promise<void>): Promise<void>;
export declare function all(sql: any, params?: (string | number)[]): Promise<any>;
export declare function first(sql: any, params?: (string | number)[]): Promise<any>;
export declare function firstSync(sql: any, params?: (string | number)[]): any;
export declare function run(sql: any, params?: (string | number)[]): Promise<any>;
export declare function select(table: any, id: any): Promise<any>;
export declare function update(table: any, params: any): Promise<void>;
export declare function insertWithUUID(table: any, row: any): Promise<any>;
export declare function insert(table: any, row: any): Promise<void>;
export declare function delete_(table: any, id: any): Promise<void>;
export declare function selectWithSchema(table: any, sql: any, params: any): Promise<any>;
export declare function selectFirstWithSchema(table: any, sql: any, params: any): Promise<any>;
export declare function insertWithSchema(table: any, row: any): Promise<any>;
export declare function updateWithSchema(table: any, fields: any): Promise<void>;
export declare function getCategories(): Promise<CategoryEntity[]>;
export declare function getCategoriesGrouped(): Promise<Array<CategoryGroupEntity>>;
export declare function insertCategoryGroup(group: any): Promise<any>;
export declare function updateCategoryGroup(group: any): Promise<void>;
export declare function moveCategoryGroup(id: any, targetId: any): Promise<void>;
export declare function deleteCategoryGroup(group: any, transferId?: string): Promise<void>;
export declare function insertCategory(category: any, { atEnd }?: {
    atEnd: any;
}): Promise<any>;
export declare function updateCategory(category: any): Promise<void>;
export declare function moveCategory(id: any, groupId: any, targetId?: string): Promise<void>;
export declare function deleteCategory(category: any, transferId?: string): Promise<void>;
export declare function getPayee(id: any): Promise<any>;
export declare function insertPayee(payee: any): Promise<any>;
export declare function deletePayee(payee: any): Promise<void>;
export declare function deleteTransferPayee(payee: any): Promise<void>;
export declare function updatePayee(payee: any): Promise<void>;
export declare function mergePayees(target: string, ids: string[]): Promise<void>;
export declare function getPayees(): Promise<any>;
export declare function syncGetOrphanedPayees(): Promise<any>;
export declare function getOrphanedPayees(): Promise<any>;
export declare function getPayeeByName(name: any): Promise<any>;
export declare function getAccounts(): Promise<any>;
export declare function insertAccount(account: any): Promise<any>;
export declare function updateAccount(account: any): Promise<void>;
export declare function deleteAccount(account: any): Promise<void>;
export declare function moveAccount(id: any, targetId: any): Promise<void>;
export declare function getTransaction(id: any): Promise<any>;
export declare function getTransactions(accountId: any): Promise<any>;
export declare function insertTransaction(transaction: any): Promise<any>;
export declare function updateTransaction(transaction: any): Promise<void>;
export declare function deleteTransaction(transaction: any): Promise<void>;
