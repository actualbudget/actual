import { type LocalPrefs } from '../types/prefs';
type DateLike = string | Date;
export declare function _parse(value: DateLike): Date;
export declare const parseDate: typeof _parse;
export declare function yearFromDate(date: DateLike): string;
export declare function monthFromDate(date: DateLike): string;
export declare function weekFromDate(date: DateLike, firstDayOfWeekIdx: LocalPrefs['firstDayOfWeekIdx']): string;
export declare function dayFromDate(date: DateLike): string;
export declare function currentMonth(): string;
export declare function currentWeek(firstDayOfWeekIdx?: LocalPrefs['firstDayOfWeekIdx']): string;
export declare function currentYear(): string;
export declare function currentDate(): Date;
export declare function currentDay(): string;
export declare function nextMonth(month: DateLike): string;
export declare function prevYear(month: DateLike): string;
export declare function prevMonth(month: DateLike): string;
export declare function addYears(year: DateLike, n: number): string;
export declare function addMonths(month: DateLike, n: number): string;
export declare function addWeeks(date: DateLike, n: number): string;
export declare function differenceInCalendarMonths(month1: DateLike, month2: DateLike): number;
export declare function differenceInCalendarDays(month1: DateLike, month2: DateLike): number;
export declare function subMonths(month: string | Date, n: number): string;
export declare function subWeeks(date: DateLike, n: number): string;
export declare function subYears(year: string | Date, n: number): string;
export declare function addDays(day: DateLike, n: number): string;
export declare function subDays(day: DateLike, n: number): string;
export declare function isBefore(month1: DateLike, month2: DateLike): boolean;
export declare function isAfter(month1: DateLike, month2: DateLike): boolean;
export declare function bounds(month: DateLike): {
    start: number;
    end: number;
};
export declare function _yearRange(start: DateLike, end: DateLike, inclusive?: boolean): string[];
export declare function yearRangeInclusive(start: DateLike, end: DateLike): string[];
export declare function _weekRange(start: DateLike, end: DateLike, inclusive?: boolean, firstDayOfWeekIdx?: LocalPrefs['firstDayOfWeekIdx']): string[];
export declare function weekRangeInclusive(start: DateLike, end: DateLike, firstDayOfWeekIdx?: LocalPrefs['firstDayOfWeekIdx']): string[];
export declare function _range(start: DateLike, end: DateLike, inclusive?: boolean): string[];
export declare function range(start: DateLike, end: DateLike): string[];
export declare function rangeInclusive(start: DateLike, end: DateLike): string[];
export declare function _dayRange(start: DateLike, end: DateLike, inclusive?: boolean): string[];
export declare function dayRange(start: DateLike, end: DateLike): string[];
export declare function dayRangeInclusive(start: DateLike, end: DateLike): string[];
export declare function getMonthFromIndex(year: string, monthIndex: number): string;
export declare function getMonthIndex(month: string): number;
export declare function getYear(month: string): string;
export declare function getMonth(day: string): string;
export declare function getDay(day: string): number;
export declare function getMonthEnd(day: string): string;
export declare function getWeekEnd(date: DateLike, firstDayOfWeekIdx?: LocalPrefs['firstDayOfWeekIdx']): string;
export declare function getYearStart(month: string): string;
export declare function getYearEnd(month: string): string;
export declare function sheetForMonth(month: string): string;
export declare function nameForMonth(month: DateLike): string;
export declare function format(month: DateLike, str: string): string;
export declare const getDateFormatRegex: import("memoize-one").MemoizedFn<(format: string) => RegExp>;
export declare const getDayMonthFormat: import("memoize-one").MemoizedFn<(format: string) => string>;
export declare const getDayMonthRegex: import("memoize-one").MemoizedFn<(format: string) => RegExp>;
export declare const getMonthYearFormat: import("memoize-one").MemoizedFn<(format: string) => string>;
export declare const getMonthYearRegex: import("memoize-one").MemoizedFn<(format: string) => RegExp>;
export declare const getShortYearFormat: import("memoize-one").MemoizedFn<(format: string) => string>;
export declare const getShortYearRegex: import("memoize-one").MemoizedFn<(format: string) => RegExp>;
export {};
